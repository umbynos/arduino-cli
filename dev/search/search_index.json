{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arduino CLI is an all-in-one solution that provides builder, Boards/Library Manager, uploader, discovery and many other tools needed to use any Arduino compatible board and platforms. Installation \u00b6 You have several options to install the latest version of the Arduino CLI on your system, see the installation page. Getting started \u00b6 Follow the Getting started guide to see how to use the most common CLI commands available. Using the gRPC interface \u00b6 The client_example folder contains a sample program that shows how to use the gRPC interface of the CLI. Available services and messages are detailed in the gRPC reference pages.","title":"Documentation Home"},{"location":"#installation","text":"You have several options to install the latest version of the Arduino CLI on your system, see the installation page.","title":"Installation"},{"location":"#getting-started","text":"Follow the Getting started guide to see how to use the most common CLI commands available.","title":"Getting started"},{"location":"#using-the-grpc-interface","text":"The client_example folder contains a sample program that shows how to use the gRPC interface of the CLI. Available services and messages are detailed in the gRPC reference pages.","title":"Using the gRPC interface"},{"location":"CONTRIBUTING/","text":"How to contribute \u00b6 First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. There are several ways you can get involved: Type of contribution Contribution method - Support request - Question - Discussion Post on the Arduino Forum - Bug report - Feature request Issue report (read the issue guidelines ) Beta testing Try out the nightly build - Bug fix - Enhancement Pull Request (read the pull request guidelines ) Translations for Arduino CLI transifex Monetary - Donate - Buy official products Issue Reports \u00b6 Do you need help or have a question about using Arduino CLI? Support requests should be made to Arduino CLI's dedicated board in the Arduino forum . High quality bug reports and feature requests are valuable contributions to the Arduino CLI project. Before reporting an issue \u00b6 Give the nightly build a test drive to see if your issue was already resolved. Search existing pull requests and issues to see if it was already reported. If you have additional information to provide about an existing issue, please comment there. You can use the Reactions feature if you only want to express support. Qualities of an excellent report \u00b6 The issue title should be descriptive. Vague titles make it difficult to understand the purpose of the issue, which might cause your issue to be overlooked. Provide a full set of steps necessary to reproduce the issue. Demonstration code or commands should be complete and simplified to the minimum necessary to reproduce the issue. Be responsive. We may need you to provide additional information in order to investigate and resolve the issue. If you find a solution to your problem, please comment on your issue report with an explanation of how you were able to fix it and close the issue. Pull Requests \u00b6 To propose improvements or fix a bug, feel free to submit a PR. Legal requirements \u00b6 Before we can accept your contributions you have to sign the Contributor License Agreement Pull request checklist \u00b6 In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if it exists. Write tests for the code you wrote. Open your PR against the master branch. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. Your PR must pass all CI tests before we will merge it. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making. Prerequisites \u00b6 To build the Arduino CLI from sources you need the following tools to be available in your local environment: Go version 1.14 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests you will also need: A serial port with an Arduino board attached A working Python environment, version 3.8 or later If you're working on the gRPC interface you will also have to: download the protoc compiler run go get -u github.com/golang/protobuf/protoc-gen-go Building the source code \u00b6 From the project folder root, just run: task build The project uses Go modules so dependencies will be downloaded automatically. At the end of the build, you should find an arduino-cli executable in the same folder. Running the tests \u00b6 There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run unit tests: task test-unit To run integration tests (these will take some time and require special setup, see following paragraph): task test-integration Running only some tests \u00b6 By default, all tests from all go packages are run. To run only unit tests from one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./arduino/cores/packagemanager task test-unit Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name: TEST_REGEX='^TestTryBuild.*' task test-unit Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindBoardWithFQBN$' TARGETS=./arduino/cores/packagemanager task test-unit Integration tests \u00b6 Being a command line interface, Arduino CLI is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. On top of this, many Arduino CLI features involve communicating with external devices, most likely through a serial port, so unit tests can only go so far in giving us confidence that the code is working. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run Arduino CLI in a different process and assess the options are correctly understood and the output is what we expect. Hardware requirements for running the full suite of integration tests: \u00b6 An Arduino board attached to a serial port. The board must: Use one of the VID/PID pairs used by Arduino or their partners (as is the case with all modern official Arduino boards except the classic Nano). Accept uploads using the FQBN associated with that VID/PID (which will be the case unless you have installed a custom bootloader or removed the bootloader). Note that running the integration tests will result in a sketch being uploaded to every attached Arduino board meeting the above requirements. Software requirements for running integration tests: \u00b6 A working Python environment. Chances are that you already have Python installed in your system, if this is not the case you can download the official distribution or use the package manager provided by your Operating System. Some dependencies need to be installed before running the tests and to avoid polluting your global Python environment with dependencies that might be only used by the Arduino CLI, to do so we use Poetry . First you need to install it (you might need to sudo the following command): pip3 install --user poetry For more installation options read the official documentation . Running tests \u00b6 After the software requirements have been installed you should be able to run the tests with: task test-integration This will automatically install the necessary dependencies, if not already installed, and run the integration tests automatically. To run specific modules you must run pytest from the virtual environment created by Poetry. poetry run pytest test/test_lib.py To run very specific test functions: poetry run pytest test/test_lib.py::test_list You can avoid writing the poetry run prefix each time by creating a new shell inside the virtual environment: poetry shell pytest test_lib.py pytest test_lib.py::test_list Linting and formatting \u00b6 When editing any Python file in the project remember to run linting checks with: task python:check This will run flake8 automatically and return any error in the code formatting, if not already installed it will also install integration tests dependencies. In case of linting errors you should be able to solve most of them by automatically formatting with: task python:format Configuration files formatting \u00b6 To keep the configurations tidy and in order we use Prettier to automatically format all YAML files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task config:check If the output tells you that some files are not formatted correctly run: task config:format When opening a new Pull Request, checks are automatically run to verify that configuration files are correctly formatted. In case of failures we might ask you to update the PR with correct formatting. Working on docs \u00b6 Documentation is provided to final users in form of static HTML content generated from a tool called MkDocs and hosted on GitHub Pages . Local development \u00b6 Most of the documentation consists of static content written over several Markdown files under the docs folder at the root of this git repository but some other content is dynamically generated from the CI pipelines - this is the case with the command line reference and the gRPC interface, for example. If you want to check out how the documentation would look after some local changes, you might need to reproduce what happens in the CI, generating the full documentation website from your personal computer. To run the docs toolchain locally, you need to have a few dependencies and tools installed: Go version 1.14 or later Taskfile to help you run the most common tasks from the command line A working Python environment, see this paragraph if you need to setup one Before running the toolchain, perform the following operations from the root of the git repository (if you have a Python virtual environment, activate it before proceeding): go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc pip install -r requirements_docs.txt When working on docs, you can launch a command that will take care of generating the docs, build the static website and start a local server you can later access with a web browser to see a preview of your changes. From the root of the git repository run: task docs:serve If you don't see any error, hit http://127.0.0.1:8000 with your browser to navigate the generated docs. Docs publishing \u00b6 The present git repository has a special branch called gh-pages that contains the generated HTML code for the docs website; every time a change is pushed to this special branch, GitHub automatically triggers a deployment to pull the change and publish a new version of the website. Do not open Pull Requests to push changes to the gh-pages branch, that will be done exclusively from the CI. Docs versioning \u00b6 In order to provide support for multiple Arduino CLI releases, Documentation is versioned so that visitors can select which version of the documentation website should be displayed. Unfortunately this feature isn't provided by GitHub pages or MkDocs, so we had to implement it on top of the generation process. Before delving into the details of the generation process, here follow some requirements that were established to provide versioned documentation: A special version of the documentation called dev is provided to reflect the status of the Arduino CLI on the master branch - this includes unreleased features and bugfixes. Docs are versioned after the minor version of an Arduino CLI release. For example, Arduino CLI 0.99.1 and 0.99.2 will be both covered by documentation version 0.99 . The landing page of the documentation website will automatically redirect visitors to the most recently released version of the Arduino CLI. To implement the requirements above, the execution of MkDocs is wrapped using a CLI tool called Mike that does a few things for us: It runs MkDocs targeting subfolders named after the Arduino CLI version, e.g. documentation for version 0.10.1 can be found under the folder 0.10 . It injects an HTML control into the documentation website that lets visitors choose which version of the docs to browse from a dropdown list. It provides a redirect to a version we decide when visitors hit the landing page of the documentation website. It pushes generated contents to the gh-pages branch. Note: unless you're working on the generation process itself, you should never run Mike from a local environment, either directly or through the Task docs:publish . This might result in unwanted changes to the public website. Docs formatting \u00b6 To keep the documentation tidy and in order we use Prettier to automatically format all Markdown files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task docs:check If the output tells you that some files are not formatted correctly run: task docs:format When opening a new Pull Request, checks are automatically run to verify that documentation is correctly formatted. In case of failures we might ask you to update the PR with correct formatting. Docs automation \u00b6 In order to avoid unwanted changes to the public website hosting the Arduino CLI documentation, only Mike is allowed to push changes to the gh-pages branch, and this only happens from within the CI, in a workflow named publish-docs . The CI is responsible for guessing which version of the Arduino CLI we're building docs for, so that generated content will be stored in the appropriate section of the documentation website. Because this guessing might be fairly complex, the logic is implemented in a Python script called build.py . The script will determine the version of the Arduino CLI that was modified in the current commit (either dev or an official, numbered release) and whether the redirect to the latest version that happens on the landing page should be updated or not. Internationalization (i18n) \u00b6 In order to support i18n in the CLI, any messages that are intended to be translated should be wrapped in a call to i18n.Tr . This call allows us to build a catalog of translatable strings, replacing the reference string at runtime with the localized value. Adding or modifying these messages requires an i18n update, as this process creates the reference catalog that is shared with translators. For that reason, the task check command will fail if the catalog was not updated to sync with changes to the source code. To update the catalog, execute the following command and commit the changes. task i18n:update To verify that the catalog is up-to-date, you may execute the command: task i18n:check Example usage: package main import ( \"fmt\" \"github.com/arduino/arduino-cli/i18n\" ) func main() { fmt.Println(i18n.Tr(\"Hello World!\")) } Additional settings \u00b6 If you need to push a commit that's only shipping documentation changes or example files, thus a complete no-op for the test suite, please start the commit message with the string [skip ci] to skip the build and give that slot to someone else who does need it. If your PR doesn't need to be included in the changelog, please start the commit message and PR title with the string [skip changelog]","title":"How to contribute"},{"location":"CONTRIBUTING/#how-to-contribute","text":"First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. There are several ways you can get involved: Type of contribution Contribution method - Support request - Question - Discussion Post on the Arduino Forum - Bug report - Feature request Issue report (read the issue guidelines ) Beta testing Try out the nightly build - Bug fix - Enhancement Pull Request (read the pull request guidelines ) Translations for Arduino CLI transifex Monetary - Donate - Buy official products","title":"How to contribute"},{"location":"CONTRIBUTING/#issue-reports","text":"Do you need help or have a question about using Arduino CLI? Support requests should be made to Arduino CLI's dedicated board in the Arduino forum . High quality bug reports and feature requests are valuable contributions to the Arduino CLI project.","title":"Issue Reports"},{"location":"CONTRIBUTING/#before-reporting-an-issue","text":"Give the nightly build a test drive to see if your issue was already resolved. Search existing pull requests and issues to see if it was already reported. If you have additional information to provide about an existing issue, please comment there. You can use the Reactions feature if you only want to express support.","title":"Before reporting an issue"},{"location":"CONTRIBUTING/#qualities-of-an-excellent-report","text":"The issue title should be descriptive. Vague titles make it difficult to understand the purpose of the issue, which might cause your issue to be overlooked. Provide a full set of steps necessary to reproduce the issue. Demonstration code or commands should be complete and simplified to the minimum necessary to reproduce the issue. Be responsive. We may need you to provide additional information in order to investigate and resolve the issue. If you find a solution to your problem, please comment on your issue report with an explanation of how you were able to fix it and close the issue.","title":"Qualities of an excellent report"},{"location":"CONTRIBUTING/#pull-requests","text":"To propose improvements or fix a bug, feel free to submit a PR.","title":"Pull Requests"},{"location":"CONTRIBUTING/#legal-requirements","text":"Before we can accept your contributions you have to sign the Contributor License Agreement","title":"Legal requirements"},{"location":"CONTRIBUTING/#pull-request-checklist","text":"In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if it exists. Write tests for the code you wrote. Open your PR against the master branch. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. Your PR must pass all CI tests before we will merge it. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making.","title":"Pull request checklist"},{"location":"CONTRIBUTING/#prerequisites","text":"To build the Arduino CLI from sources you need the following tools to be available in your local environment: Go version 1.14 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests you will also need: A serial port with an Arduino board attached A working Python environment, version 3.8 or later If you're working on the gRPC interface you will also have to: download the protoc compiler run go get -u github.com/golang/protobuf/protoc-gen-go","title":"Prerequisites"},{"location":"CONTRIBUTING/#building-the-source-code","text":"From the project folder root, just run: task build The project uses Go modules so dependencies will be downloaded automatically. At the end of the build, you should find an arduino-cli executable in the same folder.","title":"Building the source code"},{"location":"CONTRIBUTING/#running-the-tests","text":"There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run unit tests: task test-unit To run integration tests (these will take some time and require special setup, see following paragraph): task test-integration","title":"Running the tests"},{"location":"CONTRIBUTING/#running-only-some-tests","text":"By default, all tests from all go packages are run. To run only unit tests from one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./arduino/cores/packagemanager task test-unit Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name: TEST_REGEX='^TestTryBuild.*' task test-unit Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindBoardWithFQBN$' TARGETS=./arduino/cores/packagemanager task test-unit","title":"Running only some tests"},{"location":"CONTRIBUTING/#integration-tests","text":"Being a command line interface, Arduino CLI is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. On top of this, many Arduino CLI features involve communicating with external devices, most likely through a serial port, so unit tests can only go so far in giving us confidence that the code is working. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run Arduino CLI in a different process and assess the options are correctly understood and the output is what we expect.","title":"Integration tests"},{"location":"CONTRIBUTING/#hardware-requirements-for-running-the-full-suite-of-integration-tests","text":"An Arduino board attached to a serial port. The board must: Use one of the VID/PID pairs used by Arduino or their partners (as is the case with all modern official Arduino boards except the classic Nano). Accept uploads using the FQBN associated with that VID/PID (which will be the case unless you have installed a custom bootloader or removed the bootloader). Note that running the integration tests will result in a sketch being uploaded to every attached Arduino board meeting the above requirements.","title":"Hardware requirements for running the full suite of integration tests:"},{"location":"CONTRIBUTING/#software-requirements-for-running-integration-tests","text":"A working Python environment. Chances are that you already have Python installed in your system, if this is not the case you can download the official distribution or use the package manager provided by your Operating System. Some dependencies need to be installed before running the tests and to avoid polluting your global Python environment with dependencies that might be only used by the Arduino CLI, to do so we use Poetry . First you need to install it (you might need to sudo the following command): pip3 install --user poetry For more installation options read the official documentation .","title":"Software requirements for running integration tests:"},{"location":"CONTRIBUTING/#running-tests","text":"After the software requirements have been installed you should be able to run the tests with: task test-integration This will automatically install the necessary dependencies, if not already installed, and run the integration tests automatically. To run specific modules you must run pytest from the virtual environment created by Poetry. poetry run pytest test/test_lib.py To run very specific test functions: poetry run pytest test/test_lib.py::test_list You can avoid writing the poetry run prefix each time by creating a new shell inside the virtual environment: poetry shell pytest test_lib.py pytest test_lib.py::test_list","title":"Running tests"},{"location":"CONTRIBUTING/#linting-and-formatting","text":"When editing any Python file in the project remember to run linting checks with: task python:check This will run flake8 automatically and return any error in the code formatting, if not already installed it will also install integration tests dependencies. In case of linting errors you should be able to solve most of them by automatically formatting with: task python:format","title":"Linting and formatting"},{"location":"CONTRIBUTING/#configuration-files-formatting","text":"To keep the configurations tidy and in order we use Prettier to automatically format all YAML files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task config:check If the output tells you that some files are not formatted correctly run: task config:format When opening a new Pull Request, checks are automatically run to verify that configuration files are correctly formatted. In case of failures we might ask you to update the PR with correct formatting.","title":"Configuration files formatting"},{"location":"CONTRIBUTING/#working-on-docs","text":"Documentation is provided to final users in form of static HTML content generated from a tool called MkDocs and hosted on GitHub Pages .","title":"Working on docs"},{"location":"CONTRIBUTING/#local-development","text":"Most of the documentation consists of static content written over several Markdown files under the docs folder at the root of this git repository but some other content is dynamically generated from the CI pipelines - this is the case with the command line reference and the gRPC interface, for example. If you want to check out how the documentation would look after some local changes, you might need to reproduce what happens in the CI, generating the full documentation website from your personal computer. To run the docs toolchain locally, you need to have a few dependencies and tools installed: Go version 1.14 or later Taskfile to help you run the most common tasks from the command line A working Python environment, see this paragraph if you need to setup one Before running the toolchain, perform the following operations from the root of the git repository (if you have a Python virtual environment, activate it before proceeding): go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc pip install -r requirements_docs.txt When working on docs, you can launch a command that will take care of generating the docs, build the static website and start a local server you can later access with a web browser to see a preview of your changes. From the root of the git repository run: task docs:serve If you don't see any error, hit http://127.0.0.1:8000 with your browser to navigate the generated docs.","title":"Local development"},{"location":"CONTRIBUTING/#docs-publishing","text":"The present git repository has a special branch called gh-pages that contains the generated HTML code for the docs website; every time a change is pushed to this special branch, GitHub automatically triggers a deployment to pull the change and publish a new version of the website. Do not open Pull Requests to push changes to the gh-pages branch, that will be done exclusively from the CI.","title":"Docs publishing"},{"location":"CONTRIBUTING/#docs-versioning","text":"In order to provide support for multiple Arduino CLI releases, Documentation is versioned so that visitors can select which version of the documentation website should be displayed. Unfortunately this feature isn't provided by GitHub pages or MkDocs, so we had to implement it on top of the generation process. Before delving into the details of the generation process, here follow some requirements that were established to provide versioned documentation: A special version of the documentation called dev is provided to reflect the status of the Arduino CLI on the master branch - this includes unreleased features and bugfixes. Docs are versioned after the minor version of an Arduino CLI release. For example, Arduino CLI 0.99.1 and 0.99.2 will be both covered by documentation version 0.99 . The landing page of the documentation website will automatically redirect visitors to the most recently released version of the Arduino CLI. To implement the requirements above, the execution of MkDocs is wrapped using a CLI tool called Mike that does a few things for us: It runs MkDocs targeting subfolders named after the Arduino CLI version, e.g. documentation for version 0.10.1 can be found under the folder 0.10 . It injects an HTML control into the documentation website that lets visitors choose which version of the docs to browse from a dropdown list. It provides a redirect to a version we decide when visitors hit the landing page of the documentation website. It pushes generated contents to the gh-pages branch. Note: unless you're working on the generation process itself, you should never run Mike from a local environment, either directly or through the Task docs:publish . This might result in unwanted changes to the public website.","title":"Docs versioning"},{"location":"CONTRIBUTING/#docs-formatting","text":"To keep the documentation tidy and in order we use Prettier to automatically format all Markdown files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task docs:check If the output tells you that some files are not formatted correctly run: task docs:format When opening a new Pull Request, checks are automatically run to verify that documentation is correctly formatted. In case of failures we might ask you to update the PR with correct formatting.","title":"Docs formatting"},{"location":"CONTRIBUTING/#docs-automation","text":"In order to avoid unwanted changes to the public website hosting the Arduino CLI documentation, only Mike is allowed to push changes to the gh-pages branch, and this only happens from within the CI, in a workflow named publish-docs . The CI is responsible for guessing which version of the Arduino CLI we're building docs for, so that generated content will be stored in the appropriate section of the documentation website. Because this guessing might be fairly complex, the logic is implemented in a Python script called build.py . The script will determine the version of the Arduino CLI that was modified in the current commit (either dev or an official, numbered release) and whether the redirect to the latest version that happens on the landing page should be updated or not.","title":"Docs automation"},{"location":"CONTRIBUTING/#internationalization-i18n","text":"In order to support i18n in the CLI, any messages that are intended to be translated should be wrapped in a call to i18n.Tr . This call allows us to build a catalog of translatable strings, replacing the reference string at runtime with the localized value. Adding or modifying these messages requires an i18n update, as this process creates the reference catalog that is shared with translators. For that reason, the task check command will fail if the catalog was not updated to sync with changes to the source code. To update the catalog, execute the following command and commit the changes. task i18n:update To verify that the catalog is up-to-date, you may execute the command: task i18n:check Example usage: package main import ( \"fmt\" \"github.com/arduino/arduino-cli/i18n\" ) func main() { fmt.Println(i18n.Tr(\"Hello World!\")) }","title":"Internationalization (i18n)"},{"location":"CONTRIBUTING/#additional-settings","text":"If you need to push a commit that's only shipping documentation changes or example files, thus a complete no-op for the test suite, please start the commit message with the string [skip ci] to skip the build and give that slot to someone else who does need it. If your PR doesn't need to be included in the changelog, please start the commit message and PR title with the string [skip changelog]","title":"Additional settings"},{"location":"FAQ/","text":"Arduino Uno/Mega/Duemilanove is not detected \u00b6 When you run arduino-cli board list , your board doesn't show up. Possible causes: Your board is a cheaper clone, or It mounts a USB2Serial converter like FT232 or CH340: these chips always report the same USB VID/PID to the operating system, so the only thing we know is that the board mounts that specific USB2Serial chip, but we don\u2019t know which board that chip is on. What's the FQBN string? \u00b6 For a deeper understanding of how FQBN works, you should understand the Arduino platform specification . How to set multiple board options? \u00b6 Additional board options have to be separated by commas (instead of colon): $ arduino-cli compile --fqbn \"esp8266:esp8266:generic:xtal=160,baud=57600\" TestSketch Where is the Serial Monitor? \u00b6 This being a command line tool, we believe it's up to the user to choose their preferred way of interacting with the serial connection. If we were to integrate it into the CLI we'd end up putting a tool inside a tool, and this would be something that we're trying to avoid. There are many excellent serial terminals to chose from. On Linux or macOS, you may already have screen installed. On Windows, a good choice for command line usage is Plink, included with PuTTY . Arduino CLI does provide a gRPC interface which offers the capability for powerful integration with custom monitors. See the Monitor service documentation . Additional assistance \u00b6 If your question wasn't answered, feel free to ask on Arduino CLI's forum board .","title":"FAQ"},{"location":"FAQ/#arduino-unomegaduemilanove-is-not-detected","text":"When you run arduino-cli board list , your board doesn't show up. Possible causes: Your board is a cheaper clone, or It mounts a USB2Serial converter like FT232 or CH340: these chips always report the same USB VID/PID to the operating system, so the only thing we know is that the board mounts that specific USB2Serial chip, but we don\u2019t know which board that chip is on.","title":"Arduino Uno/Mega/Duemilanove is not detected"},{"location":"FAQ/#whats-the-fqbn-string","text":"For a deeper understanding of how FQBN works, you should understand the Arduino platform specification .","title":"What's the FQBN string?"},{"location":"FAQ/#how-to-set-multiple-board-options","text":"Additional board options have to be separated by commas (instead of colon): $ arduino-cli compile --fqbn \"esp8266:esp8266:generic:xtal=160,baud=57600\" TestSketch","title":"How to set multiple board options?"},{"location":"FAQ/#where-is-the-serial-monitor","text":"This being a command line tool, we believe it's up to the user to choose their preferred way of interacting with the serial connection. If we were to integrate it into the CLI we'd end up putting a tool inside a tool, and this would be something that we're trying to avoid. There are many excellent serial terminals to chose from. On Linux or macOS, you may already have screen installed. On Windows, a good choice for command line usage is Plink, included with PuTTY . Arduino CLI does provide a gRPC interface which offers the capability for powerful integration with custom monitors. See the Monitor service documentation .","title":"Where is the Serial Monitor?"},{"location":"FAQ/#additional-assistance","text":"If your question wasn't answered, feel free to ask on Arduino CLI's forum board .","title":"Additional assistance"},{"location":"command-line-completion/","text":"arduino-cli supports command-line completion (also known as tab completion ) for basic commands. Currently only bash , zsh , fish shells are supported Before you start \u00b6 In order to generate the file required to make the completion work you have to install Arduino CLI first. Generate the completion file \u00b6 To generate the completion file you can use arduino-cli completion [bash|zsh|fish] [--no-descriptions] . By default this command will print on the standard output (the shell window) the content of the completion file. To save to an actual file use the > redirect symbol. Bash \u00b6 Use arduino-cli completion bash > arduino-cli.sh to generate the completion file. At this point you can move that file in /etc/bash_completion.d/ (root access is required) with sudo mv arduino-cli.sh /etc/bash_completion.d/ . A not recommended alternative is to source the completion file in ~/.bashrc . Remember to open a new shell to test the functionality. Zsh \u00b6 Use arduino-cli completion zsh > _arduino-cli to generate the completion file. At this point you can place the file in a directory listed in your fpath if you have already created a directory to store your completion. Or if you want you can create a directory, add it to your fpath and copy the file in it: mkdir ~/completion_zsh add fpath=($HOME/completion_zsh $fpath) at the beginning of your ~/.zshrc file mv _arduino-cli ~/completion_zsh/ Remember to open a new shell to test the functionality. Fish \u00b6 Use arduino-cli completion fish > arduino-cli.fish to generate the completion file. At this point you can place the file in ~/.config/fish/completions as stated in the official documentation . Remember to create the directory if it's not already there mkdir -p ~/.config/fish/completions/ and then place the completion file in there with mv arduino-cli.fish ~/.config/fish/completions/ Remember to open a new shell to test the functionality. Disabling command and flag descriptions \u00b6 By default fish and zsh completion have command and flag description enabled by default. If you want to disable this behaviour you can simply pass the --no-descriptions flag when calling completion command and the generated file will not have descriptions N.B. This flag is not compatible with bash Brew \u00b6 If you install the arduino-cli using homebrew package manager the completion should work out of the box if you have followed the official documentation .","title":"Command line completion"},{"location":"command-line-completion/#before-you-start","text":"In order to generate the file required to make the completion work you have to install Arduino CLI first.","title":"Before you start"},{"location":"command-line-completion/#generate-the-completion-file","text":"To generate the completion file you can use arduino-cli completion [bash|zsh|fish] [--no-descriptions] . By default this command will print on the standard output (the shell window) the content of the completion file. To save to an actual file use the > redirect symbol.","title":"Generate the completion file"},{"location":"command-line-completion/#bash","text":"Use arduino-cli completion bash > arduino-cli.sh to generate the completion file. At this point you can move that file in /etc/bash_completion.d/ (root access is required) with sudo mv arduino-cli.sh /etc/bash_completion.d/ . A not recommended alternative is to source the completion file in ~/.bashrc . Remember to open a new shell to test the functionality.","title":"Bash"},{"location":"command-line-completion/#zsh","text":"Use arduino-cli completion zsh > _arduino-cli to generate the completion file. At this point you can place the file in a directory listed in your fpath if you have already created a directory to store your completion. Or if you want you can create a directory, add it to your fpath and copy the file in it: mkdir ~/completion_zsh add fpath=($HOME/completion_zsh $fpath) at the beginning of your ~/.zshrc file mv _arduino-cli ~/completion_zsh/ Remember to open a new shell to test the functionality.","title":"Zsh"},{"location":"command-line-completion/#fish","text":"Use arduino-cli completion fish > arduino-cli.fish to generate the completion file. At this point you can place the file in ~/.config/fish/completions as stated in the official documentation . Remember to create the directory if it's not already there mkdir -p ~/.config/fish/completions/ and then place the completion file in there with mv arduino-cli.fish ~/.config/fish/completions/ Remember to open a new shell to test the functionality.","title":"Fish"},{"location":"command-line-completion/#disabling-command-and-flag-descriptions","text":"By default fish and zsh completion have command and flag description enabled by default. If you want to disable this behaviour you can simply pass the --no-descriptions flag when calling completion command and the generated file will not have descriptions N.B. This flag is not compatible with bash","title":"Disabling command and flag descriptions"},{"location":"command-line-completion/#brew","text":"If you install the arduino-cli using homebrew package manager the completion should work out of the box if you have followed the official documentation .","title":"Brew"},{"location":"configuration/","text":"Configuration keys \u00b6 board_manager additional_urls - the URLs to any additional Boards Manager package index files needed for your boards platforms. daemon - options related to running Arduino CLI as a gRPC server. port - TCP port used for gRPC client connections. directories - directories used by Arduino CLI. data - directory used to store Boards/Library Manager index files and Boards Manager platform installations. downloads - directory used to stage downloaded archives during Boards/Library Manager installations. user - the equivalent of the Arduino IDE's \"sketchbook\" directory . Library Manager installations are made to the libraries subdirectory of the user directory. logging - configuration options for Arduino CLI's logs. file - path to the file where logs will be written. format - output format for the logs. Allowed values are text or json . level - messages with this level and above will be logged. Valid levels are: trace , debug , info , warn , error , fatal , panic . telemetry - settings related to the collection of data used for continued improvement of Arduino CLI. addr - TCP port used for telemetry communication. enabled - controls the use of telemetry. Configuration methods \u00b6 Arduino CLI may be configured in three ways: Command line flags Environment variables Configuration file If a configuration option is configured by multiple methods, the value set by the method highest on the above list overwrites the ones below it. If a configuration option is not set, Arduino CLI uses a default value. arduino-cli config dump displays the current configuration values. Command line flags \u00b6 Arduino CLI's command line flags are documented in the command line help and the Arduino CLI command reference . Example \u00b6 Setting an additional Boards Manager URL using the --additional-urls command line flag: $ arduino-cli core update-index --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json Environment variables \u00b6 All configuration options can be set via environment variables. The variable names start with ARDUINO , followed by the configuration key names, with each component separated by _ . For example, the ARDUINO_DIRECTORIES_USER environment variable sets the directories.user configuration option. On Linux or macOS, you can use the export command to set environment variables. On Windows cmd, you can use the set command . Example \u00b6 Setting an additional Boards Manager URL using the ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variable: $ export ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS = https://downloads.arduino.cc/packages/package_staging_index.json Configuration file \u00b6 arduino-cli config init creates or updates a configuration file with the current configuration settings. This allows saving the options set by command line flags or environment variables. For example: arduino-cli config init --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json File name \u00b6 The configuration file must be named arduino-cli , with the appropriate file extension for the file's format. Supported formats \u00b6 arduino-cli config init creates a YAML file, however a variety of common formats are supported: JSON TOML YAML Java properties file HCL envfile INI Locations \u00b6 Configuration files in the following locations are recognized by Arduino CLI: Location specified by the --config-file command line flag Current working directory Any parent directory of the current working directory (more immediate parents having higher precedence) Arduino CLI data directory (as configured by directories.data ) If multiple configuration files are present, the one highest on the above list is used. Configuration files are not combined. The location of the active configuration file can be determined by running the command: arduino-cli config dump --verbose Example \u00b6 Setting an additional Boards Manager URL using a YAML format configuration file: board_manager : additional_urls : - https://downloads.arduino.cc/packages/package_staging_index.json Doing the same using a TOML format file: [board_manager] additional_urls = [ \"https://downloads.arduino.cc/packages/package_staging_index.json\" ]","title":"Configuration"},{"location":"configuration/#configuration-keys","text":"board_manager additional_urls - the URLs to any additional Boards Manager package index files needed for your boards platforms. daemon - options related to running Arduino CLI as a gRPC server. port - TCP port used for gRPC client connections. directories - directories used by Arduino CLI. data - directory used to store Boards/Library Manager index files and Boards Manager platform installations. downloads - directory used to stage downloaded archives during Boards/Library Manager installations. user - the equivalent of the Arduino IDE's \"sketchbook\" directory . Library Manager installations are made to the libraries subdirectory of the user directory. logging - configuration options for Arduino CLI's logs. file - path to the file where logs will be written. format - output format for the logs. Allowed values are text or json . level - messages with this level and above will be logged. Valid levels are: trace , debug , info , warn , error , fatal , panic . telemetry - settings related to the collection of data used for continued improvement of Arduino CLI. addr - TCP port used for telemetry communication. enabled - controls the use of telemetry.","title":"Configuration keys"},{"location":"configuration/#configuration-methods","text":"Arduino CLI may be configured in three ways: Command line flags Environment variables Configuration file If a configuration option is configured by multiple methods, the value set by the method highest on the above list overwrites the ones below it. If a configuration option is not set, Arduino CLI uses a default value. arduino-cli config dump displays the current configuration values.","title":"Configuration methods"},{"location":"configuration/#command-line-flags","text":"Arduino CLI's command line flags are documented in the command line help and the Arduino CLI command reference .","title":"Command line flags"},{"location":"configuration/#example","text":"Setting an additional Boards Manager URL using the --additional-urls command line flag: $ arduino-cli core update-index --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json","title":"Example"},{"location":"configuration/#environment-variables","text":"All configuration options can be set via environment variables. The variable names start with ARDUINO , followed by the configuration key names, with each component separated by _ . For example, the ARDUINO_DIRECTORIES_USER environment variable sets the directories.user configuration option. On Linux or macOS, you can use the export command to set environment variables. On Windows cmd, you can use the set command .","title":"Environment variables"},{"location":"configuration/#example_1","text":"Setting an additional Boards Manager URL using the ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS environment variable: $ export ARDUINO_BOARD_MANAGER_ADDITIONAL_URLS = https://downloads.arduino.cc/packages/package_staging_index.json","title":"Example"},{"location":"configuration/#configuration-file","text":"arduino-cli config init creates or updates a configuration file with the current configuration settings. This allows saving the options set by command line flags or environment variables. For example: arduino-cli config init --additional-urls https://downloads.arduino.cc/packages/package_staging_index.json","title":"Configuration file"},{"location":"configuration/#file-name","text":"The configuration file must be named arduino-cli , with the appropriate file extension for the file's format.","title":"File name"},{"location":"configuration/#supported-formats","text":"arduino-cli config init creates a YAML file, however a variety of common formats are supported: JSON TOML YAML Java properties file HCL envfile INI","title":"Supported formats"},{"location":"configuration/#locations","text":"Configuration files in the following locations are recognized by Arduino CLI: Location specified by the --config-file command line flag Current working directory Any parent directory of the current working directory (more immediate parents having higher precedence) Arduino CLI data directory (as configured by directories.data ) If multiple configuration files are present, the one highest on the above list is used. Configuration files are not combined. The location of the active configuration file can be determined by running the command: arduino-cli config dump --verbose","title":"Locations"},{"location":"configuration/#example_2","text":"Setting an additional Boards Manager URL using a YAML format configuration file: board_manager : additional_urls : - https://downloads.arduino.cc/packages/package_staging_index.json Doing the same using a TOML format file: [board_manager] additional_urls = [ \"https://downloads.arduino.cc/packages/package_staging_index.json\" ]","title":"Example"},{"location":"getting-started/","text":"Despite the lack of feature parity at the moment, Arduino CLI provides many of the features you can find in the Arduino IDE. Let's see some examples. Before you start \u00b6 arduino-cli is a container of commands and each command has its own dedicated help text that can be shown with the help command like this: $ arduino-cli help core Arduino Core operations. Usage: arduino-cli core [command] Examples: ./arduino-cli core update-index Available Commands: download Downloads one or more cores and corresponding tool dependencies. install Installs one or more cores and corresponding tool dependencies. list Shows the list of installed platforms. search Search for a core in Boards Manager. uninstall Uninstalls one or more cores and corresponding tool dependencies if no more used. update-index Updates the index of cores. upgrade Upgrades one or all installed platforms to the latest version. Flags: -h, --help help for core Global Flags: --additional-urls strings Additional URLs for Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. -v, --verbose Print the logs on the standard output. Use \"arduino-cli core [command] --help\" for more information about a command. Create a configuration file \u00b6 Arduino CLI doesn't strictly require a configuration file to work because the command line interface provides any possible functionality. However, having one can spare you a lot of typing when issuing a command, so let's go ahead and create it with: $ arduino-cli config init Config file written: /home/luca/.arduino15/arduino-cli.yaml If you inspect the contents of arduino-cli.yaml , you'll find the available options with their respective default values. For more information, see the configuration documentation . Create a new sketch \u00b6 To create a new sketch named MyFirstSketch in the current directory, run the following command: $ arduino-cli sketch new MyFirstSketch Sketch created in: /home/luca/MyFirstSketch A sketch is a folder containing assets like source files and libraries; the new command creates for you a .ino file called MyFirstSketch.ino containing Arduino boilerplate code: $ cat $HOME /MyFirstSketch/MyFirstSketch.ino void setup () { } void loop () { } At this point you can use your favourite file editor or IDE to open the file $HOME/MyFirstSketch/MyFirstSketch.ino and change the code like this: void setup () { pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 1000 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 1000 ); } Connect the board to your PC \u00b6 The first thing to do upon a fresh install is to update the local cache of available platforms and libraries by running: $ arduino-cli core update-index Updating index: package_index.json downloaded After connecting the board to your PC by using the USB cable, you should be able to check whether it's been recognized by running: $ arduino-cli board list Port Type Board Name FQBN Core /dev/ttyACM1 Serial Port ( USB ) Arduino/Genuino MKR1000 arduino:samd:mkr1000 arduino:samd In this example, the MKR1000 board was recognized and from the output of the command you see the platform core called arduino:samd is the one that needs to be installed to make it work. If you see an Unknown board listed, uploading should still work as long as you identify the platform core and use the correct FQBN string. When a board is not detected for whatever reason, you can list all the supported boards and their FQBN strings by running the following: $ arduino-cli board listall mkr Board Name FQBN Arduino MKR FOX 1200 arduino:samd:mkrfox1200 Arduino MKR GSM 1400 arduino:samd:mkrgsm1400 Arduino MKR WAN 1300 arduino:samd:mkrwan1300 Arduino MKR WiFi 1010 arduino:samd:mkrwifi1010 Arduino MKRZERO arduino:samd:mkrzero Arduino/Genuino MKR1000 arduino:samd:mkr1000 Install the core for your board \u00b6 To install the arduino:samd platform core, run the following: $ arduino-cli core install arduino:samd Downloading tools... arduino:arm-none-eabi-gcc@4.8.3-2014q1 downloaded arduino:bossac@1.7.0 downloaded arduino:openocd@0.9.0-arduino6-static downloaded arduino:CMSIS@4.5.0 downloaded arduino:CMSIS-Atmel@1.1.0 downloaded arduino:arduinoOTA@1.2.0 downloaded Downloading cores... arduino:samd@1.6.19 downloaded Installing tools... Installing platforms... Results: arduino:samd@1.6.19 - Installed arduino:arm-none-eabi-gcc@4.8.3-2014q1 - Installed arduino:bossac@1.7.0 - Installed arduino:openocd@0.9.0-arduino6-static - Installed arduino:CMSIS@4.5.0 - Installed arduino:CMSIS-Atmel@1.1.0 - Installed arduino:arduinoOTA@1.2.0 - Installed Now verify we have installed the core properly by running: $ arduino-cli core list ID Installed Latest Name arduino:samd 1 .6.19 1 .6.19 Arduino SAMD Boards ( 32 -bits ARM Cortex-M0+ ) Great! Now we are ready to compile and upload the sketch. Adding 3 rd party cores \u00b6 If your board requires 3 rd party core packages to work, you can list the URLs to additional package indexes in the Arduino CLI configuration file. For example, to add the ESP8266 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json From now on, commands supporting custom cores will automatically use the additional URL from the configuration file: $ arduino-cli core update-index Updating index: package_index.json downloaded Updating index: package_esp8266com_index.json downloaded Updating index: package_index.json downloaded $ arduino-cli core search esp8266 ID Version Name esp8266:esp8266 2 .5.2 esp8266 Alternatively, you can pass a link to the additional package index file with the --additional-urls option, that has to be specified every time and for every command that operates on a 3 rd party platform core, for example: $ arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266 Compile and upload the sketch \u00b6 To compile the sketch you run the compile command, passing the proper FQBN string: $ arduino-cli compile --fqbn arduino:samd:mkr1000 MyFirstSketch Sketch uses 9600 bytes ( 3 % ) of program storage space. Maximum is 262144 bytes. To upload the sketch to your board, run the following command, using the serial port your board is connected to: $ arduino-cli upload -p /dev/ttyACM0 --fqbn arduino:samd:mkr1000 MyFirstSketch No new serial port detected. Atmel SMART device 0x10010005 found Device : ATSAMD21G18A Chip ID : 10010005 Version : v2.0 [ Arduino:XYZ ] Dec 20 2016 15 :36:43 Address : 8192 Pages : 3968 Page Size : 64 bytes Total Size : 248KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Arduino : FAST_CHIP_ERASE Arduino : FAST_MULTI_PAGE_WRITE Arduino : CAN_CHECKSUM_MEMORY_BUFFER Erase flash done in 0 .784 seconds Write 9856 bytes to flash ( 154 pages ) [==============================] 100 % ( 154 /154 pages ) done in 0 .069 seconds Verify 9856 bytes of flash with checksum. Verify successful done in 0 .009 seconds CPU reset. Add libraries \u00b6 If you need to add more functionalities to your sketch, chances are some of the libraries available in the Arduino ecosystem already provide what you need. For example, if you need a debouncing strategy to better handle button inputs, you can try searching for the debouncer keyword: $ arduino-cli lib search debouncer Name: \"Debouncer\" Author: hideakitai Maintainer: hideakitai Sentence: Debounce library for Arduino Paragraph: Debounce library for Arduino Website: https://github.com/hideakitai Category: Timing Architecture: * Types: Contributed Versions: [ 0 .1.0 ] Name: \"FTDebouncer\" Author: Ubi de Feo Maintainer: Ubi de Feo, Sebastian Hunkeler Sentence: An efficient, low footprint, fast pin debouncing library for Arduino Paragraph: This pin state supervisor manages debouncing of buttons and handles transitions between LOW and HIGH state, calling a function and notifying your code of which pin has been activated or deactivated. Website: https://github.com/ubidefeo/FTDebouncer Category: Uncategorized Architecture: * Types: Contributed Versions: [ 1 .3.0 ] Name: \"SoftTimer\" Author: Balazs Kelemen <prampec+arduino@gmail.com> Maintainer: Balazs Kelemen <prampec+arduino@gmail.com> Sentence: SoftTimer is a lightweight pseudo multitasking solution for Arduino. Paragraph: SoftTimer enables higher level Arduino programing, yet easy to use, and lightweight. You are often faced with the problem that you need to do multiple tasks at the same time. In SoftTimer, the programmer creates Tasks that runs periodically. This library comes with a collection of handy tools like blinker, pwm, debouncer. Website: https://github.com/prampec/arduino-softtimer Category: Timing Architecture: * Types: Contributed Versions: [ 3 .0.0, 3 .1.0, 3 .1.1, 3 .1.2, 3 .1.3, 3 .1.5, 3 .2.0 ] Our favourite is FTDebouncer , let's install it by running: $ arduino-cli lib install FTDebouncer FTDebouncer depends on FTDebouncer@1.3.0 Downloading FTDebouncer@1.3.0... FTDebouncer@1.3.0 downloaded Installing FTDebouncer@1.3.0... Installed FTDebouncer@1.3.0 Using the daemon mode and the gRPC interface \u00b6 Arduino CLI can be launched as a gRPC server via the daemon command. The client_example folder contains a sample client code that shows how to interact with the gRPC server. Available services and messages are detailed in the gRPC reference pages. To provide observability for the gRPC server activities besides logs, the daemon mode activates and exposes by default a Prometheus endpoint ( http://localhost:9090/metrics ) that can be fetched for telemetry data like: # TYPE daemon_compile counter daemon_compile{buildProperties=\"\",exportFile=\"\",fqbn=\"arduino:samd:mkr1000\",installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",jobs=\"0\",libraries=\"\",preprocess=\"false\",quiet=\"false\",showProperties=\"false\",sketchPath=\"5ff767c6fa5a91230f5cb4e267c889aa61489ab2c4f70f35f921f934c1462cb6\",success=\"true\",verbose=\"true\",vidPid=\"\",warnings=\"\"} 1 1580385724726 # TYPE daemon_board_list counter daemon_board_list{installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",success=\"true\"} 1 1580385724833 The telemetry settings are exposed via the telemetry section in the CLI configuration: telemetry : enabled : true addr : :9090","title":"Getting started"},{"location":"getting-started/#before-you-start","text":"arduino-cli is a container of commands and each command has its own dedicated help text that can be shown with the help command like this: $ arduino-cli help core Arduino Core operations. Usage: arduino-cli core [command] Examples: ./arduino-cli core update-index Available Commands: download Downloads one or more cores and corresponding tool dependencies. install Installs one or more cores and corresponding tool dependencies. list Shows the list of installed platforms. search Search for a core in Boards Manager. uninstall Uninstalls one or more cores and corresponding tool dependencies if no more used. update-index Updates the index of cores. upgrade Upgrades one or all installed platforms to the latest version. Flags: -h, --help help for core Global Flags: --additional-urls strings Additional URLs for Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. -v, --verbose Print the logs on the standard output. Use \"arduino-cli core [command] --help\" for more information about a command.","title":"Before you start"},{"location":"getting-started/#create-a-configuration-file","text":"Arduino CLI doesn't strictly require a configuration file to work because the command line interface provides any possible functionality. However, having one can spare you a lot of typing when issuing a command, so let's go ahead and create it with: $ arduino-cli config init Config file written: /home/luca/.arduino15/arduino-cli.yaml If you inspect the contents of arduino-cli.yaml , you'll find the available options with their respective default values. For more information, see the configuration documentation .","title":"Create a configuration file"},{"location":"getting-started/#create-a-new-sketch","text":"To create a new sketch named MyFirstSketch in the current directory, run the following command: $ arduino-cli sketch new MyFirstSketch Sketch created in: /home/luca/MyFirstSketch A sketch is a folder containing assets like source files and libraries; the new command creates for you a .ino file called MyFirstSketch.ino containing Arduino boilerplate code: $ cat $HOME /MyFirstSketch/MyFirstSketch.ino void setup () { } void loop () { } At this point you can use your favourite file editor or IDE to open the file $HOME/MyFirstSketch/MyFirstSketch.ino and change the code like this: void setup () { pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 1000 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 1000 ); }","title":"Create a new sketch"},{"location":"getting-started/#connect-the-board-to-your-pc","text":"The first thing to do upon a fresh install is to update the local cache of available platforms and libraries by running: $ arduino-cli core update-index Updating index: package_index.json downloaded After connecting the board to your PC by using the USB cable, you should be able to check whether it's been recognized by running: $ arduino-cli board list Port Type Board Name FQBN Core /dev/ttyACM1 Serial Port ( USB ) Arduino/Genuino MKR1000 arduino:samd:mkr1000 arduino:samd In this example, the MKR1000 board was recognized and from the output of the command you see the platform core called arduino:samd is the one that needs to be installed to make it work. If you see an Unknown board listed, uploading should still work as long as you identify the platform core and use the correct FQBN string. When a board is not detected for whatever reason, you can list all the supported boards and their FQBN strings by running the following: $ arduino-cli board listall mkr Board Name FQBN Arduino MKR FOX 1200 arduino:samd:mkrfox1200 Arduino MKR GSM 1400 arduino:samd:mkrgsm1400 Arduino MKR WAN 1300 arduino:samd:mkrwan1300 Arduino MKR WiFi 1010 arduino:samd:mkrwifi1010 Arduino MKRZERO arduino:samd:mkrzero Arduino/Genuino MKR1000 arduino:samd:mkr1000","title":"Connect the board to your PC"},{"location":"getting-started/#install-the-core-for-your-board","text":"To install the arduino:samd platform core, run the following: $ arduino-cli core install arduino:samd Downloading tools... arduino:arm-none-eabi-gcc@4.8.3-2014q1 downloaded arduino:bossac@1.7.0 downloaded arduino:openocd@0.9.0-arduino6-static downloaded arduino:CMSIS@4.5.0 downloaded arduino:CMSIS-Atmel@1.1.0 downloaded arduino:arduinoOTA@1.2.0 downloaded Downloading cores... arduino:samd@1.6.19 downloaded Installing tools... Installing platforms... Results: arduino:samd@1.6.19 - Installed arduino:arm-none-eabi-gcc@4.8.3-2014q1 - Installed arduino:bossac@1.7.0 - Installed arduino:openocd@0.9.0-arduino6-static - Installed arduino:CMSIS@4.5.0 - Installed arduino:CMSIS-Atmel@1.1.0 - Installed arduino:arduinoOTA@1.2.0 - Installed Now verify we have installed the core properly by running: $ arduino-cli core list ID Installed Latest Name arduino:samd 1 .6.19 1 .6.19 Arduino SAMD Boards ( 32 -bits ARM Cortex-M0+ ) Great! Now we are ready to compile and upload the sketch.","title":"Install the core for your board"},{"location":"getting-started/#adding-3rd-party-cores","text":"If your board requires 3 rd party core packages to work, you can list the URLs to additional package indexes in the Arduino CLI configuration file. For example, to add the ESP8266 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json From now on, commands supporting custom cores will automatically use the additional URL from the configuration file: $ arduino-cli core update-index Updating index: package_index.json downloaded Updating index: package_esp8266com_index.json downloaded Updating index: package_index.json downloaded $ arduino-cli core search esp8266 ID Version Name esp8266:esp8266 2 .5.2 esp8266 Alternatively, you can pass a link to the additional package index file with the --additional-urls option, that has to be specified every time and for every command that operates on a 3 rd party platform core, for example: $ arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266","title":"Adding 3rd party cores"},{"location":"getting-started/#compile-and-upload-the-sketch","text":"To compile the sketch you run the compile command, passing the proper FQBN string: $ arduino-cli compile --fqbn arduino:samd:mkr1000 MyFirstSketch Sketch uses 9600 bytes ( 3 % ) of program storage space. Maximum is 262144 bytes. To upload the sketch to your board, run the following command, using the serial port your board is connected to: $ arduino-cli upload -p /dev/ttyACM0 --fqbn arduino:samd:mkr1000 MyFirstSketch No new serial port detected. Atmel SMART device 0x10010005 found Device : ATSAMD21G18A Chip ID : 10010005 Version : v2.0 [ Arduino:XYZ ] Dec 20 2016 15 :36:43 Address : 8192 Pages : 3968 Page Size : 64 bytes Total Size : 248KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Arduino : FAST_CHIP_ERASE Arduino : FAST_MULTI_PAGE_WRITE Arduino : CAN_CHECKSUM_MEMORY_BUFFER Erase flash done in 0 .784 seconds Write 9856 bytes to flash ( 154 pages ) [==============================] 100 % ( 154 /154 pages ) done in 0 .069 seconds Verify 9856 bytes of flash with checksum. Verify successful done in 0 .009 seconds CPU reset.","title":"Compile and upload the sketch"},{"location":"getting-started/#add-libraries","text":"If you need to add more functionalities to your sketch, chances are some of the libraries available in the Arduino ecosystem already provide what you need. For example, if you need a debouncing strategy to better handle button inputs, you can try searching for the debouncer keyword: $ arduino-cli lib search debouncer Name: \"Debouncer\" Author: hideakitai Maintainer: hideakitai Sentence: Debounce library for Arduino Paragraph: Debounce library for Arduino Website: https://github.com/hideakitai Category: Timing Architecture: * Types: Contributed Versions: [ 0 .1.0 ] Name: \"FTDebouncer\" Author: Ubi de Feo Maintainer: Ubi de Feo, Sebastian Hunkeler Sentence: An efficient, low footprint, fast pin debouncing library for Arduino Paragraph: This pin state supervisor manages debouncing of buttons and handles transitions between LOW and HIGH state, calling a function and notifying your code of which pin has been activated or deactivated. Website: https://github.com/ubidefeo/FTDebouncer Category: Uncategorized Architecture: * Types: Contributed Versions: [ 1 .3.0 ] Name: \"SoftTimer\" Author: Balazs Kelemen <prampec+arduino@gmail.com> Maintainer: Balazs Kelemen <prampec+arduino@gmail.com> Sentence: SoftTimer is a lightweight pseudo multitasking solution for Arduino. Paragraph: SoftTimer enables higher level Arduino programing, yet easy to use, and lightweight. You are often faced with the problem that you need to do multiple tasks at the same time. In SoftTimer, the programmer creates Tasks that runs periodically. This library comes with a collection of handy tools like blinker, pwm, debouncer. Website: https://github.com/prampec/arduino-softtimer Category: Timing Architecture: * Types: Contributed Versions: [ 3 .0.0, 3 .1.0, 3 .1.1, 3 .1.2, 3 .1.3, 3 .1.5, 3 .2.0 ] Our favourite is FTDebouncer , let's install it by running: $ arduino-cli lib install FTDebouncer FTDebouncer depends on FTDebouncer@1.3.0 Downloading FTDebouncer@1.3.0... FTDebouncer@1.3.0 downloaded Installing FTDebouncer@1.3.0... Installed FTDebouncer@1.3.0","title":"Add libraries"},{"location":"getting-started/#using-the-daemon-mode-and-the-grpc-interface","text":"Arduino CLI can be launched as a gRPC server via the daemon command. The client_example folder contains a sample client code that shows how to interact with the gRPC server. Available services and messages are detailed in the gRPC reference pages. To provide observability for the gRPC server activities besides logs, the daemon mode activates and exposes by default a Prometheus endpoint ( http://localhost:9090/metrics ) that can be fetched for telemetry data like: # TYPE daemon_compile counter daemon_compile{buildProperties=\"\",exportFile=\"\",fqbn=\"arduino:samd:mkr1000\",installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",jobs=\"0\",libraries=\"\",preprocess=\"false\",quiet=\"false\",showProperties=\"false\",sketchPath=\"5ff767c6fa5a91230f5cb4e267c889aa61489ab2c4f70f35f921f934c1462cb6\",success=\"true\",verbose=\"true\",vidPid=\"\",warnings=\"\"} 1 1580385724726 # TYPE daemon_board_list counter daemon_board_list{installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",success=\"true\"} 1 1580385724833 The telemetry settings are exposed via the telemetry section in the CLI configuration: telemetry : enabled : true addr : :9090","title":"Using the daemon mode and the gRPC interface"},{"location":"installation/","text":"Install via Homebrew (macOS/Linux) \u00b6 The Arduino CLI is available as a Homebrew formula since version 0.5.0 : brew update brew install arduino-cli Command line completion \u00b6 Command line completion files are already bundled in the homebrew installation. Use the install script \u00b6 The script requires sh . This is always available on Linux and macOS. sh is not available by default on Windows. The script may be run on Windows by installing Git for Windows , then running it from Git Bash. This script will install the latest version of Arduino CLI to $PWD/bin : curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh If you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR = ~/local/bin sh If you would like to use the arduino-cli command from any location, install Arduino CLI to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable. If you want to download a specific arduino-cli version, for example 0.9.0 , pass the version number as a parameter like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 0 .9.0 Download \u00b6 Pre-built binaries for all the supported platforms are available for download from the links below. If you would like to use the arduino-cli command from any location, extract the downloaded file to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable. Latest packages \u00b6 Platform Linux Linux 32 bit Linux 64 bit Linux ARM Linux ARM 32 bit Linux ARM 64 bit Windows Windows 32 bit Windows 64 bit Mac OSX Mac OSX Deprecation notice : links in the form http://downloads.arduino.cc/arduino-cli/arduino-cli-latest-<platform>.tar.bz2 won\u2019t be further updated. That URL will provide the version 0.3.7-alpha.preview , regardless of further releases. Previous versions \u00b6 These are available from the releases page Nightly builds \u00b6 These builds are generated every day at 01:00 GMT from the master branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux Nightly Linux 32 bit Nightly Linux 64 bit Linux ARM Nightly Linux ARM 32 bit Nightly Linux ARM 64 bit Windows Nightly Windows 32 bit Nightly Windows 64 bit Mac OSX Nightly Mac OSX These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019/Aug/06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-cli/nightly/nightly-<DATE>-checksums.txt Build from source \u00b6 If you\u2019re familiar with Golang or if you want to contribute to the project, you will probably build the arduino-cli locally with your Go toolchain. Please refer to the CONTRIBUTING document for setup instructions. If you don\u2019t have a working Golang environment or if you want to build arduino-cli targeting different platforms, you can use Docker to get a binary directly from sources. From the project folder run: docker run -v $PWD :/arduino-cli -w /arduino-cli -e PACKAGE_NAME_PREFIX = 'snapshot' arduino/arduino-cli:builder-1 goreleaser --rm-dist --snapshot --skip-publish Once the build is over, you will find a ./dist/ folder containing the packages built out of the current source tree.","title":"Installation"},{"location":"installation/#install-via-homebrew-macoslinux","text":"The Arduino CLI is available as a Homebrew formula since version 0.5.0 : brew update brew install arduino-cli","title":"Install via Homebrew (macOS/Linux)"},{"location":"installation/#command-line-completion","text":"Command line completion files are already bundled in the homebrew installation.","title":"Command line completion"},{"location":"installation/#use-the-install-script","text":"The script requires sh . This is always available on Linux and macOS. sh is not available by default on Windows. The script may be run on Windows by installing Git for Windows , then running it from Git Bash. This script will install the latest version of Arduino CLI to $PWD/bin : curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh If you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR = ~/local/bin sh If you would like to use the arduino-cli command from any location, install Arduino CLI to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable. If you want to download a specific arduino-cli version, for example 0.9.0 , pass the version number as a parameter like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 0 .9.0","title":"Use the install script"},{"location":"installation/#download","text":"Pre-built binaries for all the supported platforms are available for download from the links below. If you would like to use the arduino-cli command from any location, extract the downloaded file to a directory already in your PATH or add the Arduino CLI installation path to your PATH environment variable.","title":"Download"},{"location":"installation/#latest-packages","text":"Platform Linux Linux 32 bit Linux 64 bit Linux ARM Linux ARM 32 bit Linux ARM 64 bit Windows Windows 32 bit Windows 64 bit Mac OSX Mac OSX Deprecation notice : links in the form http://downloads.arduino.cc/arduino-cli/arduino-cli-latest-<platform>.tar.bz2 won\u2019t be further updated. That URL will provide the version 0.3.7-alpha.preview , regardless of further releases.","title":"Latest packages"},{"location":"installation/#previous-versions","text":"These are available from the releases page","title":"Previous versions"},{"location":"installation/#nightly-builds","text":"These builds are generated every day at 01:00 GMT from the master branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux Nightly Linux 32 bit Nightly Linux 64 bit Linux ARM Nightly Linux ARM 32 bit Nightly Linux ARM 64 bit Windows Nightly Windows 32 bit Nightly Windows 64 bit Mac OSX Nightly Mac OSX These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019/Aug/06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-cli/nightly/nightly-<DATE>-checksums.txt","title":"Nightly builds"},{"location":"installation/#build-from-source","text":"If you\u2019re familiar with Golang or if you want to contribute to the project, you will probably build the arduino-cli locally with your Go toolchain. Please refer to the CONTRIBUTING document for setup instructions. If you don\u2019t have a working Golang environment or if you want to build arduino-cli targeting different platforms, you can use Docker to get a binary directly from sources. From the project folder run: docker run -v $PWD :/arduino-cli -w /arduino-cli -e PACKAGE_NAME_PREFIX = 'snapshot' arduino/arduino-cli:builder-1 goreleaser --rm-dist --snapshot --skip-publish Once the build is over, you will find a ./dist/ folder containing the packages built out of the current source tree.","title":"Build from source"},{"location":"integration-options/","text":"The three pillars of the Arduino CLI \u00b6 The Arduino CLI is an open source Command Line Application written in Golang that can be used from a terminal to compile, verify and upload sketches to Arduino boards and that\u2019s capable of managing all the software and tools needed in the process. But don\u2019t get fooled by its name: Arduino CLI can do much more than the average console application, as shown by the Arduino Pro IDE and Arduino Create , which rely on it for similar purposes but each one in a completely different way from the other. In this article we introduce the three pillars of the Arduino CLI, explaining how we designed the software so that it can be effectively leveraged under different scenarios. The first pillar: command line interface \u00b6 Console applications for humans \u00b6 As you might expect, the first way to use the Arduino CLI is from a terminal and by a human, and user experience plays a key role here. The UX is under a continuous improvement process as we want the tool to be powerful without being too complicated. We heavily rely on sub-commands to provide a rich set of different operations logically grouped together, so that users can easily explore the interface while getting very specific contextual help. Console applications for robots \u00b6 Humans are not the only type of customers we want to support and the Arduino CLI was also designed to be used programmatically - think about automation pipelines or a CI / CD system. There are some niceties to observe when you write software that\u2019s supposed to be easy to run when unattended and one in particular is the ability to run without a configuration file. This is possible because every configuration option you find in the arduino-cli.yaml configuration file can be provided either through a command line flag or by setting an environment variable. To give an example, the following commands are all equivalent and will fetch the package index used to work with unstable experimental versions of Arduino's cores: See the configuration documentation for details about Arduino CLI's configuration system. Consistent with the previous paragraph, when it comes to providing output the Arduino CLI aims to be user friendly but also slightly verbose, something that doesn\u2019t play well with robots. This is why we added an option to provide output that\u2019s easy to parse. For example, the following figure shows what getting the software version in JSON format looks like. Even if not related to software design, one last feature that\u2019s worth mentioning is the availability of a one-line installation script that can be used to make the latest version of the Arduino CLI available on most systems with an HTTP client like curl or wget and a shell like bash. For more information on Arduino CLI's command line interface, see the command reference . The second pillar: gRPC interface \u00b6 gRPC is a high performance RPC framework that can efficiently connect client and server applications. The Arduino CLI can act as a gRPC server (we call it daemon mode ), exposing a set of procedures that implement the very same set of features of the command line interface and waiting for clients to connect and use them. To give an idea, the following is some Golang code capable of retrieving the version number of a remote running Arduino CLI server instance: gRPC is language agnostic: even if the example is written in Golang, the programming language used for the client can be Python, JavaScript or any of the many supported ones , leading to a variety of possible scenarios. The new Arduino Pro IDE is a good example of how to leverage the daemon mode of the Arduino CLI with a clean separation of concerns: the Pro IDE knows nothing about how to download a core, compile a sketch or talk to an Arduino board and it demands all these features of an Arduino CLI instance. Conversely, the Arduino CLI doesn\u2019t even know that the client that\u2019s connected is the Pro IDE, and neither does it care. For more information on Arduino CLI's gRPC interface, see the gRPC interface reference . The third pillar: embedding \u00b6 Arduino CLI is written in Golang and the code is organized in a way that makes it easy to use it as a library by including the modules you need in another Golang application at compile time. Both the first and second pillars rely on a common Golang API, a set of functions that abstract all the functionalities offered by the Arduino CLI, so that when we provide a fix or a new feature, they are automatically available to both the command line and gRPC interfaces. The source modules implementing this API can be imported in other Golang programs to embed a full-fledged Arduino CLI. For example, this is how some backend services powering Arduino Create can compile sketches and manage libraries. Just to give you a taste of what it means to embed the Arduino CLI, here is how to search for a core using the API: Embedding the Arduino CLI is limited to Golang applications and requires a deep knowledge of its internals. For the average use case, the gRPC interface might be a better alternative. Nevertheless, this remains a valid option that we use and provide support for. Conclusions \u00b6 You can start playing with the Arduino CLI right away. The code is open source and the repo contains example code showing how to implement a gRPC client . If you\u2019re curious about how we designed the low level API, have a look at the commands package and don\u2019t hesitate to leave feedback on the issue tracker if you\u2019ve got a use case that doesn\u2019t fit one of the three pillars.","title":"Integration options"},{"location":"integration-options/#the-three-pillars-of-the-arduino-cli","text":"The Arduino CLI is an open source Command Line Application written in Golang that can be used from a terminal to compile, verify and upload sketches to Arduino boards and that\u2019s capable of managing all the software and tools needed in the process. But don\u2019t get fooled by its name: Arduino CLI can do much more than the average console application, as shown by the Arduino Pro IDE and Arduino Create , which rely on it for similar purposes but each one in a completely different way from the other. In this article we introduce the three pillars of the Arduino CLI, explaining how we designed the software so that it can be effectively leveraged under different scenarios.","title":"The three pillars of the Arduino CLI"},{"location":"integration-options/#the-first-pillar-command-line-interface","text":"","title":"The first pillar: command line interface"},{"location":"integration-options/#console-applications-for-humans","text":"As you might expect, the first way to use the Arduino CLI is from a terminal and by a human, and user experience plays a key role here. The UX is under a continuous improvement process as we want the tool to be powerful without being too complicated. We heavily rely on sub-commands to provide a rich set of different operations logically grouped together, so that users can easily explore the interface while getting very specific contextual help.","title":"Console applications for humans"},{"location":"integration-options/#console-applications-for-robots","text":"Humans are not the only type of customers we want to support and the Arduino CLI was also designed to be used programmatically - think about automation pipelines or a CI / CD system. There are some niceties to observe when you write software that\u2019s supposed to be easy to run when unattended and one in particular is the ability to run without a configuration file. This is possible because every configuration option you find in the arduino-cli.yaml configuration file can be provided either through a command line flag or by setting an environment variable. To give an example, the following commands are all equivalent and will fetch the package index used to work with unstable experimental versions of Arduino's cores: See the configuration documentation for details about Arduino CLI's configuration system. Consistent with the previous paragraph, when it comes to providing output the Arduino CLI aims to be user friendly but also slightly verbose, something that doesn\u2019t play well with robots. This is why we added an option to provide output that\u2019s easy to parse. For example, the following figure shows what getting the software version in JSON format looks like. Even if not related to software design, one last feature that\u2019s worth mentioning is the availability of a one-line installation script that can be used to make the latest version of the Arduino CLI available on most systems with an HTTP client like curl or wget and a shell like bash. For more information on Arduino CLI's command line interface, see the command reference .","title":"Console applications for robots"},{"location":"integration-options/#the-second-pillar-grpc-interface","text":"gRPC is a high performance RPC framework that can efficiently connect client and server applications. The Arduino CLI can act as a gRPC server (we call it daemon mode ), exposing a set of procedures that implement the very same set of features of the command line interface and waiting for clients to connect and use them. To give an idea, the following is some Golang code capable of retrieving the version number of a remote running Arduino CLI server instance: gRPC is language agnostic: even if the example is written in Golang, the programming language used for the client can be Python, JavaScript or any of the many supported ones , leading to a variety of possible scenarios. The new Arduino Pro IDE is a good example of how to leverage the daemon mode of the Arduino CLI with a clean separation of concerns: the Pro IDE knows nothing about how to download a core, compile a sketch or talk to an Arduino board and it demands all these features of an Arduino CLI instance. Conversely, the Arduino CLI doesn\u2019t even know that the client that\u2019s connected is the Pro IDE, and neither does it care. For more information on Arduino CLI's gRPC interface, see the gRPC interface reference .","title":"The second pillar: gRPC interface"},{"location":"integration-options/#the-third-pillar-embedding","text":"Arduino CLI is written in Golang and the code is organized in a way that makes it easy to use it as a library by including the modules you need in another Golang application at compile time. Both the first and second pillars rely on a common Golang API, a set of functions that abstract all the functionalities offered by the Arduino CLI, so that when we provide a fix or a new feature, they are automatically available to both the command line and gRPC interfaces. The source modules implementing this API can be imported in other Golang programs to embed a full-fledged Arduino CLI. For example, this is how some backend services powering Arduino Create can compile sketches and manage libraries. Just to give you a taste of what it means to embed the Arduino CLI, here is how to search for a core using the API: Embedding the Arduino CLI is limited to Golang applications and requires a deep knowledge of its internals. For the average use case, the gRPC interface might be a better alternative. Nevertheless, this remains a valid option that we use and provide support for.","title":"The third pillar: embedding"},{"location":"integration-options/#conclusions","text":"You can start playing with the Arduino CLI right away. The code is open source and the repo contains example code showing how to implement a gRPC client . If you\u2019re curious about how we designed the low level API, have a look at the commands package and don\u2019t hesitate to leave feedback on the issue tracker if you\u2019ve got a use case that doesn\u2019t fit one of the three pillars.","title":"Conclusions"},{"location":"library-specification/","text":"This is the specification for the Arduino library format, to be used with Arduino IDE 1.5.x onwards. rev.1 has been implemented starting with Arduino IDE version 1.5.3 (now superseded by rev.2) rev.2 will be implemented starting from Arduino IDE version 1.5.6 rev.2.1 will be implemented starting from Arduino IDE version 1.6.10 rev.2.2 will be implemented starting from Arduino IDE version 1.8.10 This new library format is intended to be used in tandem with Library Manager , available since Arduino IDE 1.6.2. The Library Manager allows users to automatically download and install libraries needed in their projects, with an easy to use graphical interface in the Arduino IDE /Pro IDE and Arduino Web Editor as well as arduino-cli lib . More information about how Library Manager works is available here . Arduino development software supports multiple microcontroller architectures (e.g. AVR, SAM, etc), meaning that libraries may need to work on multiple architectures. The new 1.5 library format doesn\u2019t contain special support for cross-architecture libraries, but it does provide a preprocessor based mechanism for libraries to target sections of code to specific architectures. See also \u00b6 Arduino library style guide Library dependency resolution process documentation 1.5 library format (rev. 2.2) \u00b6 Library metadata \u00b6 The most significant addition to the format is the ability to add information about the library itself through a properties file called library.properties . This file allows the Library Manager to search and install a library and its dependencies in an easy and automated way. It must be located in the root of the library folder. library.properties file format \u00b6 The library.properties file is a key=value properties list. Every field in this file is UTF-8 encoded. Unless noted otherwise below, all fields are required . The available fields are: name - the name of the library. Library names must contain only basic letters (A-Z or a-z) and numbers (0-9), spaces ( ), underscores (_), dots (.) and dashes (-). They cannot start with a number. Note that libraries with a name value starting with Arduino will no longer be allowed addition to the Library Manager index as these names are now reserved for official Arduino libraries. version - version of the library. Version should be semver compliant. 1.2.0 is correct; 1.2 is accepted; r5, 003, 1.1c are invalid author - name/nickname of the authors and their email addresses (not mandatory) separated by comma (,) maintainer - name and email of the maintainer sentence - a sentence explaining the purpose of the library paragraph - a longer description of the library. The value of sentence will be prepended to this, so you should start by writing the second sentence here category - (defaults to Uncategorized ) allowed values: Display Communication Signal Input/Output Sensors Device Control Timing Data Storage Data Processing Other url - the URL of the library project, for a person to visit. For example, the library's GitHub page. This is used for the \"More info\" links in Library Manager architectures - (defaults to * ) a comma separated list of architectures supported by the library. If the library doesn\u2019t contain architecture specific code use * to match all architectures. This field is used as one factor in determining priority when multiple libraries match an #include directive and to provide a warning message when the library is compiled for a board of an architecture that doesn't match any on the list. depends - (available from Arduino IDE 1.8.10/Arduino CLI 0.7.0) (optional) a comma-separated list of dependencies (libraries that are needed to build the current library). The Arduino IDE's Library Manager will offer to install the dependencies during installation of the library. arduino-cli lib install will automatically install the dependencies. Since spaces are allowed in the name of a library, but not commas, you can refer to libraries containing spaces in the name without ambiguity for example: depends=Very long library name, Another library with long-name dot_a_linkage - (available from Arduino IDE 1.6.0 / arduino-builder 1.0.0-beta13) (optional) when set to true , the library will be compiled using a .a (archive) file. First, all source files are compiled into .o files as normal. Then instead of including all .o files in the linker command directly, all .o files are saved into a .a file, which is then included in the linker command. 1.5 format library folder structure is required. includes - (available from Arduino IDE 1.6.10) (optional) a comma separated list of files to be added to the sketch as #include <...> lines. This property is used with the \"Include library\" command in the Arduino IDE. If the includes property is missing, all the header files (.h) on the root source folder are included. precompiled - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) enables support for .a (archive) and .so (shared object) files. See the \"Precompiled binaries\" section for documentation of the required location in the library for these files. The static library should be linked as an ldflag. The precompiled field has two supported values, which control how any source files in the library are handled: true - Source files are always compiled. This is useful for \"mixed\" libraries, such as those that contain both open source code and the precompiled binary of a closed source component. Support for \"mixed\" libraries was inadvertently lost in Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0, and returned in Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0. full - (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If the library provides a precompiled library for the board being compiled for, the source files will not be compiled. If no precompiled library was provided for the selected board, source files are compiled as a fallback. This is useful for precompiling the library to reduce compilation time for specific target hardware, but also providing support for arbitrary boards by compiling the library on demand. ldflags - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) the linker flags to be added. Ex: ldflags=-lm Example: name=WebServer version=1.0.0 author=Cristian Maglie <c.maglie@example.com>, Pippo Pluto <pippo@example.com> maintainer=Cristian Maglie <c.maglie@example.com> sentence=A library that makes coding a Webserver a breeze. paragraph=Supports HTTP1.1 and you can do GET and POST. category=Communication url=http://example.com/ architectures=avr includes=WebServer.h depends=ArduinoHttpClient Layout of folders and files \u00b6 Each folder has a specific purpose (sources, examples, documentation, etc). Folders not covered in this specification may be added as needed to future revisions. Library Root folder \u00b6 The library root folder name must start with a basic letter (A-Z or a-z) or number (0-9), followed by basic letters, numbers, spaces ( ), underscores (_), dots (.) and dashes (-). The maximum length is 63 characters. Source code \u00b6 For libraries intended to be used with Arduino IDE 1.5.x+ only, the source code resides in the src folder. For example: Servo/src/Servo.h Servo/src/Servo.cpp The source code found in src folder and all its subfolders is compiled and linked in the user\u2019s sketch. Only the src folder is added to the include search path (both when compiling the sketch and the library). When the user imports a library into their sketch (from the Arduino IDE's \"Sketch > Include Library\" menu or the Arduino Web Editor's \"Include\" button), the default behavior (configurable via the library.properties includes field ) is for an #include statement to be added for all header (.h) files in the src/ directory (but not its subfolders). As a result, these header files form something of a de facto interface to your library; in general, the only header files in the root src/ folder should be those that you want to expose to the user's sketch and plan to maintain compatibility with in future versions of the library. Place internal header files in a subfolder of the src/ folder. For backward compatibility with Arduino IDE 1.0.x, the library author may opt to place source code into the root folder, instead of the folder called src . In this case the 1.0 library format is applied and the source code is searched from the library root folder and the utility folder, for example: Servo/Servo.h Servo/Servo.cpp Servo/utility/ServoTimers.h Servo/utility/ServoTimers.cpp This will allow existing 1.0 format libraries to compile under Arduino IDE 1.5.x+ as well, and vice-versa. If a library only needs to run on Arduino IDE 1.5.x+, we recommend placing all source code in the src/ folder. If a library requires recursive compilation of nested source folders, its code must be in the src/ folder (since Arduino IDE 1.0.x doesn\u2019t support recursive compilation, backwards compatibility wouldn\u2019t be possible anyway). Precompiled binaries \u00b6 The precompiled field of library.properties enables support for the use of precompiled libraries. This requires providing .a (archive) or .so (shared object) files which are compiled for a particular processor architecture. The target architecture of the files is indicated by folder names. The binaries must be located at src/{build.mcu} , where {build.mcu} is the architecture name of the target the file was compiled for. Ex: cortex-m3 for the Arduino Due. The filenames of the compiled binaries should start with lib (e.g., libFoo.a ). (available from Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0) The floating point ABI configuration of ARM core microcontrollers may be adjusted via compiler flags. An extra subfolder level can be used to provide files compiled for a specific floating point configuration: src/{build.mcu}/{build.fpu}-{build.float-abi} , where {build.fpu} is the value of the -mfpu compiler flag and {build.float-abi} is the value of the -mfloat-abi compiler flag. (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If floating point configuration flags are used but no folder matching that configuration is found, src/{build.mcu} is used as a fallback. Below is an example library src folder structure that provides: Header file containing the declarations for the library API. Source file to use as a fallback for other architectures ( precompiled=full mode). Archive file for the ARM Cortex M0+ architecture of the Arduino SAMD boards. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, as a fallback for backwards compatibility with Arduino development software before the floating point configuration support was added. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, compiled for the -mfloat-abi=softfp -mfpu=fpv4-sp-d16 floating point ABI configuration. Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/cortex-m0plus/libServo.a Servo/src/cortex-m4/libServo.a Servo/src/cortex-m4/fpv4-sp-d16-softfp/libServo.a Library Examples \u00b6 Library examples must be placed in the examples folder. Note that the examples folder name must be written exactly like that (with lower case letters). Servo/examples/... Sketches contained inside the examples folder will be shown in the Examples menu of the Arduino IDE and Arduino Web Editor. More information: Arduino sketch specification Style guide for Arduino examples Extra documentation \u00b6 An extras folder can be used by the developer to put documentation or other items to be bundled with the library. Remember that files placed inside this folder will increase the size of the library, so putting a 20MB PDF in a library that weights a few kilobytes may not be such a good idea. The content of the extras folder is totally ignored by the Arduino development software; you are free to put anything inside. Keywords \u00b6 A list of keywords for the library may be specified in a file named keywords.txt located in the root of the library folder. When a keyword of any installed library is used in a sketch the Arduino IDE colors it. Servo/keywords.txt An example keywords.txt file: # Syntax Coloring Map For ExampleLibrary # Datatypes (KEYWORD1) Test KEYWORD1 # Methods and Functions (KEYWORD2) doSomething KEYWORD2 # Instances (KEYWORD2) # Constants (LITERAL1) This file would cause the Arduino IDE to highlight Test as a data type, and doSomething as a method / function. keywords.txt format \u00b6 keywords.txt is formatted in four fields which are separated by a single true tab (not spaces): KEYWORD KEYWORD_TOKENTYPE REFERENCE_LINK RSYNTAXTEXTAREA_TOKENTYPE It is permitted to leave a field empty. KEYWORD_TOKENTYPE \u00b6 KEYWORD_TOKENTYPE Use for Theme property KEYWORD1 datatypes editor.data_type.style KEYWORD2 functions editor.function.style KEYWORD3 structures editor.function.style LITERAL1 constants editor.reserved_word_2.style LITERAL2 ? editor.function.style REFERENCE_LINK \u00b6 This field specifies the Arduino Language Reference page to open via the Arduino IDE's Right Click > Find in Reference or Help > Find in Reference when the cursor is on that keyword. Generally it does not make sense to define the REFERENCE_LINK field for 3 rd party library keywords since they are not likely to be in the Arduino Language Reference. RSYNTAXTEXTAREA_TOKENTYPE \u00b6 In Arduino IDE 1.6.5 and newer this field overrides KEYWORD_TOKENTYPE . In previous IDE versions the RSYNTAXTEXTAREA_TOKENTYPE field is ignored and KEYWORD_TOKENTYPE is used instead. RSYNTAXTEXTAREA_TOKENTYPE Theme property KEYWORD_TOKENTYPE equivalent RESERVED_WORD editor.reserved_word.style KEYWORD3 RESERVED_WORD_2 editor.reserved_word_2.style LITERAL1 DATA_TYPE editor.data_type.style KEYWORD1 PREPROCESSOR editor.preprocessor.style KEYWORD3 LITERAL_BOOLEAN editor.literal_boolean.style LITERAL1 Development flag file \u00b6 Normally the Arduino IDE treats the contents of the library folder as read-only. This is to prevent users from accidentally modifying example sketches. During the library development process you may want to edit example sketches in place using the Arduino IDE. With Arduino IDE 1.6.6 and newer, the read-only behavior can be disabled by adding a file named .development to the root of the library folder. A library.properties file must also be present. The Library Manager indexer will not pick up releases that contain a .development file so be sure not to push this file to your remote repository. A complete example \u00b6 A hypothetical library named \"Servo\" that adheres to the specification follows: Servo/ Servo/library.properties Servo/keywords.txt Servo/src/ Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/ServoTimers.h Servo/examples/ Servo/examples/Sweep/Sweep.ino Servo/examples/Pot/Pot.ino Servo/extras/ Servo/extras/Servo_Connectors.pdf Working with multiple architectures \u00b6 Libraries placed in the libraries subfolder of the sketchbook folder (AKA \"user directory\") will be made available for all boards, which may include multiple different processor architectures. To provide architecture-specific code or optimizations, library authors can use the ARDUINO_ARCH_XXX preprocessor macro ( #define ), where XXX is the name of the architecture (as determined by the name of the architecture folder of the board's platform). For example, ARDUINO_ARCH_AVR will be defined when compiling for AVR-based boards. An example: #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else // generic, non-platform specific code #endif Alternatively, if a library only works on certain architectures, you can provide an explicit error message (instead of allowing the compilation to fail in a difficult to understand way): #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else #error \u201cThis library only supports boards with an AVR or SAM processor.\u201d #endif Old library format (pre-1.5) \u00b6 In order to support old libraries (from Arduino IDE 1.0.x), the Arduino IDE/Pro IDE and Arduino CLI will also compile libraries missing a library.properties metadata file. As a result, these libraries should behave as they did in Arduino IDE 1.0.x, although they will be available for all boards, including non-AVR ones (which wouldn\u2019t have been present in Arduino IDE 1.0.x).","title":"Library specification"},{"location":"library-specification/#see-also","text":"Arduino library style guide Library dependency resolution process documentation","title":"See also"},{"location":"library-specification/#15-library-format-rev-22","text":"","title":"1.5 library format (rev. 2.2)"},{"location":"library-specification/#library-metadata","text":"The most significant addition to the format is the ability to add information about the library itself through a properties file called library.properties . This file allows the Library Manager to search and install a library and its dependencies in an easy and automated way. It must be located in the root of the library folder.","title":"Library metadata"},{"location":"library-specification/#libraryproperties-file-format","text":"The library.properties file is a key=value properties list. Every field in this file is UTF-8 encoded. Unless noted otherwise below, all fields are required . The available fields are: name - the name of the library. Library names must contain only basic letters (A-Z or a-z) and numbers (0-9), spaces ( ), underscores (_), dots (.) and dashes (-). They cannot start with a number. Note that libraries with a name value starting with Arduino will no longer be allowed addition to the Library Manager index as these names are now reserved for official Arduino libraries. version - version of the library. Version should be semver compliant. 1.2.0 is correct; 1.2 is accepted; r5, 003, 1.1c are invalid author - name/nickname of the authors and their email addresses (not mandatory) separated by comma (,) maintainer - name and email of the maintainer sentence - a sentence explaining the purpose of the library paragraph - a longer description of the library. The value of sentence will be prepended to this, so you should start by writing the second sentence here category - (defaults to Uncategorized ) allowed values: Display Communication Signal Input/Output Sensors Device Control Timing Data Storage Data Processing Other url - the URL of the library project, for a person to visit. For example, the library's GitHub page. This is used for the \"More info\" links in Library Manager architectures - (defaults to * ) a comma separated list of architectures supported by the library. If the library doesn\u2019t contain architecture specific code use * to match all architectures. This field is used as one factor in determining priority when multiple libraries match an #include directive and to provide a warning message when the library is compiled for a board of an architecture that doesn't match any on the list. depends - (available from Arduino IDE 1.8.10/Arduino CLI 0.7.0) (optional) a comma-separated list of dependencies (libraries that are needed to build the current library). The Arduino IDE's Library Manager will offer to install the dependencies during installation of the library. arduino-cli lib install will automatically install the dependencies. Since spaces are allowed in the name of a library, but not commas, you can refer to libraries containing spaces in the name without ambiguity for example: depends=Very long library name, Another library with long-name dot_a_linkage - (available from Arduino IDE 1.6.0 / arduino-builder 1.0.0-beta13) (optional) when set to true , the library will be compiled using a .a (archive) file. First, all source files are compiled into .o files as normal. Then instead of including all .o files in the linker command directly, all .o files are saved into a .a file, which is then included in the linker command. 1.5 format library folder structure is required. includes - (available from Arduino IDE 1.6.10) (optional) a comma separated list of files to be added to the sketch as #include <...> lines. This property is used with the \"Include library\" command in the Arduino IDE. If the includes property is missing, all the header files (.h) on the root source folder are included. precompiled - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) enables support for .a (archive) and .so (shared object) files. See the \"Precompiled binaries\" section for documentation of the required location in the library for these files. The static library should be linked as an ldflag. The precompiled field has two supported values, which control how any source files in the library are handled: true - Source files are always compiled. This is useful for \"mixed\" libraries, such as those that contain both open source code and the precompiled binary of a closed source component. Support for \"mixed\" libraries was inadvertently lost in Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0, and returned in Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0. full - (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If the library provides a precompiled library for the board being compiled for, the source files will not be compiled. If no precompiled library was provided for the selected board, source files are compiled as a fallback. This is useful for precompiling the library to reduce compilation time for specific target hardware, but also providing support for arbitrary boards by compiling the library on demand. ldflags - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) the linker flags to be added. Ex: ldflags=-lm Example: name=WebServer version=1.0.0 author=Cristian Maglie <c.maglie@example.com>, Pippo Pluto <pippo@example.com> maintainer=Cristian Maglie <c.maglie@example.com> sentence=A library that makes coding a Webserver a breeze. paragraph=Supports HTTP1.1 and you can do GET and POST. category=Communication url=http://example.com/ architectures=avr includes=WebServer.h depends=ArduinoHttpClient","title":"library.properties file format"},{"location":"library-specification/#layout-of-folders-and-files","text":"Each folder has a specific purpose (sources, examples, documentation, etc). Folders not covered in this specification may be added as needed to future revisions.","title":"Layout of folders and files"},{"location":"library-specification/#library-root-folder","text":"The library root folder name must start with a basic letter (A-Z or a-z) or number (0-9), followed by basic letters, numbers, spaces ( ), underscores (_), dots (.) and dashes (-). The maximum length is 63 characters.","title":"Library Root folder"},{"location":"library-specification/#source-code","text":"For libraries intended to be used with Arduino IDE 1.5.x+ only, the source code resides in the src folder. For example: Servo/src/Servo.h Servo/src/Servo.cpp The source code found in src folder and all its subfolders is compiled and linked in the user\u2019s sketch. Only the src folder is added to the include search path (both when compiling the sketch and the library). When the user imports a library into their sketch (from the Arduino IDE's \"Sketch > Include Library\" menu or the Arduino Web Editor's \"Include\" button), the default behavior (configurable via the library.properties includes field ) is for an #include statement to be added for all header (.h) files in the src/ directory (but not its subfolders). As a result, these header files form something of a de facto interface to your library; in general, the only header files in the root src/ folder should be those that you want to expose to the user's sketch and plan to maintain compatibility with in future versions of the library. Place internal header files in a subfolder of the src/ folder. For backward compatibility with Arduino IDE 1.0.x, the library author may opt to place source code into the root folder, instead of the folder called src . In this case the 1.0 library format is applied and the source code is searched from the library root folder and the utility folder, for example: Servo/Servo.h Servo/Servo.cpp Servo/utility/ServoTimers.h Servo/utility/ServoTimers.cpp This will allow existing 1.0 format libraries to compile under Arduino IDE 1.5.x+ as well, and vice-versa. If a library only needs to run on Arduino IDE 1.5.x+, we recommend placing all source code in the src/ folder. If a library requires recursive compilation of nested source folders, its code must be in the src/ folder (since Arduino IDE 1.0.x doesn\u2019t support recursive compilation, backwards compatibility wouldn\u2019t be possible anyway).","title":"Source code"},{"location":"library-specification/#precompiled-binaries","text":"The precompiled field of library.properties enables support for the use of precompiled libraries. This requires providing .a (archive) or .so (shared object) files which are compiled for a particular processor architecture. The target architecture of the files is indicated by folder names. The binaries must be located at src/{build.mcu} , where {build.mcu} is the architecture name of the target the file was compiled for. Ex: cortex-m3 for the Arduino Due. The filenames of the compiled binaries should start with lib (e.g., libFoo.a ). (available from Arduino IDE 1.8.12/arduino-builder 1.5.2/Arduino CLI 0.8.0) The floating point ABI configuration of ARM core microcontrollers may be adjusted via compiler flags. An extra subfolder level can be used to provide files compiled for a specific floating point configuration: src/{build.mcu}/{build.fpu}-{build.float-abi} , where {build.fpu} is the value of the -mfpu compiler flag and {build.float-abi} is the value of the -mfloat-abi compiler flag. (available from Arduino IDE 1.8.13/arduino-builder 1.5.3/Arduino CLI 0.11.0) If floating point configuration flags are used but no folder matching that configuration is found, src/{build.mcu} is used as a fallback. Below is an example library src folder structure that provides: Header file containing the declarations for the library API. Source file to use as a fallback for other architectures ( precompiled=full mode). Archive file for the ARM Cortex M0+ architecture of the Arduino SAMD boards. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, as a fallback for backwards compatibility with Arduino development software before the floating point configuration support was added. Archive file for the ARM Cortex M4 architecture of the Arduino Nano 33 BLE, compiled for the -mfloat-abi=softfp -mfpu=fpv4-sp-d16 floating point ABI configuration. Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/cortex-m0plus/libServo.a Servo/src/cortex-m4/libServo.a Servo/src/cortex-m4/fpv4-sp-d16-softfp/libServo.a","title":"Precompiled binaries"},{"location":"library-specification/#library-examples","text":"Library examples must be placed in the examples folder. Note that the examples folder name must be written exactly like that (with lower case letters). Servo/examples/... Sketches contained inside the examples folder will be shown in the Examples menu of the Arduino IDE and Arduino Web Editor. More information: Arduino sketch specification Style guide for Arduino examples","title":"Library Examples"},{"location":"library-specification/#extra-documentation","text":"An extras folder can be used by the developer to put documentation or other items to be bundled with the library. Remember that files placed inside this folder will increase the size of the library, so putting a 20MB PDF in a library that weights a few kilobytes may not be such a good idea. The content of the extras folder is totally ignored by the Arduino development software; you are free to put anything inside.","title":"Extra documentation"},{"location":"library-specification/#keywords","text":"A list of keywords for the library may be specified in a file named keywords.txt located in the root of the library folder. When a keyword of any installed library is used in a sketch the Arduino IDE colors it. Servo/keywords.txt An example keywords.txt file: # Syntax Coloring Map For ExampleLibrary # Datatypes (KEYWORD1) Test KEYWORD1 # Methods and Functions (KEYWORD2) doSomething KEYWORD2 # Instances (KEYWORD2) # Constants (LITERAL1) This file would cause the Arduino IDE to highlight Test as a data type, and doSomething as a method / function.","title":"Keywords"},{"location":"library-specification/#keywordstxt-format","text":"keywords.txt is formatted in four fields which are separated by a single true tab (not spaces): KEYWORD KEYWORD_TOKENTYPE REFERENCE_LINK RSYNTAXTEXTAREA_TOKENTYPE It is permitted to leave a field empty.","title":"keywords.txt format"},{"location":"library-specification/#keyword_tokentype","text":"KEYWORD_TOKENTYPE Use for Theme property KEYWORD1 datatypes editor.data_type.style KEYWORD2 functions editor.function.style KEYWORD3 structures editor.function.style LITERAL1 constants editor.reserved_word_2.style LITERAL2 ? editor.function.style","title":"KEYWORD_TOKENTYPE"},{"location":"library-specification/#reference_link","text":"This field specifies the Arduino Language Reference page to open via the Arduino IDE's Right Click > Find in Reference or Help > Find in Reference when the cursor is on that keyword. Generally it does not make sense to define the REFERENCE_LINK field for 3 rd party library keywords since they are not likely to be in the Arduino Language Reference.","title":"REFERENCE_LINK"},{"location":"library-specification/#rsyntaxtextarea_tokentype","text":"In Arduino IDE 1.6.5 and newer this field overrides KEYWORD_TOKENTYPE . In previous IDE versions the RSYNTAXTEXTAREA_TOKENTYPE field is ignored and KEYWORD_TOKENTYPE is used instead. RSYNTAXTEXTAREA_TOKENTYPE Theme property KEYWORD_TOKENTYPE equivalent RESERVED_WORD editor.reserved_word.style KEYWORD3 RESERVED_WORD_2 editor.reserved_word_2.style LITERAL1 DATA_TYPE editor.data_type.style KEYWORD1 PREPROCESSOR editor.preprocessor.style KEYWORD3 LITERAL_BOOLEAN editor.literal_boolean.style LITERAL1","title":"RSYNTAXTEXTAREA_TOKENTYPE"},{"location":"library-specification/#development-flag-file","text":"Normally the Arduino IDE treats the contents of the library folder as read-only. This is to prevent users from accidentally modifying example sketches. During the library development process you may want to edit example sketches in place using the Arduino IDE. With Arduino IDE 1.6.6 and newer, the read-only behavior can be disabled by adding a file named .development to the root of the library folder. A library.properties file must also be present. The Library Manager indexer will not pick up releases that contain a .development file so be sure not to push this file to your remote repository.","title":"Development flag file"},{"location":"library-specification/#a-complete-example","text":"A hypothetical library named \"Servo\" that adheres to the specification follows: Servo/ Servo/library.properties Servo/keywords.txt Servo/src/ Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/ServoTimers.h Servo/examples/ Servo/examples/Sweep/Sweep.ino Servo/examples/Pot/Pot.ino Servo/extras/ Servo/extras/Servo_Connectors.pdf","title":"A complete example"},{"location":"library-specification/#working-with-multiple-architectures","text":"Libraries placed in the libraries subfolder of the sketchbook folder (AKA \"user directory\") will be made available for all boards, which may include multiple different processor architectures. To provide architecture-specific code or optimizations, library authors can use the ARDUINO_ARCH_XXX preprocessor macro ( #define ), where XXX is the name of the architecture (as determined by the name of the architecture folder of the board's platform). For example, ARDUINO_ARCH_AVR will be defined when compiling for AVR-based boards. An example: #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else // generic, non-platform specific code #endif Alternatively, if a library only works on certain architectures, you can provide an explicit error message (instead of allowing the compilation to fail in a difficult to understand way): #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else #error \u201cThis library only supports boards with an AVR or SAM processor.\u201d #endif","title":"Working with multiple architectures"},{"location":"library-specification/#old-library-format-pre-15","text":"In order to support old libraries (from Arduino IDE 1.0.x), the Arduino IDE/Pro IDE and Arduino CLI will also compile libraries missing a library.properties metadata file. As a result, these libraries should behave as they did in Arduino IDE 1.0.x, although they will be available for all boards, including non-AVR ones (which wouldn\u2019t have been present in Arduino IDE 1.0.x).","title":"Old library format (pre-1.5)"},{"location":"package_index_json-specification/","text":"Introduced in Arduino IDE 1.6.4, Boards Manager makes it easy to install and update Arduino platforms. In order to provide Boards Manager installation support for a platform, a JSON formatted index file must be published. This is the specification for that file. Boards Manager functionality is provided by Arduino CLI , Arduino IDE , and Arduino Pro IDE. Naming of the JSON index file \u00b6 Many different index files coming from different vendors may be in use, so each vendor should name their own index file in a way that won't conflict with others. The file must be named as follows: package_YOURNAME_PACKAGENAME_index.json The prefix package_ and the postfix _index.json are mandatory (otherwise the index file is not recognised by the Arduino development software) while the choice of YOURNAME_PACKAGENAME is left to the packager. We suggest using a domain name owned by the packager. For example: package_arduino.cc_index.json or package_example.com_avr_boards_index.json The index URL is periodically checked for updates, so expect a constant flow of downloads (proportional to the number of active users). JSON Index file contents \u00b6 The root of the JSON index is an array of packages : { \"packages\" : [ PACKAGE_XXXX ] } 3 rd party vendors should use a single PACKAGE_XXXX that is a dictionary map with the vendor's metadata, a list of PLATFORMS and a list of TOOLS . For example: { \"name\" : \"arduino\" , \"maintainer\" : \"Arduino LLC\" , \"websiteURL\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"platforms\" : [ PLATFORM_AVR , PLATFORM_ARM , PLATFORM_XXXXX , PLATFORM_YYYYY ], \"tools\" : [ TOOLS_COMPILER_AVR , TOOLS_UPLOADER_AVR , TOOLS_COMPILER_ARM , TOOLS_XXXXXXX , TOOLS_YYYYYYY ] } The metadata fields are: name : the folder used for the installed cores. The vendor folder name of the installed package is determined by this field maintainer : the extended name of the vendor that is displayed on the Arduino IDE/Pro IDE's Boards Manager GUI websiteURL : the URL to the vendor's website, appears on the Arduino IDE/Pro IDE's Boards Manager as a \"More info\" link email : the email of the vendor/maintainer Now, before looking at PLATFORMS , let's explore first how TOOLS are made. Tools definitions \u00b6 Each tool describes a binary distribution of a command line tool. A tool can be: a compiler toolchain an uploader a file preprocessor a debugger a program that performs a firmware upgrade basically anything that can run on the user's host PC and do something useful. For example, Arduino uses two command line tools for the AVR boards: avr-gcc (the compiler) and avrdude (the uploader). Tools are mapped as JSON in this way: { \"name\" : \"avr-gcc\" , \"version\" : \"7.3.0-atmel3.6.1-arduino7\" , \"systems\" : [ { \"size\" : \"34683056\" , \"checksum\" : \"SHA-256:3903553d035da59e33cff9941b857c3cb379cb0638105dfdf69c97f0acc8e7b5\" , \"host\" : \"arm-linux-gnueabihf\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" }, { \"size\" : \"38045723\" , \"checksum\" : \"SHA-256:03d322b9df6da17289e9e7c6233c34a8535d9c645c19efc772ba19e56914f339\" , \"host\" : \"aarch64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"36684546\" , \"checksum\" : \"SHA-256:f6ed2346953fcf88df223469088633eb86de997fa27ece117fd1ef170d69c1f8\" , \"host\" : \"x86_64-apple-darwin14\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" }, { \"size\" : \"52519412\" , \"checksum\" : \"SHA-256:a54f64755fff4cb792a1495e5defdd789902a2a3503982e81b898299cf39800e\" , \"host\" : \"i686-mingw32\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" }, { \"size\" : \"37176991\" , \"checksum\" : \"SHA-256:954bbffb33545bcdcd473af993da2980bf32e8461ff55a18e0eebc7b2ef69a4c\" , \"host\" : \"i686-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"37630618\" , \"checksum\" : \"SHA-256:bd8c37f6952a2130ac9ee32c53f6a660feb79bee8353c8e289eb60fdcefed91e\" , \"host\" : \"x86_64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" } ] } , The field name and version are respectively the name and version of the tool. Each tool is uniquely identified by the triple ( packager , name , version ). packager (AKA \"vendor\") is defined by the name value of the tool's package. There can be many different versions of the same tool available at the same time, for example: ( arduino , avr-gcc , 5.4.0-atmel3.6.1-arduino2 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino5 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino7 ) ( arduino , avrdude , 5.11 ) ( arduino , avrdude , 6.0 ) ( arduino , avrdude , 6.1 ) ..... Each tool version may come in different build flavours for different OS. Each flavour is listed under the systems array. In the example above avr-gcc comes with builds for: ARM Linux 32-bit ( arm-linux-gnueabihf ), ARM Linux 64-bit ( aarch64-linux-gnu ), macOS 64-bit ( x86_64-apple-darwin14 ), Windows ( i686-mingw32 ), Linux 32-bit ( i686-linux-gnu ), Linux 64-bit ( x86_64-linux-gnu ) The IDE will take care to install the right flavour based on the host value, or fail if a needed flavour is missing. Note that this information is not used to select the toolchain during compilation. If you want this specific version to be used, you should use the notation {runtime.tools.TOOLNAME-VERSION.path} in the platform.txt. The other fields are: url : the download URL of the tool's archive archiveFileName : the name of the file saved to disk after the download (some web servers don't provide the filename through the HTTP request) size : the size of the archive in bytes checksum : the checksum of the archive, used to check if the file has been corrupted. The format is ALGORITHM:CHECKSUM , currently MD5 , SHA-1 , SHA-256 algorithm are supported, we recommend SHA-256 . On *nix or macOS you can use the command shasum -a 256 filename to generate SHA-256 checksums. There are free options for Windows, including md5deep. There are also online utilities for generating checksums. How a tool's path is determined in platform.txt \u00b6 When the IDE needs a tool, it downloads the corresponding archive file and unpacks the content into a private folder that can be referenced from platform.txt using one of the following properties: {runtime.tools.TOOLNAME-VERSION.path} {runtime.tools.TOOLNAME.path} For example, to obtain the avr-gcc 4.8.1 folder we can use {runtime.tools.avr-gcc-4.8.1-arduino5.path} or {runtime.tools.avr-gcc.path} . Platforms definitions \u00b6 Finally, let's see how PLATFORMS are made. { \"name\" : \"Arduino AVR Boards\" , \"architecture\" : \"avr\" , \"version\" : \"1.6.6\" , \"category\" : \"Arduino\" , \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"url\" : \"http://downloads.arduino.cc/cores/avr-1.6.6.tar.bz2\" , \"archiveFileName\" : \"avr-1.6.6.tar.bz2\" , \"checksum\" : \"SHA-256:08ad5db4978ebea22344edc5d77dce0923d8a644da7a14dc8072e883c76058d8\" , \"size\" : \"4876916\" , \"boards\" : [ { \"name\" : \"Arduino Y\u00fan\" }, { \"name\" : \"Arduino Uno\" }, { \"name\" : \"Arduino Diecimila\" }, { \"name\" : \"Arduino Nano\" }, { \"name\" : \"Arduino Mega\" }, { \"name\" : \"Arduino MegaADK\" }, { \"name\" : \"Arduino Leonardo\" }, ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } , Each PLATFORM describes a core for a specific architecture. The fields needed are: name : the extended name of the platform that is displayed on the Boards Manager GUI architecture : is the architecture of the platform (avr, sam, etc...). It must match the architecture of the core as explained in the Arduino platform specification version : the version of the platform. category : this field is reserved, a 3 rd party core must set it to Contributed help / online : is a URL that is displayed on the Arduino IDE's Boards Manager as an \"Online Help\" link url , archiveFileName , size and checksum : metadata of the core archive file. The meaning is the same as for the TOOLS boards : the list of boards supported (note: just the names to display on the Arduino IDE and Arduino Pro IDE's Boards Manager GUI! the real boards definitions are inside boards.txt inside the core archive file) toolsDependencies : the tools needed by this core. They will be installed by Boards Manager along with the platform. Each tool is referenced by the triple ( packager , name , version ) as previously said. Note that you can reference tools available in other packages as well, even if no platform of that package is installed. The version field is validated by both Arduino IDE and JSemVer . Here are the rules Arduino IDE follows for parsing versions ( source ): Split the version at the - character and continue with the first part. If there are no dots ( . ), parse version as an integer and form a Version from that integer using Version.forIntegers If there is one dot, split version into two, parse each part as an integer, and form a Version from those integers using Version.forIntegers Otherwise, simply parse version into a Version using Version.valueOf Note: if you miss a bracket in the JSON index, then add the URL to your Preferences, and open Boards Manager it can cause the Arduino IDE to no longer load until you have deleted the file from your arduino15 folder. Example JSON index file \u00b6 { \"packages\" : [ { \"name\" : \"myboard\" , \"maintainer\" : \"Jane Developer\" , \"websiteURL\" : \"https://github.com/janedeveloper/myboard\" , \"email\" : \"jane@janedeveloper.org\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"platforms\" : [ { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.0\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.0.zip\" , \"archiveFileName\" : \"myboard-1.0.0.zip\" , \"checksum\" : \"SHA-256:ec3ff8a1dc96d3ba6f432b9b837a35fd4174a34b3d2927de1d51010e8b94f9f1\" , \"size\" : \"15005\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] }, { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.1\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.1.zip\" , \"archiveFileName\" : \"myboard-1.0.1.zip\" , \"checksum\" : \"SHA-256:9c86ee28a7ce9fe33e8b07ec643316131e0031b0d22e63bb398902a5fdadbca9\" , \"size\" : \"15125\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } ], \"tools\" : [] } ] } In the example there is one PACKAGE , My Board. The package is compatible with the AVR architecture. There are two versions of the PACKAGE , 1.0.0 and 1.0.1. No TOOLS needed to be installed so that section was left empty. Here is the Boards Manager entry created by the example: Installation archive structure \u00b6 The installation archives contain the Board support files. Supported formats are .zip, .tar.bz2, and .tar.gz. The folder structure of the core archive is slightly different from the standard manually installed Arduino IDE 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level. After adding Boards Manager support for your boards, please share the JSON index file URL on the Unofficial list of 3 rd party boards support urls .","title":"package_index.json specification"},{"location":"package_index_json-specification/#naming-of-the-json-index-file","text":"Many different index files coming from different vendors may be in use, so each vendor should name their own index file in a way that won't conflict with others. The file must be named as follows: package_YOURNAME_PACKAGENAME_index.json The prefix package_ and the postfix _index.json are mandatory (otherwise the index file is not recognised by the Arduino development software) while the choice of YOURNAME_PACKAGENAME is left to the packager. We suggest using a domain name owned by the packager. For example: package_arduino.cc_index.json or package_example.com_avr_boards_index.json The index URL is periodically checked for updates, so expect a constant flow of downloads (proportional to the number of active users).","title":"Naming of the JSON index file"},{"location":"package_index_json-specification/#json-index-file-contents","text":"The root of the JSON index is an array of packages : { \"packages\" : [ PACKAGE_XXXX ] } 3 rd party vendors should use a single PACKAGE_XXXX that is a dictionary map with the vendor's metadata, a list of PLATFORMS and a list of TOOLS . For example: { \"name\" : \"arduino\" , \"maintainer\" : \"Arduino LLC\" , \"websiteURL\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"platforms\" : [ PLATFORM_AVR , PLATFORM_ARM , PLATFORM_XXXXX , PLATFORM_YYYYY ], \"tools\" : [ TOOLS_COMPILER_AVR , TOOLS_UPLOADER_AVR , TOOLS_COMPILER_ARM , TOOLS_XXXXXXX , TOOLS_YYYYYYY ] } The metadata fields are: name : the folder used for the installed cores. The vendor folder name of the installed package is determined by this field maintainer : the extended name of the vendor that is displayed on the Arduino IDE/Pro IDE's Boards Manager GUI websiteURL : the URL to the vendor's website, appears on the Arduino IDE/Pro IDE's Boards Manager as a \"More info\" link email : the email of the vendor/maintainer Now, before looking at PLATFORMS , let's explore first how TOOLS are made.","title":"JSON Index file contents"},{"location":"package_index_json-specification/#tools-definitions","text":"Each tool describes a binary distribution of a command line tool. A tool can be: a compiler toolchain an uploader a file preprocessor a debugger a program that performs a firmware upgrade basically anything that can run on the user's host PC and do something useful. For example, Arduino uses two command line tools for the AVR boards: avr-gcc (the compiler) and avrdude (the uploader). Tools are mapped as JSON in this way: { \"name\" : \"avr-gcc\" , \"version\" : \"7.3.0-atmel3.6.1-arduino7\" , \"systems\" : [ { \"size\" : \"34683056\" , \"checksum\" : \"SHA-256:3903553d035da59e33cff9941b857c3cb379cb0638105dfdf69c97f0acc8e7b5\" , \"host\" : \"arm-linux-gnueabihf\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-arm-linux-gnueabihf.tar.bz2\" }, { \"size\" : \"38045723\" , \"checksum\" : \"SHA-256:03d322b9df6da17289e9e7c6233c34a8535d9c645c19efc772ba19e56914f339\" , \"host\" : \"aarch64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-aarch64-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"36684546\" , \"checksum\" : \"SHA-256:f6ed2346953fcf88df223469088633eb86de997fa27ece117fd1ef170d69c1f8\" , \"host\" : \"x86_64-apple-darwin14\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-apple-darwin14.tar.bz2\" }, { \"size\" : \"52519412\" , \"checksum\" : \"SHA-256:a54f64755fff4cb792a1495e5defdd789902a2a3503982e81b898299cf39800e\" , \"host\" : \"i686-mingw32\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-w64-mingw32.zip\" }, { \"size\" : \"37176991\" , \"checksum\" : \"SHA-256:954bbffb33545bcdcd473af993da2980bf32e8461ff55a18e0eebc7b2ef69a4c\" , \"host\" : \"i686-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-i686-pc-linux-gnu.tar.bz2\" }, { \"size\" : \"37630618\" , \"checksum\" : \"SHA-256:bd8c37f6952a2130ac9ee32c53f6a660feb79bee8353c8e289eb60fdcefed91e\" , \"host\" : \"x86_64-linux-gnu\" , \"archiveFileName\" : \"avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-7.3.0-atmel3.6.1-arduino7-x86_64-pc-linux-gnu.tar.bz2\" } ] } , The field name and version are respectively the name and version of the tool. Each tool is uniquely identified by the triple ( packager , name , version ). packager (AKA \"vendor\") is defined by the name value of the tool's package. There can be many different versions of the same tool available at the same time, for example: ( arduino , avr-gcc , 5.4.0-atmel3.6.1-arduino2 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino5 ) ( arduino , avr-gcc , 7.3.0-atmel3.6.1-arduino7 ) ( arduino , avrdude , 5.11 ) ( arduino , avrdude , 6.0 ) ( arduino , avrdude , 6.1 ) ..... Each tool version may come in different build flavours for different OS. Each flavour is listed under the systems array. In the example above avr-gcc comes with builds for: ARM Linux 32-bit ( arm-linux-gnueabihf ), ARM Linux 64-bit ( aarch64-linux-gnu ), macOS 64-bit ( x86_64-apple-darwin14 ), Windows ( i686-mingw32 ), Linux 32-bit ( i686-linux-gnu ), Linux 64-bit ( x86_64-linux-gnu ) The IDE will take care to install the right flavour based on the host value, or fail if a needed flavour is missing. Note that this information is not used to select the toolchain during compilation. If you want this specific version to be used, you should use the notation {runtime.tools.TOOLNAME-VERSION.path} in the platform.txt. The other fields are: url : the download URL of the tool's archive archiveFileName : the name of the file saved to disk after the download (some web servers don't provide the filename through the HTTP request) size : the size of the archive in bytes checksum : the checksum of the archive, used to check if the file has been corrupted. The format is ALGORITHM:CHECKSUM , currently MD5 , SHA-1 , SHA-256 algorithm are supported, we recommend SHA-256 . On *nix or macOS you can use the command shasum -a 256 filename to generate SHA-256 checksums. There are free options for Windows, including md5deep. There are also online utilities for generating checksums.","title":"Tools definitions"},{"location":"package_index_json-specification/#how-a-tools-path-is-determined-in-platformtxt","text":"When the IDE needs a tool, it downloads the corresponding archive file and unpacks the content into a private folder that can be referenced from platform.txt using one of the following properties: {runtime.tools.TOOLNAME-VERSION.path} {runtime.tools.TOOLNAME.path} For example, to obtain the avr-gcc 4.8.1 folder we can use {runtime.tools.avr-gcc-4.8.1-arduino5.path} or {runtime.tools.avr-gcc.path} .","title":"How a tool's path is determined in platform.txt"},{"location":"package_index_json-specification/#platforms-definitions","text":"Finally, let's see how PLATFORMS are made. { \"name\" : \"Arduino AVR Boards\" , \"architecture\" : \"avr\" , \"version\" : \"1.6.6\" , \"category\" : \"Arduino\" , \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"url\" : \"http://downloads.arduino.cc/cores/avr-1.6.6.tar.bz2\" , \"archiveFileName\" : \"avr-1.6.6.tar.bz2\" , \"checksum\" : \"SHA-256:08ad5db4978ebea22344edc5d77dce0923d8a644da7a14dc8072e883c76058d8\" , \"size\" : \"4876916\" , \"boards\" : [ { \"name\" : \"Arduino Y\u00fan\" }, { \"name\" : \"Arduino Uno\" }, { \"name\" : \"Arduino Diecimila\" }, { \"name\" : \"Arduino Nano\" }, { \"name\" : \"Arduino Mega\" }, { \"name\" : \"Arduino MegaADK\" }, { \"name\" : \"Arduino Leonardo\" }, ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } , Each PLATFORM describes a core for a specific architecture. The fields needed are: name : the extended name of the platform that is displayed on the Boards Manager GUI architecture : is the architecture of the platform (avr, sam, etc...). It must match the architecture of the core as explained in the Arduino platform specification version : the version of the platform. category : this field is reserved, a 3 rd party core must set it to Contributed help / online : is a URL that is displayed on the Arduino IDE's Boards Manager as an \"Online Help\" link url , archiveFileName , size and checksum : metadata of the core archive file. The meaning is the same as for the TOOLS boards : the list of boards supported (note: just the names to display on the Arduino IDE and Arduino Pro IDE's Boards Manager GUI! the real boards definitions are inside boards.txt inside the core archive file) toolsDependencies : the tools needed by this core. They will be installed by Boards Manager along with the platform. Each tool is referenced by the triple ( packager , name , version ) as previously said. Note that you can reference tools available in other packages as well, even if no platform of that package is installed. The version field is validated by both Arduino IDE and JSemVer . Here are the rules Arduino IDE follows for parsing versions ( source ): Split the version at the - character and continue with the first part. If there are no dots ( . ), parse version as an integer and form a Version from that integer using Version.forIntegers If there is one dot, split version into two, parse each part as an integer, and form a Version from those integers using Version.forIntegers Otherwise, simply parse version into a Version using Version.valueOf Note: if you miss a bracket in the JSON index, then add the URL to your Preferences, and open Boards Manager it can cause the Arduino IDE to no longer load until you have deleted the file from your arduino15 folder.","title":"Platforms definitions"},{"location":"package_index_json-specification/#example-json-index-file","text":"{ \"packages\" : [ { \"name\" : \"myboard\" , \"maintainer\" : \"Jane Developer\" , \"websiteURL\" : \"https://github.com/janedeveloper/myboard\" , \"email\" : \"jane@janedeveloper.org\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"platforms\" : [ { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.0\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.0.zip\" , \"archiveFileName\" : \"myboard-1.0.0.zip\" , \"checksum\" : \"SHA-256:ec3ff8a1dc96d3ba6f432b9b837a35fd4174a34b3d2927de1d51010e8b94f9f1\" , \"size\" : \"15005\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] }, { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.1\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.1.zip\" , \"archiveFileName\" : \"myboard-1.0.1.zip\" , \"checksum\" : \"SHA-256:9c86ee28a7ce9fe33e8b07ec643316131e0031b0d22e63bb398902a5fdadbca9\" , \"size\" : \"15125\" , \"boards\" : [{ \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" }], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } ], \"tools\" : [] } ] } In the example there is one PACKAGE , My Board. The package is compatible with the AVR architecture. There are two versions of the PACKAGE , 1.0.0 and 1.0.1. No TOOLS needed to be installed so that section was left empty. Here is the Boards Manager entry created by the example:","title":"Example JSON index file"},{"location":"package_index_json-specification/#installation-archive-structure","text":"The installation archives contain the Board support files. Supported formats are .zip, .tar.bz2, and .tar.gz. The folder structure of the core archive is slightly different from the standard manually installed Arduino IDE 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level. After adding Boards Manager support for your boards, please share the JSON index file URL on the Unofficial list of 3 rd party boards support urls .","title":"Installation archive structure"},{"location":"platform-specification/","text":"This is the Arduino platform specification, for use with Arduino development software starting from the Arduino IDE 1.5.x series. Platforms add support for new boards to the Arduino development software. They are installable either via Boards Manager or manual installation to the hardware folder of Arduino's sketchbook folder (AKA \"user directory\"). A platform may consist of as little as a single configuration file. Hardware Folders structure \u00b6 The new hardware folders have a hierarchical structure organized in two levels: the first level is the vendor/maintainer the second level is the supported architecture A vendor/maintainer can have multiple supported architectures. For example, below we have three hardware vendors called \"arduino\", \"yyyyy\" and \"xxxxx\": hardware/arduino/avr/... - Arduino - AVR Boards hardware/arduino/sam/... - Arduino - SAM (32bit ARM) Boards hardware/yyyyy/avr/... - Yyy - AVR hardware/xxxxx/avr/... - Xxx - AVR The vendor \"arduino\" has two supported architectures (AVR and SAM), while \"xxxxx\" and \"yyyyy\" have only AVR. Architecture values are case sensitive (e.g. AVR != avr ). If possible, follow existing architecture name conventions when creating hardware packages. Use the vendor folder name to differentiate your package. The architecture folder name is used to determine library compatibility and to permit referencing resources from another core of the same architecture, so use of a non-standard architecture name can have a harmful effect. Architecture configurations \u00b6 Each architecture must be configured through a set of configuration files: platform.txt contains definitions for the CPU architecture used (compiler, build process parameters, tools used for upload, etc.) boards.txt contains definitions for the boards (board name, parameters for building and uploading sketches, etc.) programmers.txt contains definitions for external programmers (typically used to burn bootloaders or sketches on a blank CPU/board) Configuration files format \u00b6 A configuration file is a list of \"key=value\" properties. The value of a property can be expressed using the value of another property by putting its name inside brackets \"{\" \"}\". For example: compiler.path=/tools/g++_arm_none_eabi/bin/ compiler.c.cmd=arm-none-eabi-gcc [....] recipe.c.o.pattern={compiler.path}{compiler.c.cmd} In this example the property recipe.c.o.pattern will be set to /tools/g++_arm_none_eabi/bin/arm-none-eabi-gcc , which is the composition of the properties compiler.path and compiler.c.cmd . Comments \u00b6 Lines starting with # are treated as comments and will be ignored. # Like in this example # -------------------- # I'm a comment! Automatic property override for specific OS \u00b6 We can specify an OS-specific value for a property. For example the following file: tools.bossac.cmd=bossac tools.bossac.cmd.windows=bossac.exe will set the property tools.bossac.cmd to the value bossac on Linux and macOS and bossac.exe on Windows. Supported suffixes are .linux , .windows and .macosx . Global Predefined properties \u00b6 The following automatically generated properties can be used globally in all configuration files: {runtime.platform.path} : the absolute path of the board platform folder (i.e. the folder containing boards.txt) {runtime.hardware.path} : the absolute path of the hardware folder (i.e. the folder containing the board platform folder) {runtime.ide.path} : the absolute path of the Arduino IDE or Arduino CLI folder {runtime.ide.version} : the version number of the Arduino IDE as a number (this uses two digits per version number component, and removes the points and leading zeroes, so Arduino IDE 1.8.3 becomes 01.08.03 which becomes runtime.ide.version=10803 ). When using Arduino development software other than the Arduino IDE, this is set to a meaningless version number. {ide_version} : Compatibility alias for {runtime.ide.version} {runtime.os} : the running OS (\"linux\", \"windows\", \"macosx\") {software} : set to \"ARDUINO\" {name} : platform vendor name {_id} : board ID of the board being compiled for {build.fqbn} : the FQBN (fully qualified board name) of the board being compiled for. The FQBN follows the format: VENDOR:ARCHITECTURE:BOARD_ID[:MENU_ID=OPTION_ID[,MENU2_ID=OPTION_ID ...]] {build.source.path} : Path to the sketch being compiled. If the sketch is in an unsaved state, it will the path of its temporary folder. {build.library_discovery_phase} : set to 1 during library discovery and to 0 during normal build. A macro defined with this property can be used to disable the inclusion of heavyweight headers during discovery to reduce compilation time. This property was added in Arduino IDE 1.8.14/Arduino Builder 1.6.0/Arduino CLI 0.12.0. Note: with the same intent, -DARDUINO_LIB_DISCOVERY_PHASE was added to recipe.preproc.macros during library discovery in Arduino Builder 1.5.3/Arduino CLI 0.10.0. That flag was replaced by the more flexible {build.library_discovery_phase} property. {compiler.optimization_flags} : see \"Sketch debugging configuration\" for details {extra.time.utc} : Unix time (seconds since 1970-01-01T00:00:00Z) according to the machine the build is running on {extra.time.local} : Unix time with local timezone and DST offset {extra.time.zone} : local timezone offset without the DST component {extra.time.dst} : local daylight savings time offset Compatibility note: Versions before Arduino IDE 1.6.0 only used one digit per version number component in {runtime.ide.version} (so 1.5.9 was 159 , not 10509 ). platform.txt \u00b6 The platform.txt file contains information about a platform's specific aspects (compilers command line flags, paths, system libraries, etc.). The following meta-data must be defined: name=Arduino AVR Boards version=1.5.3 The name will be shown as the Arduino IDE's Board menu section title or the Name field of arduino-cli core list 's output for the platform. The version is currently unused, it is reserved for future use (probably together with the Boards Manager to handle dependencies on cores). Build process \u00b6 The platform.txt file is used to configure the build process . This is done through a list of recipes . Each recipe is a command line expression that explains how to call the compiler (or other tools) for every build step and which parameter should be passed. The Arduino development software, before starting the build, determines the list of files to compile. The list is composed of: the user's Sketch source code in the selected board's Core source code in the Libraries used in the sketch A temporary folder is created to store the build artifacts whose path is available through the global property {build.path} . A property {build.project_name} with the name of the project and a property {build.arch} with the name of the architecture is set as well. {build.path} : The path to the temporary folder to store build artifacts {build.project_name} : The project name {build.arch} : The MCU architecture (avr, sam, etc...) There are some other {build.xxx} properties available, that are explained in the boards.txt section of this guide. Recipes to compile source code \u00b6 We said that the Arduino development software determines a list of files to compile. Each file can be source code written in C (.c files), C++ (.cpp files) or Assembly (.S files). Every language is compiled using its respective recipe : recipe.c.o.pattern : for C files recipe.cpp.o.pattern : for CPP files recipe.S.o.pattern : for Assembly files The recipes can be built concatenating the following automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {object_file} : the path to the output file For example the following is used for AVR: ## Compiler global definitions compiler.path={runtime.ide.path}/tools/avr/bin/ compiler.c.cmd=avr-gcc compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD [......] ## Compile c files recipe.c.o.pattern=\"{compiler.path}{compiler.c.cmd}\" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} \"{source_file}\" -o \"{object_file}\" Note that some properties, like {build.mcu} for example, are taken from the boards.txt file which is documented later in this specification. Recipes to build the core.a archive file \u00b6 The core of the selected board is compiled as described in the previous paragraph, but the object files obtained from the compile are also archived into a static library named core.a using the recipe.ar.pattern . The recipe can be built concatenating the following automatically generated properties: {object_file} : the object file to include in the archive {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the resulting archive (ex. \"core.a\") For example, Arduino provides the following for AVR: compiler.ar.cmd=avr-ar compiler.ar.flags=rcs [......] ## Create archives recipe.ar.pattern=\"{compiler.path}{compiler.ar.cmd}\" {compiler.ar.flags} \"{archive_file_path}\" \"{object_file}\" Recipes for linking \u00b6 All the artifacts produced by the previous steps (sketch object files, libraries object files and core.a archive) are linked together using the recipe.c.combine.pattern . The recipe can be built concatenating the following automatically generated properties: {object_files} : the list of object files to include in the archive (\"file1.o file2.o ....\") {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the core archive file (ex. \"core.a\") {compiler.libraries.ldflags} : the linking flags for precompiled libraries, which consist of automatically generated -L flags for the library path and -l flags for library files, as well as any custom flags provided via the ldflags field of library.properties. In order to support precompiled libraries, platform.txt must contain a definition of compiler.libraries.ldflags , to which any automatically generated flags will be appended. Support for precompiled libraries was added in Arduino IDE 1.8.6/arduino-builder 1.4.0. For example the following is used for AVR: compiler.c.elf.flags=-Os -Wl,--gc-sections compiler.c.elf.cmd=avr-gcc compiler.libraries.ldflags= [......] ## Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" {compiler.c.elf.flags} -mmcu={build.mcu} -o \"{build.path}/{build.project_name}.elf\" {object_files} {compiler.libraries.ldflags} \"{archive_file_path}\" \"-L{build.path}\" -lm Recipes for extraction of executable files and other binary data \u00b6 An arbitrary number of extra steps can be performed at the end of objects linking. These steps can be used to extract binary data used for upload and they are defined by a set of recipes with the following format: recipe.objcopy.FILE_EXTENSION_1.pattern=[.....] recipe.objcopy.FILE_EXTENSION_2.pattern=[.....] [.....] FILE_EXTENSION_x must be replaced with the extension of the extracted file, for example the AVR platform needs two files a .hex and a .eep , so we made two recipes like: recipe.objcopy.eep.pattern=[.....] recipe.objcopy.hex.pattern=[.....] There are no specific properties set by the Arduino development software here. A full example for the AVR platform can be: ## Create eeprom recipe.objcopy.eep.pattern=\"{compiler.path}{compiler.objcopy.cmd}\" {compiler.objcopy.eep.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.eep\" ## Create hex recipe.objcopy.hex.pattern=\"{compiler.path}{compiler.elf2hex.cmd}\" {compiler.elf2hex.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.hex\" Recipes to compute binary sketch size \u00b6 At the end of the build the Arduino development software shows the final binary sketch size to the user. The size is calculated using the recipe recipe.size.pattern . The output of the command executed using the recipe is parsed through the regular expressions set in the properties: recipe.size.regex : Program storage space used. recipe.size.regex.data : Dynamic memory used by global variables. For AVR we have: compiler.size.cmd=avr-size [....] ## Compute size recipe.size.pattern=\"{compiler.path}{compiler.size.cmd}\" -A \"{build.path}/{build.project_name}.hex\" recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).* recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).* Two properties can be used to define the total available memory: {upload.maximum_size} : available program storage space {upload.maximum_data_size} : available dynamic memory for global variables If the binary sketch size exceeds the value of these properties, the compilation process fails. This information is displayed in the console output after compiling a sketch, along with the relative memory usage value: Sketch uses 924 bytes (2%) of program storage space. Maximum is 32256 bytes. Global variables use 9 bytes (0%) of dynamic memory, leaving 2039 bytes for local variables. Maximum is 2048 bytes. Recipes to export compiled binary \u00b6 When you do a Sketch > Export compiled Binary in the Arduino IDE, the compiled binary is copied from the build folder to the sketch folder. Two binaries are copied; the standard binary, and a binary that has been merged with the bootloader file (identified by the .with_bootloader in the filename). Two recipes affect how Export compiled Binary works: recipe.output.tmp_file : Defines the binary's filename in the build folder. recipe.output.save_file : Defines the filename to use when copying the binary file to the sketch folder. As with other processes, there are pre and post build hooks for Export compiled Binary . The recipe.hooks.savehex.presavehex.NUMBER.pattern and recipe.hooks.savehex.postsavehex.NUMBER.pattern hooks (but not recipe.output.tmp_file and recipe.output.save_file ) can be built concatenating the following automatically generated properties: {sketch_path} - the absolute path of the sketch folder Recipe to run the preprocessor \u00b6 For detecting which libraries to include in the build, and for generating function prototypes, (just) the preprocessor is run. For this, the recipe.preproc.macros recipe exists. This recipe must run the preprocessor on a given source file, writing the preprocessed output to a given output file, and generate (only) preprocessor errors on standard output. This preprocessor run should happen with the same defines and other preprocessor-influencing-options as for normally compiling the source files. The recipes can be built concatenating other automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {preprocessed_file_path} : the path to the output file For example the following is used for AVR: preproc.macros.flags=-w -x c++ -E -CC recipe.preproc.macros=\"{compiler.path}{compiler.cpp.cmd}\" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} \"{source_file}\" -o \"{preprocessed_file_path}\" Note that the {preprocessed_file_path} might point to (your operating system's equivalent) of /dev/null . In this case, also passing -MMD to gcc is problematic, as it will try to generate a dependency file called /dev/null.d , which will usually result in a permission error. Since platforms typically include {compiler.cpp.flags} here, which includes -MMD , the -MMD option is automatically filtered out of the recipe.preproc.macros recipe to prevent this error. If recipe.preproc.macros is not defined, it is automatically generated from recipe.cpp.o.pattern . Note that older Arduino IDE versions used the recipe.preproc.includes recipe (which is not documented here) to determine includes. Since Arduino IDE 1.6.7 (arduino-builder 1.2.0) this was changed and recipe.preproc.includes is no longer used. Pre and post build hooks (since Arduino IDE 1.6.5) \u00b6 You can specify pre and post actions around each recipe. These are called \"hooks\". Here is the complete list of available hooks: recipe.hooks.sketch.prebuild.NUMBER.pattern (called before sketch compilation) recipe.hooks.sketch.postbuild.NUMBER.pattern (called after sketch compilation) recipe.hooks.libraries.prebuild.NUMBER.pattern (called before libraries compilation) recipe.hooks.libraries.postbuild.NUMBER.pattern (called after libraries compilation) recipe.hooks.core.prebuild.NUMBER.pattern (called before core compilation) recipe.hooks.core.postbuild.NUMBER.pattern (called after core compilation) recipe.hooks.linking.prelink.NUMBER.pattern (called before linking) recipe.hooks.linking.postlink.NUMBER.pattern (called after linking) recipe.hooks.objcopy.preobjcopy.NUMBER.pattern (called before objcopy recipes execution) recipe.hooks.objcopy.postobjcopy.NUMBER.pattern (called after objcopy recipes execution) recipe.hooks.savehex.presavehex.NUMBER.pattern (called before savehex recipe execution) recipe.hooks.savehex.postsavehex.NUMBER.pattern (called after savehex recipe execution) Example: you want to execute two commands before sketch compilation and one after linking. You'll add to your platform.txt: recipe.hooks.sketch.prebuild.1.pattern=echo sketch compilation started at recipe.hooks.sketch.prebuild.2.pattern=date recipe.hooks.linking.postlink.1.pattern=echo linking is complete Warning: hooks recipes are sorted before execution. If you need to write more than 10 recipes for a single hook, pad the number with a zero, for example: recipe.hooks.sketch.prebuild.01.pattern=echo 1 recipe.hooks.sketch.prebuild.02.pattern=echo 2 ... recipe.hooks.sketch.prebuild.11.pattern=echo 11 Global platform.txt \u00b6 Properties defined in a platform.txt created in the hardware subfolder of the Arduino IDE installation folder will be used for all platforms and will override local properties. This feature is currently only available when using the Arduino IDE. platform.local.txt \u00b6 Introduced in Arduino IDE 1.5.7. This file can be used to override properties defined in platform.txt or define new properties without modifying platform.txt (e.g. when platform.txt is tracked by a version control system). It should be placed in the same folder as the platform.txt it supplements. boards.txt \u00b6 This file contains definitions and metadata for the boards supported by the platform. Boards are referenced by their short name, the board ID. The settings for a board are defined through a set of properties with keys having the board ID as prefix. For example, the board ID chosen for the Arduino Uno board is \"uno\". An extract of the Uno board configuration in boards.txt looks like: [......] uno.name=Arduino Uno uno.build.mcu=atmega328p uno.build.f_cpu=16000000L uno.build.board=AVR_UNO uno.build.core=arduino uno.build.variant=standard [......] Note that all the relevant keys start with the board ID uno.xxxxx . The uno.name property contains the human-friendly name of the board. This is shown in the Board menu of the IDEs, the \"Board Name\" field of Arduino CLI's text output, or the \"name\" key of Arduino CLI's JSON output. The uno.build.board property is used to set a compile-time macro ARDUINO_{build.board} to allow use of conditional code between #ifdef s. If not defined, a build.board value is automatically generated and the Arduino development software outputs a warning. In this case the macro defined at compile time will be ARDUINO_AVR_UNO . The other properties will override the corresponding global properties when the user selects the board. These properties will be globally available, in other configuration files too, without the board ID prefix: uno.build.mcu => build.mcu uno.build.f_cpu => build.f_cpu uno.build.board => build.board uno.build.core => build.core uno.build.variant => build.variant This explains the presence of {build.mcu} or {build.board} in the platform.txt recipes: their value is overwritten respectively by {uno.build.mcu} and {uno.build.board} when the Uno board is selected! Moreover the following properties are automatically generated: {build.core.path} : The path to the selected board's core folder (inside the core platform , for example hardware/arduino/avr/core/arduino) {build.system.path} : The path to the core platform 's system folder if available (for example hardware/arduino/sam/system) {build.variant.path} : The path to the selected board variant folder (inside the variant platform , for example hardware/arduino/avr/variants/micro) Cores \u00b6 Cores are placed inside the cores subfolder. Many different cores can be provided within a single platform. For example the following could be a valid platform layout: hardware/arduino/avr/cores/ : Cores folder for \"avr\" architecture, package \"arduino\" hardware/arduino/avr/cores/arduino : the Arduino Core hardware/arduino/avr/cores/rtos : a hypothetical RTOS Core The board's property build.core is used to find the core that must be compiled and linked when the board is selected. For example if a board needs the Arduino core the build.core variable should be set to: uno.build.core=arduino or if the RTOS core is needed, to: uno.build.core=rtos In any case the contents of the selected core folder are compiled and the core folder path is added to the include files search path. ArduinoCore-API \u00b6 Although much of the implementation of a core is architecture-specific, the standardized core API and the hardware independent components should be the same for every Arduino platform. In order to free platform authors from the burden of individually maintaining duplicates of this common code, Arduino has published it in a dedicated repository from which it may easily be shared by all platforms. In addition to significantly reducing the effort required to write and maintain a core, ArduinoCore-API assists core authors in providing the unprecedented level of portability between platforms that is a hallmark of the Arduino project. See the arduino/ArduinoCore-API repository for more information. Core Variants \u00b6 Sometimes a board needs some tweaking on the default core configuration (different pin mapping is a typical example). A core variant folder is an additional folder that is compiled together with the core and allows platform developers to easily add specific configurations. Variants must be placed inside the variants folder in the current architecture. For example, Arduino AVR Boards uses: hardware/arduino/avr/cores : Core folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/cores/arduino : The Arduino core hardware/arduino/avr/variants/ : Variant folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/variants/standard : ATmega328 based variants hardware/arduino/avr/variants/leonardo : ATmega32U4 based variants In this example, the Arduino Uno board needs the standard variant so the build.variant property is set to standard : [.....] uno.build.core=arduino uno.build.variant=standard [.....] instead, the Arduino Leonardo board needs the leonardo variant: [.....] leonardo.build.core=arduino leonardo.build.variant=leonardo [.....] In the example above, both Uno and Leonardo share the same core but use different variants. In any case, the contents of the selected variant folder path is added to the include search path and its contents are compiled and linked with the sketch. The parameter build.variant.path is automatically generated. Board VID/PID \u00b6 USB vendor IDs (VID) and product IDs (PID) identify USB devices to the computer. If the board uses a unique VID/PID pair, it may be defined in boards.txt: uno.vid.0=0x2341 uno.pid.0=0x0043 uno.vid.1=0x2341 uno.pid.1=0x0001 The vid and pid properties end with an arbitrary number, which allows multiple VID/PID pairs to be defined for a board. The snippet above is defining the 2341:0043 and 2341:0001 pairs used by Uno boards. The Arduino development software uses the vid and pid properties to automatically identify the boards connected to the computer. This convenience feature isn't available for boards that don't present a unique VID/PID pair. Serial Monitor control signal configuration \u00b6 Arduino boards that use a USB to TTL serial adapter chip for communication with the computer (e.g., Uno, Nano, Mega) often utilize the DTR (data terminal ready) or RTS (request to send) serial control signals as a mechanism for the Arduino development software to trigger a reset of the primary microcontroller. The adapter's DTR and RTS pins are set LOW when the control signals are asserted by the computer and this LOW level is converted into a pulse on the microcontroller's reset pin by an \"auto-reset\" circuit on the board. The auto-reset system is necessary to activate the bootloader at the start of an upload. This system is also used to reset the microcontroller when Serial Monitor is started. The reset is convenient because it allows viewing all serial output from the time the program starts. In case the reset caused by opening Serial Monitor is not desirable, the control signal assertion behavior of Serial Monitor is configurable via the serial.disableDTR and serial.disableRTS properties. Setting these properties to true will prevent Serial Monitor from asserting the control signals when that board is selected: [.....] uno.serial.disableDTR=true uno.serial.disableRTS=true [.....] Hiding boards \u00b6 Adding a hide property to a board definition causes it to not be shown in the Arduino IDE's Tools > Board menu. uno.hide= The value of the property is ignored; it's the presence or absence of the property that controls the board's visibility. programmers.txt \u00b6 This file contains definitions for external programmers. These programmers are used by: The Tools > Burn Bootloader feature of the IDEs and arduino-cli burn-bootloader The Sketch > Upload Using Programmer feature of the IDEs and arduino-cli upload --programmer <programmer ID> programmers.txt works similarly to boards.txt . Programmers are referenced by their short name: the programmer ID. The settings for a programmer are defined through a set of properties with keys that use the programmer ID as prefix. For example, the programmer ID chosen for the \"Arduino as ISP\" programmer is \"arduinoasisp\". The definition of this programmer in programmers.txt looks like: [......] arduinoasisp.name=Arduino as ISP arduinoasisp.protocol=stk500v1 arduinoasisp.program.speed=19200 arduinoasisp.program.tool=avrdude arduinoasisp.program.extra_params=-P{serial.port} -b{program.speed} [......] These properties can only be used in the recipes of the actions that use the programmer ( erase , bootloader , and program ). The arduinoasisp.name property defines the human-friendly name of the programmer. This is shown in the Tools > Programmer menu of the IDEs and the output of arduino-cli upload --programmer list and arduino-cli burn-bootloader --programmer list . In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available for use. Starting with Arduino IDE 1.8.13 (and in all relevant versions of other Arduino development tools), only the programmers defined by the board and core platform of the currently selected board are available. For this reason, platforms may now need to define copies of the programmers that were previously assumed to be provided by another platform. Tools \u00b6 The Arduino development software uses external command line tools to upload the compiled sketch to the board or to burn bootloaders using external programmers. For example, avrdude is used for AVR based boards and bossac for SAM based boards, but there is no limit, any command line executable can be used. The command line parameters are specified using recipes in the same way used for platform build process. Tools are configured inside the platform.txt file. Every Tool is identified by a short name, the Tool ID. A tool can be used for different purposes: upload a sketch to the target board (using a bootloader preinstalled on the board) program a sketch to the target board using an external programmer erase the target board's flash memory using an external programmer burn a bootloader into the target board using an external programmer debug a sketch Each action has its own recipe and its configuration is done through a set of properties having key starting with tools prefix followed by the tool ID and the action: [....] tools.avrdude.upload.pattern=[......] [....] tools.avrdude.program.pattern=[......] [....] tools.avrdude.erase.pattern=[......] [....] tools.avrdude.bootloader.pattern=[......] [.....] A tool may have some actions not defined (it's not mandatory to define all four actions). Let's look at how the upload action is defined for avrdude: tools.avrdude.path={runtime.tools.avrdude.path} tools.avrdude.cmd.path={path}/bin/avrdude tools.avrdude.config.path={path}/etc/avrdude.conf tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" A {runtime.tools.TOOL_NAME.path} and {runtime.tools.TOOL_NAME-TOOL_VERSION.path} property is generated for the tools of Arduino AVR Boards and any other platform installed via Boards Manager. {runtime.tools.TOOL_NAME.path} points to the latest version of the tool available. The tool configuration properties are available globally without the prefix. For example, the tools.avrdude.cmd.path property can be used as {cmd.path} inside the recipe, and the same happens for all the other avrdude configuration variables. Verbose parameter \u00b6 It is possible for the user to enable verbosity from the Preferences panel of the IDEs or Arduino CLI's --verbose flag. This preference is transferred to the command line using the ACTION.verbose property (where ACTION is the action we are considering). When the verbose mode is enabled, the tools.TOOL_ID.ACTION.params.verbose property is copied into ACTION.verbose . When the verbose mode is disabled, the tools.TOOL_ID.ACTION.params.quiet property is copied into ACTION.verbose . Confused? Maybe an example will make things clear: tools.avrdude.upload.params.verbose=-v -v -v -v tools.avrdude.upload.params.quiet=-q -q tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" In this example if the user enables verbose mode, then {upload.params.verbose} is used in {upload.verbose} : tools.avrdude.upload.params.verbose => upload.verbose If the user didn't enable verbose mode, then {upload.params.quiet} is used in {upload.verbose} : tools.avrdude.upload.params.quiet => upload.verbose Sketch upload configuration \u00b6 The Upload action is triggered when the user clicks on the \"Upload\" button on the IDE toolbar or uses arduino-cli upload . Arduino uses the term \"upload\" for the process of transferring a program to the Arduino board. The upload.tool property determines the tool to be used for upload. A specific upload.tool property should be defined for every board in boards.txt: [......] uno.upload.tool=avrdude [......] leonardo.upload.tool=avrdude [......] Other upload parameters can also be defined for the board. For example, in the Arduino AVR Boards boards.txt we have: [.....] uno.name=Arduino Uno uno.upload.tool=avrdude uno.upload.protocol=arduino uno.upload.maximum_size=32256 uno.upload.speed=115200 [.....] leonardo.name=Arduino Leonardo leonardo.upload.tool=avrdude leonardo.upload.protocol=avr109 leonardo.upload.maximum_size=28672 leonardo.upload.speed=57600 leonardo.upload.use_1200bps_touch=true leonardo.upload.wait_for_upload_port=true [.....] Most {upload.XXXX} variables are used later in the avrdude upload recipe in platform.txt: [.....] tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" [.....] Upload verification \u00b6 Upload verification can be enabled via the Arduino IDE's File > Preferences > Verify code after upload or arduino-cli upload --verify . This uses a system similar to the verbose parameter . tools.TOOL_ID.ACTION.params.verify defines the value of the ACTION.verify property when verification is enabled and tools.TOOL_ID.ACTION.params.noverify the value when verification is disabled. The {ACTION.verify} property is only defined for the upload and program actions of upload.tool . Prior to Arduino IDE 1.6.9, tools.TOOL_ID.ACTION.params.verify/noverify were not supported and {upload.verify} was set to true / false according to the verification preference setting, while {program.verify} was left undefined. For this reason, backwards compatibility with older IDE versions requires the addition of definitions for the upload.verify and program.verify properties to platform.txt: [.....] tools.avrdude.upload.verify= [.....] tools.avrdude.program.verify= [.....] These definitions are overridden with the value defined by tools.TOOL_ID.ACTION.params.verify/noverify when a modern version of Arduino development software is in use. 1200 bps bootloader reset \u00b6 Some Arduino boards use a dedicated USB-to-serial chip, that takes care of restarting the main MCU (starting the bootloader) when the serial port is opened. However, boards that have a native USB connection (such as the Leonardo or Zero) will have to disconnect from USB when rebooting into the bootloader (after which the bootloader reconnects to USB and offers a new serial port for uploading). After the upload is complete, the bootloader disconnects from USB again, starts the sketch, which then reconnects to USB. Because of these reconnections, the standard restart-on-serial open will not work, since that would cause the serial port to disappear and be closed again. Instead, the sketch running on these boards interprets a bitrate of 1200 bps as a signal the bootloader should be started. To let the Arduino development software perform these steps, two board properties can be set to true : use_1200bps_touch causes the selected serial port to be briefly opened at 1200 bps (8N1) before starting the upload. wait_for_upload_port causes the upload procedure to wait for the serial port to (re)appear before and after the upload. This is only used when use_1200bps_touch is also set. When set, after doing the 1200 bps touch, the development software will wait for a new serial port to appear and use that as the port for uploads. Alternatively, if the original port does not disappear within a few seconds, the upload continues with the original port (which can be the case if the board was already put into bootloader manually, or the the disconnect and reconnect was missed). Additionally, after the upload is complete, the IDE again waits for a new port to appear (or the originally selected port to be present). Note that the IDE implementation of this 1200 bps touch has some peculiarities, and the newer arduino-cli implementation also seems different (does not wait for the port after the reset, which is probably only needed in the IDE to prevent opening the wrong port on the serial monitor, and does not have a shorter timeout when the port never disappears). Upload Using Programmer by default \u00b6 If the upload.protocol property is not defined for a board, the Arduino IDE's \"Upload\" process will use the same behavior as \"Upload Using Programmer\" . This is convenient for boards which only support uploading via programmer. Serial port \u00b6 The full path (e.g., /dev/ttyACM0 ) of the port selected via the IDE or arduino-cli upload 's --port option is available as a configuration property {serial.port} . The file component of the port's path (e.g., ttyACM0 ) is available as the configuration property {serial.port.file} . Upload using an external programmer \u00b6 The program action is triggered via the Sketch > Upload Using Programmer feature of the IDEs or arduino-cli upload --programmer <programmer ID> . This action is used to transfer a compiled sketch to a board using an external programmer. The program.tool property determines the tool to be used for this action. This property is typically defined for each programmer in programmers.txt : [......] usbasp.program.tool=avrdude [......] arduinoasisp.program.tool=avrdude [......] This action can use the same upload verification preference system as the upload action, via the program.verify property. When using the Arduino IDE, if the selected programmer is from a different platform than the board, the program recipe defined in the programmer's platform is used without overrides from the properties defined in the platform.txt of the board platform . When using Arduino development software other than the Arduino IDE, the handling of properties is the same as when doing a standard Upload . Burn Bootloader \u00b6 The erase and bootloader actions are triggered via the Tools > Burn Bootloader feature of the Arduino IDE or arduino-cli burn-bootloader . This action is used to flash a bootloader to the board. \"Burn Bootloader\" is unique in that it uses two actions, which are executed in sequence: erase is typically used to erase the microcontroller's flash memory and set the configuration fuses according to the properties defined in the board definition bootloader is used to flash the bootloader to the board The bootloader.tool property determines the tool to be used for the erase and bootloader actions both. This property is typically defined for each board in boards.txt: [......] uno.bootloader.tool=avrdude [......] leonardo.bootloader.tool=avrdude [......] When using the Arduino IDE, if the board uses a core reference , the platform.txt of the core platform is not used at all in defining the recipes for erase and bootloader actions. When using Arduino development software other than the Arduino IDE, the handling of properties from the core platform's platform.txt is done as usual. Sketch debugging configuration \u00b6 Starting from Arduino CLI 0.9.0 / Arduino Pro IDE v0.0.5-alpha.preview, sketch debugging support is available for platforms. The debug action is triggered when the user clicks Debug > Start Debugging in the Arduino Pro IDE or runs the arduino-cli debug command. The debug.tool property specifies the tool ID of the tool to be used for debugging. A debug.tool property may be defined for each board in boards.txt. The compiler optimization level that is appropriate for normal usage will often not provide a good experience while debugging. For this reason, it may be helpful to use different compiler flags when compiling a sketch for use with the debugger. The flags for use when compiling for debugging can be defined via the compiler.optimization_flags.debug property, and those for normal use via the compiler.optimization_flags.release property. The compiler.optimization_flags property will be defined according to one or the other depending on the Arduino Pro IDE's Sketch > Optimize for Debugging setting or arduino-cli compile 's --optimize-for-debug option. The debug recipe is defined via tools.TOOL_NAME.debug.pattern . It can be built concatenating the following automatically generated properties: {interpreter} : the GDB command interpreter to use. It is configurable via arduino-cli debug --interpreter . This property was added in Arduino CLI 0.10.0 / Arduino Pro IDE v0.0.7-alpha.preview. Custom board options \u00b6 It can sometimes be useful to provide user selectable configuration options for a specific board. For example, a board could be provided in two or more variants with different microcontrollers, or may have different crystal speed based on the board model, and so on... When using Arduino CLI, the option can be selected via the FQBN. In the Arduino IDE the options add extra menu items under the \"Tools\" menu. In Arduino Web Editor, the options are displayed in the \"Flavours\" menu. Let's see an example of how a custom option is implemented. The board used in the example is the Arduino Duemilanove. This board was produced in two models, one with an ATmega168 microcontroller and another with an ATmega328P. We are going then to define a custom option, using the \"cpu\" MENU_ID, that allows the user to choose between the two different microcontrollers. We must first define a set of menu.MENU_ID=Text properties. Text is what is displayed on the GUI for every custom menu we are going to create and must be declared at the beginning of the boards.txt file: menu.cpu=Processor [.....] in this case, the menu name is \"Processor\". Now let's add, always in the boards.txt file, the default configuration (common to all processors) for the duemilanove board: menu.cpu=Processor [.....] duemilanove.name=Arduino Duemilanove duemilanove.upload.tool=avrdude duemilanove.upload.protocol=arduino duemilanove.build.f_cpu=16000000L duemilanove.build.board=AVR_DUEMILANOVE duemilanove.build.core=arduino duemilanove.build.variant=standard [.....] Now let's define the possible values of the \"cpu\" option: [.....] duemilanove.menu.cpu.atmega328=ATmega328P [.....] duemilanove.menu.cpu.atmega168=ATmega168 [.....] We have defined two values: \"atmega328\" and \"atmega168\". Note that the property keys must follow the format BOARD_ID.menu.MENU_ID.OPTION_ID=Text , where Text is what is displayed under the \"Processor\" menu in the IDE's GUI. Finally, the specific configuration for each option value: [.....] ## Arduino Duemilanove w/ ATmega328P duemilanove.menu.cpu.atmega328=ATmega328P duemilanove.menu.cpu.atmega328.upload.maximum_size=30720 duemilanove.menu.cpu.atmega328.upload.speed=57600 duemilanove.menu.cpu.atmega328.build.mcu=atmega328p ## Arduino Duemilanove w/ ATmega168 duemilanove.menu.cpu.atmega168=ATmega168 duemilanove.menu.cpu.atmega168.upload.maximum_size=14336 duemilanove.menu.cpu.atmega168.upload.speed=19200 duemilanove.menu.cpu.atmega168.build.mcu=atmega168 [.....] Note that when the user selects an option value, all the \"sub properties\" of that value are copied in the global configuration. For example, when the user selects \"ATmega168\" from the \"Processor\" menu, or uses the FQBN arduino:avr:duemilanove:cpu=atmega168 with Arduino CLI, the configuration under atmega168 is made available globally: duemilanove.menu.cpu.atmega168.upload.maximum_size => upload.maximum_size duemilanove.menu.cpu.atmega168.upload.speed => upload.speed duemilanove.menu.cpu.atmega168.build.mcu => build.mcu There is no limit to the number of custom menus that can be defined. Referencing another core, variant or tool \u00b6 The Arduino platform referencing system allows using components of other platforms in cases where it would otherwise be necessary to duplicate those components. This feature allows us to reduce the minimum set of files needed to define a new \"hardware\" to just the boards.txt file. Core reference \u00b6 Inside the boards.txt we can define a board that uses a core provided by another vendor/maintainer using the syntax VENDOR_ID:CORE_ID . For example, if we want to define a board that uses the \"arduino\" core from the \"arduino\" vendor we should write: [....] myboard.name=My Wonderful Arduino Compatible board myboard.build.core=arduino:arduino [....] Note that we don't need to specify any architecture since the same architecture of \"myboard\" is used, so we just say \"arduino:arduino\" instead of \"arduino:avr:arduino\". The platform.txt settings are inherited from the referenced core platform, thus there is no need to provide a platform.txt unless there are some specific properties that need to be overridden. The bundled libraries from the referenced platform are used, thus there is no need for the referencing platform to bundle those libraries. If libraries are provided, the list of available libraries is the sum of the two libraries, where the referencing platform has priority over the referenced platform. The programmers from the referenced platform are made available, thus there is no need for the referencing platform to define those programmers. If the referencing platform does provide its own programmer definitions, the list of available programmer is the sum of the programmers of the two platforms. In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available. Variant reference \u00b6 In the same way we can use a variant defined on another platform using the syntax VENDOR_ID:VARIANT_ID : [....] myboard.build.variant=arduino:standard [....] Note that, unlike core references, other resources (platform.txt, bundled libraries, programmers) are not inherited from the referenced platform. Tool references \u00b6 Tool recipes defined in the platform.txt of other platforms can also be referenced using the syntax VENDOR_ID:TOOL_ID : [....] myboard.upload.tool=arduino:avrdude myboard.bootloader.tool=arduino:avrdude [....] When using Arduino CLI or Arduino Pro IDE (but not Arduino IDE), properties used in the referenced tool recipe may be overridden in the referencing platform's platform.txt. Note that, unlike core references, referencing a tool recipe does not result in any other resources being inherited from the referenced platform. Platform Terminology \u00b6 Because boards can reference cores, variants and tools in different platforms, this means that a single build or upload can use data from up to four different platforms. To keep this clear, the following terminology is used: The \"board platform\" is the platform that defines the currently selected board (e.g. the platform that contains the board.txt the board is defined in. The \"core platform\" is the the platform that contains the core to be used. The \"variant platform\" is the platform that contains the variant to be used. The \"tool platform\" is the platform that contains the tool used for the current operation. In the most common case: a board platform without any references, all of these will refer to the same platform. Note that the above terminology is not in widespread use, but was invented for clarity within this document. In the actual Arduino CLI code, the \"board platform\" is called targetPlatform , the \"core platform\" is called actualPlatform , the others are pretty much nameless. boards.local.txt \u00b6 Introduced in Arduino IDE 1.6.6. This file can be used to override properties defined in boards.txt or define new properties without modifying boards.txt. Platform bundled libraries \u00b6 Arduino libraries placed in the platform's libraries subfolder are accessible when a board of the platform, or of a platform that references the platform's core, is selected. When any other board is selected, the platform bundled libraries are inaccessible. These are often architecture-specific libraries (e.g., SPI, Wire) which must be implemented differently for each architecture. Platform bundled libraries may be used to provide specialized versions of libraries which use the dependency resolution system to override built-in libraries. For more information, see the Arduino library specification . keywords.txt \u00b6 As of Arduino IDE 1.6.6, per-platform keywords can be defined by adding a keywords.txt file to the platform's architecture folder. These keywords are only highlighted in the Arduino IDE when one of the boards of that platform are selected. This file follows the same format as the keywords.txt used in libraries. Post-install script \u00b6 After Boards Manager finishes installation of a platform, it checks for the presence of a script named: post_install.bat - when running on Windows post_install.sh - when running on any non-Windows operating system If present, the script is executed. This script may be used to configure the user's system for the platform, such as installing drivers. The circumstances under which the post-install script will run are different depending on which Arduino development software is in use: Arduino IDE : (all versions) runs the script when the installed platform is signed with Arduino's private key. Arduino CLI : (since 0.12.0) runs the script for any installed platform when Arduino CLI is in \"interactive\" mode. This behavior can be configured Arduino Pro IDE : (since 0.1.0) runs the script for any installed platform.","title":"Platform specification"},{"location":"platform-specification/#hardware-folders-structure","text":"The new hardware folders have a hierarchical structure organized in two levels: the first level is the vendor/maintainer the second level is the supported architecture A vendor/maintainer can have multiple supported architectures. For example, below we have three hardware vendors called \"arduino\", \"yyyyy\" and \"xxxxx\": hardware/arduino/avr/... - Arduino - AVR Boards hardware/arduino/sam/... - Arduino - SAM (32bit ARM) Boards hardware/yyyyy/avr/... - Yyy - AVR hardware/xxxxx/avr/... - Xxx - AVR The vendor \"arduino\" has two supported architectures (AVR and SAM), while \"xxxxx\" and \"yyyyy\" have only AVR. Architecture values are case sensitive (e.g. AVR != avr ). If possible, follow existing architecture name conventions when creating hardware packages. Use the vendor folder name to differentiate your package. The architecture folder name is used to determine library compatibility and to permit referencing resources from another core of the same architecture, so use of a non-standard architecture name can have a harmful effect.","title":"Hardware Folders structure"},{"location":"platform-specification/#architecture-configurations","text":"Each architecture must be configured through a set of configuration files: platform.txt contains definitions for the CPU architecture used (compiler, build process parameters, tools used for upload, etc.) boards.txt contains definitions for the boards (board name, parameters for building and uploading sketches, etc.) programmers.txt contains definitions for external programmers (typically used to burn bootloaders or sketches on a blank CPU/board)","title":"Architecture configurations"},{"location":"platform-specification/#configuration-files-format","text":"A configuration file is a list of \"key=value\" properties. The value of a property can be expressed using the value of another property by putting its name inside brackets \"{\" \"}\". For example: compiler.path=/tools/g++_arm_none_eabi/bin/ compiler.c.cmd=arm-none-eabi-gcc [....] recipe.c.o.pattern={compiler.path}{compiler.c.cmd} In this example the property recipe.c.o.pattern will be set to /tools/g++_arm_none_eabi/bin/arm-none-eabi-gcc , which is the composition of the properties compiler.path and compiler.c.cmd .","title":"Configuration files format"},{"location":"platform-specification/#comments","text":"Lines starting with # are treated as comments and will be ignored. # Like in this example # -------------------- # I'm a comment!","title":"Comments"},{"location":"platform-specification/#automatic-property-override-for-specific-os","text":"We can specify an OS-specific value for a property. For example the following file: tools.bossac.cmd=bossac tools.bossac.cmd.windows=bossac.exe will set the property tools.bossac.cmd to the value bossac on Linux and macOS and bossac.exe on Windows. Supported suffixes are .linux , .windows and .macosx .","title":"Automatic property override for specific OS"},{"location":"platform-specification/#global-predefined-properties","text":"The following automatically generated properties can be used globally in all configuration files: {runtime.platform.path} : the absolute path of the board platform folder (i.e. the folder containing boards.txt) {runtime.hardware.path} : the absolute path of the hardware folder (i.e. the folder containing the board platform folder) {runtime.ide.path} : the absolute path of the Arduino IDE or Arduino CLI folder {runtime.ide.version} : the version number of the Arduino IDE as a number (this uses two digits per version number component, and removes the points and leading zeroes, so Arduino IDE 1.8.3 becomes 01.08.03 which becomes runtime.ide.version=10803 ). When using Arduino development software other than the Arduino IDE, this is set to a meaningless version number. {ide_version} : Compatibility alias for {runtime.ide.version} {runtime.os} : the running OS (\"linux\", \"windows\", \"macosx\") {software} : set to \"ARDUINO\" {name} : platform vendor name {_id} : board ID of the board being compiled for {build.fqbn} : the FQBN (fully qualified board name) of the board being compiled for. The FQBN follows the format: VENDOR:ARCHITECTURE:BOARD_ID[:MENU_ID=OPTION_ID[,MENU2_ID=OPTION_ID ...]] {build.source.path} : Path to the sketch being compiled. If the sketch is in an unsaved state, it will the path of its temporary folder. {build.library_discovery_phase} : set to 1 during library discovery and to 0 during normal build. A macro defined with this property can be used to disable the inclusion of heavyweight headers during discovery to reduce compilation time. This property was added in Arduino IDE 1.8.14/Arduino Builder 1.6.0/Arduino CLI 0.12.0. Note: with the same intent, -DARDUINO_LIB_DISCOVERY_PHASE was added to recipe.preproc.macros during library discovery in Arduino Builder 1.5.3/Arduino CLI 0.10.0. That flag was replaced by the more flexible {build.library_discovery_phase} property. {compiler.optimization_flags} : see \"Sketch debugging configuration\" for details {extra.time.utc} : Unix time (seconds since 1970-01-01T00:00:00Z) according to the machine the build is running on {extra.time.local} : Unix time with local timezone and DST offset {extra.time.zone} : local timezone offset without the DST component {extra.time.dst} : local daylight savings time offset Compatibility note: Versions before Arduino IDE 1.6.0 only used one digit per version number component in {runtime.ide.version} (so 1.5.9 was 159 , not 10509 ).","title":"Global Predefined properties"},{"location":"platform-specification/#platformtxt","text":"The platform.txt file contains information about a platform's specific aspects (compilers command line flags, paths, system libraries, etc.). The following meta-data must be defined: name=Arduino AVR Boards version=1.5.3 The name will be shown as the Arduino IDE's Board menu section title or the Name field of arduino-cli core list 's output for the platform. The version is currently unused, it is reserved for future use (probably together with the Boards Manager to handle dependencies on cores).","title":"platform.txt"},{"location":"platform-specification/#build-process","text":"The platform.txt file is used to configure the build process . This is done through a list of recipes . Each recipe is a command line expression that explains how to call the compiler (or other tools) for every build step and which parameter should be passed. The Arduino development software, before starting the build, determines the list of files to compile. The list is composed of: the user's Sketch source code in the selected board's Core source code in the Libraries used in the sketch A temporary folder is created to store the build artifacts whose path is available through the global property {build.path} . A property {build.project_name} with the name of the project and a property {build.arch} with the name of the architecture is set as well. {build.path} : The path to the temporary folder to store build artifacts {build.project_name} : The project name {build.arch} : The MCU architecture (avr, sam, etc...) There are some other {build.xxx} properties available, that are explained in the boards.txt section of this guide.","title":"Build process"},{"location":"platform-specification/#recipes-to-compile-source-code","text":"We said that the Arduino development software determines a list of files to compile. Each file can be source code written in C (.c files), C++ (.cpp files) or Assembly (.S files). Every language is compiled using its respective recipe : recipe.c.o.pattern : for C files recipe.cpp.o.pattern : for CPP files recipe.S.o.pattern : for Assembly files The recipes can be built concatenating the following automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {object_file} : the path to the output file For example the following is used for AVR: ## Compiler global definitions compiler.path={runtime.ide.path}/tools/avr/bin/ compiler.c.cmd=avr-gcc compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD [......] ## Compile c files recipe.c.o.pattern=\"{compiler.path}{compiler.c.cmd}\" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} \"{source_file}\" -o \"{object_file}\" Note that some properties, like {build.mcu} for example, are taken from the boards.txt file which is documented later in this specification.","title":"Recipes to compile source code"},{"location":"platform-specification/#recipes-to-build-the-corea-archive-file","text":"The core of the selected board is compiled as described in the previous paragraph, but the object files obtained from the compile are also archived into a static library named core.a using the recipe.ar.pattern . The recipe can be built concatenating the following automatically generated properties: {object_file} : the object file to include in the archive {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the resulting archive (ex. \"core.a\") For example, Arduino provides the following for AVR: compiler.ar.cmd=avr-ar compiler.ar.flags=rcs [......] ## Create archives recipe.ar.pattern=\"{compiler.path}{compiler.ar.cmd}\" {compiler.ar.flags} \"{archive_file_path}\" \"{object_file}\"","title":"Recipes to build the core.a archive file"},{"location":"platform-specification/#recipes-for-linking","text":"All the artifacts produced by the previous steps (sketch object files, libraries object files and core.a archive) are linked together using the recipe.c.combine.pattern . The recipe can be built concatenating the following automatically generated properties: {object_files} : the list of object files to include in the archive (\"file1.o file2.o ....\") {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the core archive file (ex. \"core.a\") {compiler.libraries.ldflags} : the linking flags for precompiled libraries, which consist of automatically generated -L flags for the library path and -l flags for library files, as well as any custom flags provided via the ldflags field of library.properties. In order to support precompiled libraries, platform.txt must contain a definition of compiler.libraries.ldflags , to which any automatically generated flags will be appended. Support for precompiled libraries was added in Arduino IDE 1.8.6/arduino-builder 1.4.0. For example the following is used for AVR: compiler.c.elf.flags=-Os -Wl,--gc-sections compiler.c.elf.cmd=avr-gcc compiler.libraries.ldflags= [......] ## Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" {compiler.c.elf.flags} -mmcu={build.mcu} -o \"{build.path}/{build.project_name}.elf\" {object_files} {compiler.libraries.ldflags} \"{archive_file_path}\" \"-L{build.path}\" -lm","title":"Recipes for linking"},{"location":"platform-specification/#recipes-for-extraction-of-executable-files-and-other-binary-data","text":"An arbitrary number of extra steps can be performed at the end of objects linking. These steps can be used to extract binary data used for upload and they are defined by a set of recipes with the following format: recipe.objcopy.FILE_EXTENSION_1.pattern=[.....] recipe.objcopy.FILE_EXTENSION_2.pattern=[.....] [.....] FILE_EXTENSION_x must be replaced with the extension of the extracted file, for example the AVR platform needs two files a .hex and a .eep , so we made two recipes like: recipe.objcopy.eep.pattern=[.....] recipe.objcopy.hex.pattern=[.....] There are no specific properties set by the Arduino development software here. A full example for the AVR platform can be: ## Create eeprom recipe.objcopy.eep.pattern=\"{compiler.path}{compiler.objcopy.cmd}\" {compiler.objcopy.eep.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.eep\" ## Create hex recipe.objcopy.hex.pattern=\"{compiler.path}{compiler.elf2hex.cmd}\" {compiler.elf2hex.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.hex\"","title":"Recipes for extraction of executable files and other binary data"},{"location":"platform-specification/#recipes-to-compute-binary-sketch-size","text":"At the end of the build the Arduino development software shows the final binary sketch size to the user. The size is calculated using the recipe recipe.size.pattern . The output of the command executed using the recipe is parsed through the regular expressions set in the properties: recipe.size.regex : Program storage space used. recipe.size.regex.data : Dynamic memory used by global variables. For AVR we have: compiler.size.cmd=avr-size [....] ## Compute size recipe.size.pattern=\"{compiler.path}{compiler.size.cmd}\" -A \"{build.path}/{build.project_name}.hex\" recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).* recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).* Two properties can be used to define the total available memory: {upload.maximum_size} : available program storage space {upload.maximum_data_size} : available dynamic memory for global variables If the binary sketch size exceeds the value of these properties, the compilation process fails. This information is displayed in the console output after compiling a sketch, along with the relative memory usage value: Sketch uses 924 bytes (2%) of program storage space. Maximum is 32256 bytes. Global variables use 9 bytes (0%) of dynamic memory, leaving 2039 bytes for local variables. Maximum is 2048 bytes.","title":"Recipes to compute binary sketch size"},{"location":"platform-specification/#recipes-to-export-compiled-binary","text":"When you do a Sketch > Export compiled Binary in the Arduino IDE, the compiled binary is copied from the build folder to the sketch folder. Two binaries are copied; the standard binary, and a binary that has been merged with the bootloader file (identified by the .with_bootloader in the filename). Two recipes affect how Export compiled Binary works: recipe.output.tmp_file : Defines the binary's filename in the build folder. recipe.output.save_file : Defines the filename to use when copying the binary file to the sketch folder. As with other processes, there are pre and post build hooks for Export compiled Binary . The recipe.hooks.savehex.presavehex.NUMBER.pattern and recipe.hooks.savehex.postsavehex.NUMBER.pattern hooks (but not recipe.output.tmp_file and recipe.output.save_file ) can be built concatenating the following automatically generated properties: {sketch_path} - the absolute path of the sketch folder","title":"Recipes to export compiled binary"},{"location":"platform-specification/#recipe-to-run-the-preprocessor","text":"For detecting which libraries to include in the build, and for generating function prototypes, (just) the preprocessor is run. For this, the recipe.preproc.macros recipe exists. This recipe must run the preprocessor on a given source file, writing the preprocessed output to a given output file, and generate (only) preprocessor errors on standard output. This preprocessor run should happen with the same defines and other preprocessor-influencing-options as for normally compiling the source files. The recipes can be built concatenating other automatically generated properties (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {preprocessed_file_path} : the path to the output file For example the following is used for AVR: preproc.macros.flags=-w -x c++ -E -CC recipe.preproc.macros=\"{compiler.path}{compiler.cpp.cmd}\" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} \"{source_file}\" -o \"{preprocessed_file_path}\" Note that the {preprocessed_file_path} might point to (your operating system's equivalent) of /dev/null . In this case, also passing -MMD to gcc is problematic, as it will try to generate a dependency file called /dev/null.d , which will usually result in a permission error. Since platforms typically include {compiler.cpp.flags} here, which includes -MMD , the -MMD option is automatically filtered out of the recipe.preproc.macros recipe to prevent this error. If recipe.preproc.macros is not defined, it is automatically generated from recipe.cpp.o.pattern . Note that older Arduino IDE versions used the recipe.preproc.includes recipe (which is not documented here) to determine includes. Since Arduino IDE 1.6.7 (arduino-builder 1.2.0) this was changed and recipe.preproc.includes is no longer used.","title":"Recipe to run the preprocessor"},{"location":"platform-specification/#pre-and-post-build-hooks-since-arduino-ide-165","text":"You can specify pre and post actions around each recipe. These are called \"hooks\". Here is the complete list of available hooks: recipe.hooks.sketch.prebuild.NUMBER.pattern (called before sketch compilation) recipe.hooks.sketch.postbuild.NUMBER.pattern (called after sketch compilation) recipe.hooks.libraries.prebuild.NUMBER.pattern (called before libraries compilation) recipe.hooks.libraries.postbuild.NUMBER.pattern (called after libraries compilation) recipe.hooks.core.prebuild.NUMBER.pattern (called before core compilation) recipe.hooks.core.postbuild.NUMBER.pattern (called after core compilation) recipe.hooks.linking.prelink.NUMBER.pattern (called before linking) recipe.hooks.linking.postlink.NUMBER.pattern (called after linking) recipe.hooks.objcopy.preobjcopy.NUMBER.pattern (called before objcopy recipes execution) recipe.hooks.objcopy.postobjcopy.NUMBER.pattern (called after objcopy recipes execution) recipe.hooks.savehex.presavehex.NUMBER.pattern (called before savehex recipe execution) recipe.hooks.savehex.postsavehex.NUMBER.pattern (called after savehex recipe execution) Example: you want to execute two commands before sketch compilation and one after linking. You'll add to your platform.txt: recipe.hooks.sketch.prebuild.1.pattern=echo sketch compilation started at recipe.hooks.sketch.prebuild.2.pattern=date recipe.hooks.linking.postlink.1.pattern=echo linking is complete Warning: hooks recipes are sorted before execution. If you need to write more than 10 recipes for a single hook, pad the number with a zero, for example: recipe.hooks.sketch.prebuild.01.pattern=echo 1 recipe.hooks.sketch.prebuild.02.pattern=echo 2 ... recipe.hooks.sketch.prebuild.11.pattern=echo 11","title":"Pre and post build hooks (since Arduino IDE 1.6.5)"},{"location":"platform-specification/#global-platformtxt","text":"Properties defined in a platform.txt created in the hardware subfolder of the Arduino IDE installation folder will be used for all platforms and will override local properties. This feature is currently only available when using the Arduino IDE.","title":"Global platform.txt"},{"location":"platform-specification/#platformlocaltxt","text":"Introduced in Arduino IDE 1.5.7. This file can be used to override properties defined in platform.txt or define new properties without modifying platform.txt (e.g. when platform.txt is tracked by a version control system). It should be placed in the same folder as the platform.txt it supplements.","title":"platform.local.txt"},{"location":"platform-specification/#boardstxt","text":"This file contains definitions and metadata for the boards supported by the platform. Boards are referenced by their short name, the board ID. The settings for a board are defined through a set of properties with keys having the board ID as prefix. For example, the board ID chosen for the Arduino Uno board is \"uno\". An extract of the Uno board configuration in boards.txt looks like: [......] uno.name=Arduino Uno uno.build.mcu=atmega328p uno.build.f_cpu=16000000L uno.build.board=AVR_UNO uno.build.core=arduino uno.build.variant=standard [......] Note that all the relevant keys start with the board ID uno.xxxxx . The uno.name property contains the human-friendly name of the board. This is shown in the Board menu of the IDEs, the \"Board Name\" field of Arduino CLI's text output, or the \"name\" key of Arduino CLI's JSON output. The uno.build.board property is used to set a compile-time macro ARDUINO_{build.board} to allow use of conditional code between #ifdef s. If not defined, a build.board value is automatically generated and the Arduino development software outputs a warning. In this case the macro defined at compile time will be ARDUINO_AVR_UNO . The other properties will override the corresponding global properties when the user selects the board. These properties will be globally available, in other configuration files too, without the board ID prefix: uno.build.mcu => build.mcu uno.build.f_cpu => build.f_cpu uno.build.board => build.board uno.build.core => build.core uno.build.variant => build.variant This explains the presence of {build.mcu} or {build.board} in the platform.txt recipes: their value is overwritten respectively by {uno.build.mcu} and {uno.build.board} when the Uno board is selected! Moreover the following properties are automatically generated: {build.core.path} : The path to the selected board's core folder (inside the core platform , for example hardware/arduino/avr/core/arduino) {build.system.path} : The path to the core platform 's system folder if available (for example hardware/arduino/sam/system) {build.variant.path} : The path to the selected board variant folder (inside the variant platform , for example hardware/arduino/avr/variants/micro)","title":"boards.txt"},{"location":"platform-specification/#cores","text":"Cores are placed inside the cores subfolder. Many different cores can be provided within a single platform. For example the following could be a valid platform layout: hardware/arduino/avr/cores/ : Cores folder for \"avr\" architecture, package \"arduino\" hardware/arduino/avr/cores/arduino : the Arduino Core hardware/arduino/avr/cores/rtos : a hypothetical RTOS Core The board's property build.core is used to find the core that must be compiled and linked when the board is selected. For example if a board needs the Arduino core the build.core variable should be set to: uno.build.core=arduino or if the RTOS core is needed, to: uno.build.core=rtos In any case the contents of the selected core folder are compiled and the core folder path is added to the include files search path.","title":"Cores"},{"location":"platform-specification/#arduinocore-api","text":"Although much of the implementation of a core is architecture-specific, the standardized core API and the hardware independent components should be the same for every Arduino platform. In order to free platform authors from the burden of individually maintaining duplicates of this common code, Arduino has published it in a dedicated repository from which it may easily be shared by all platforms. In addition to significantly reducing the effort required to write and maintain a core, ArduinoCore-API assists core authors in providing the unprecedented level of portability between platforms that is a hallmark of the Arduino project. See the arduino/ArduinoCore-API repository for more information.","title":"ArduinoCore-API"},{"location":"platform-specification/#core-variants","text":"Sometimes a board needs some tweaking on the default core configuration (different pin mapping is a typical example). A core variant folder is an additional folder that is compiled together with the core and allows platform developers to easily add specific configurations. Variants must be placed inside the variants folder in the current architecture. For example, Arduino AVR Boards uses: hardware/arduino/avr/cores : Core folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/cores/arduino : The Arduino core hardware/arduino/avr/variants/ : Variant folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/variants/standard : ATmega328 based variants hardware/arduino/avr/variants/leonardo : ATmega32U4 based variants In this example, the Arduino Uno board needs the standard variant so the build.variant property is set to standard : [.....] uno.build.core=arduino uno.build.variant=standard [.....] instead, the Arduino Leonardo board needs the leonardo variant: [.....] leonardo.build.core=arduino leonardo.build.variant=leonardo [.....] In the example above, both Uno and Leonardo share the same core but use different variants. In any case, the contents of the selected variant folder path is added to the include search path and its contents are compiled and linked with the sketch. The parameter build.variant.path is automatically generated.","title":"Core Variants"},{"location":"platform-specification/#board-vidpid","text":"USB vendor IDs (VID) and product IDs (PID) identify USB devices to the computer. If the board uses a unique VID/PID pair, it may be defined in boards.txt: uno.vid.0=0x2341 uno.pid.0=0x0043 uno.vid.1=0x2341 uno.pid.1=0x0001 The vid and pid properties end with an arbitrary number, which allows multiple VID/PID pairs to be defined for a board. The snippet above is defining the 2341:0043 and 2341:0001 pairs used by Uno boards. The Arduino development software uses the vid and pid properties to automatically identify the boards connected to the computer. This convenience feature isn't available for boards that don't present a unique VID/PID pair.","title":"Board VID/PID"},{"location":"platform-specification/#serial-monitor-control-signal-configuration","text":"Arduino boards that use a USB to TTL serial adapter chip for communication with the computer (e.g., Uno, Nano, Mega) often utilize the DTR (data terminal ready) or RTS (request to send) serial control signals as a mechanism for the Arduino development software to trigger a reset of the primary microcontroller. The adapter's DTR and RTS pins are set LOW when the control signals are asserted by the computer and this LOW level is converted into a pulse on the microcontroller's reset pin by an \"auto-reset\" circuit on the board. The auto-reset system is necessary to activate the bootloader at the start of an upload. This system is also used to reset the microcontroller when Serial Monitor is started. The reset is convenient because it allows viewing all serial output from the time the program starts. In case the reset caused by opening Serial Monitor is not desirable, the control signal assertion behavior of Serial Monitor is configurable via the serial.disableDTR and serial.disableRTS properties. Setting these properties to true will prevent Serial Monitor from asserting the control signals when that board is selected: [.....] uno.serial.disableDTR=true uno.serial.disableRTS=true [.....]","title":"Serial Monitor control signal configuration"},{"location":"platform-specification/#hiding-boards","text":"Adding a hide property to a board definition causes it to not be shown in the Arduino IDE's Tools > Board menu. uno.hide= The value of the property is ignored; it's the presence or absence of the property that controls the board's visibility.","title":"Hiding boards"},{"location":"platform-specification/#programmerstxt","text":"This file contains definitions for external programmers. These programmers are used by: The Tools > Burn Bootloader feature of the IDEs and arduino-cli burn-bootloader The Sketch > Upload Using Programmer feature of the IDEs and arduino-cli upload --programmer <programmer ID> programmers.txt works similarly to boards.txt . Programmers are referenced by their short name: the programmer ID. The settings for a programmer are defined through a set of properties with keys that use the programmer ID as prefix. For example, the programmer ID chosen for the \"Arduino as ISP\" programmer is \"arduinoasisp\". The definition of this programmer in programmers.txt looks like: [......] arduinoasisp.name=Arduino as ISP arduinoasisp.protocol=stk500v1 arduinoasisp.program.speed=19200 arduinoasisp.program.tool=avrdude arduinoasisp.program.extra_params=-P{serial.port} -b{program.speed} [......] These properties can only be used in the recipes of the actions that use the programmer ( erase , bootloader , and program ). The arduinoasisp.name property defines the human-friendly name of the programmer. This is shown in the Tools > Programmer menu of the IDEs and the output of arduino-cli upload --programmer list and arduino-cli burn-bootloader --programmer list . In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available for use. Starting with Arduino IDE 1.8.13 (and in all relevant versions of other Arduino development tools), only the programmers defined by the board and core platform of the currently selected board are available. For this reason, platforms may now need to define copies of the programmers that were previously assumed to be provided by another platform.","title":"programmers.txt"},{"location":"platform-specification/#tools","text":"The Arduino development software uses external command line tools to upload the compiled sketch to the board or to burn bootloaders using external programmers. For example, avrdude is used for AVR based boards and bossac for SAM based boards, but there is no limit, any command line executable can be used. The command line parameters are specified using recipes in the same way used for platform build process. Tools are configured inside the platform.txt file. Every Tool is identified by a short name, the Tool ID. A tool can be used for different purposes: upload a sketch to the target board (using a bootloader preinstalled on the board) program a sketch to the target board using an external programmer erase the target board's flash memory using an external programmer burn a bootloader into the target board using an external programmer debug a sketch Each action has its own recipe and its configuration is done through a set of properties having key starting with tools prefix followed by the tool ID and the action: [....] tools.avrdude.upload.pattern=[......] [....] tools.avrdude.program.pattern=[......] [....] tools.avrdude.erase.pattern=[......] [....] tools.avrdude.bootloader.pattern=[......] [.....] A tool may have some actions not defined (it's not mandatory to define all four actions). Let's look at how the upload action is defined for avrdude: tools.avrdude.path={runtime.tools.avrdude.path} tools.avrdude.cmd.path={path}/bin/avrdude tools.avrdude.config.path={path}/etc/avrdude.conf tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" A {runtime.tools.TOOL_NAME.path} and {runtime.tools.TOOL_NAME-TOOL_VERSION.path} property is generated for the tools of Arduino AVR Boards and any other platform installed via Boards Manager. {runtime.tools.TOOL_NAME.path} points to the latest version of the tool available. The tool configuration properties are available globally without the prefix. For example, the tools.avrdude.cmd.path property can be used as {cmd.path} inside the recipe, and the same happens for all the other avrdude configuration variables.","title":"Tools"},{"location":"platform-specification/#verbose-parameter","text":"It is possible for the user to enable verbosity from the Preferences panel of the IDEs or Arduino CLI's --verbose flag. This preference is transferred to the command line using the ACTION.verbose property (where ACTION is the action we are considering). When the verbose mode is enabled, the tools.TOOL_ID.ACTION.params.verbose property is copied into ACTION.verbose . When the verbose mode is disabled, the tools.TOOL_ID.ACTION.params.quiet property is copied into ACTION.verbose . Confused? Maybe an example will make things clear: tools.avrdude.upload.params.verbose=-v -v -v -v tools.avrdude.upload.params.quiet=-q -q tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" In this example if the user enables verbose mode, then {upload.params.verbose} is used in {upload.verbose} : tools.avrdude.upload.params.verbose => upload.verbose If the user didn't enable verbose mode, then {upload.params.quiet} is used in {upload.verbose} : tools.avrdude.upload.params.quiet => upload.verbose","title":"Verbose parameter"},{"location":"platform-specification/#sketch-upload-configuration","text":"The Upload action is triggered when the user clicks on the \"Upload\" button on the IDE toolbar or uses arduino-cli upload . Arduino uses the term \"upload\" for the process of transferring a program to the Arduino board. The upload.tool property determines the tool to be used for upload. A specific upload.tool property should be defined for every board in boards.txt: [......] uno.upload.tool=avrdude [......] leonardo.upload.tool=avrdude [......] Other upload parameters can also be defined for the board. For example, in the Arduino AVR Boards boards.txt we have: [.....] uno.name=Arduino Uno uno.upload.tool=avrdude uno.upload.protocol=arduino uno.upload.maximum_size=32256 uno.upload.speed=115200 [.....] leonardo.name=Arduino Leonardo leonardo.upload.tool=avrdude leonardo.upload.protocol=avr109 leonardo.upload.maximum_size=28672 leonardo.upload.speed=57600 leonardo.upload.use_1200bps_touch=true leonardo.upload.wait_for_upload_port=true [.....] Most {upload.XXXX} variables are used later in the avrdude upload recipe in platform.txt: [.....] tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" [.....]","title":"Sketch upload configuration"},{"location":"platform-specification/#upload-verification","text":"Upload verification can be enabled via the Arduino IDE's File > Preferences > Verify code after upload or arduino-cli upload --verify . This uses a system similar to the verbose parameter . tools.TOOL_ID.ACTION.params.verify defines the value of the ACTION.verify property when verification is enabled and tools.TOOL_ID.ACTION.params.noverify the value when verification is disabled. The {ACTION.verify} property is only defined for the upload and program actions of upload.tool . Prior to Arduino IDE 1.6.9, tools.TOOL_ID.ACTION.params.verify/noverify were not supported and {upload.verify} was set to true / false according to the verification preference setting, while {program.verify} was left undefined. For this reason, backwards compatibility with older IDE versions requires the addition of definitions for the upload.verify and program.verify properties to platform.txt: [.....] tools.avrdude.upload.verify= [.....] tools.avrdude.program.verify= [.....] These definitions are overridden with the value defined by tools.TOOL_ID.ACTION.params.verify/noverify when a modern version of Arduino development software is in use.","title":"Upload verification"},{"location":"platform-specification/#1200-bps-bootloader-reset","text":"Some Arduino boards use a dedicated USB-to-serial chip, that takes care of restarting the main MCU (starting the bootloader) when the serial port is opened. However, boards that have a native USB connection (such as the Leonardo or Zero) will have to disconnect from USB when rebooting into the bootloader (after which the bootloader reconnects to USB and offers a new serial port for uploading). After the upload is complete, the bootloader disconnects from USB again, starts the sketch, which then reconnects to USB. Because of these reconnections, the standard restart-on-serial open will not work, since that would cause the serial port to disappear and be closed again. Instead, the sketch running on these boards interprets a bitrate of 1200 bps as a signal the bootloader should be started. To let the Arduino development software perform these steps, two board properties can be set to true : use_1200bps_touch causes the selected serial port to be briefly opened at 1200 bps (8N1) before starting the upload. wait_for_upload_port causes the upload procedure to wait for the serial port to (re)appear before and after the upload. This is only used when use_1200bps_touch is also set. When set, after doing the 1200 bps touch, the development software will wait for a new serial port to appear and use that as the port for uploads. Alternatively, if the original port does not disappear within a few seconds, the upload continues with the original port (which can be the case if the board was already put into bootloader manually, or the the disconnect and reconnect was missed). Additionally, after the upload is complete, the IDE again waits for a new port to appear (or the originally selected port to be present). Note that the IDE implementation of this 1200 bps touch has some peculiarities, and the newer arduino-cli implementation also seems different (does not wait for the port after the reset, which is probably only needed in the IDE to prevent opening the wrong port on the serial monitor, and does not have a shorter timeout when the port never disappears).","title":"1200 bps bootloader reset"},{"location":"platform-specification/#upload-using-programmer-by-default","text":"If the upload.protocol property is not defined for a board, the Arduino IDE's \"Upload\" process will use the same behavior as \"Upload Using Programmer\" . This is convenient for boards which only support uploading via programmer.","title":"Upload Using Programmer by default"},{"location":"platform-specification/#serial-port","text":"The full path (e.g., /dev/ttyACM0 ) of the port selected via the IDE or arduino-cli upload 's --port option is available as a configuration property {serial.port} . The file component of the port's path (e.g., ttyACM0 ) is available as the configuration property {serial.port.file} .","title":"Serial port"},{"location":"platform-specification/#upload-using-an-external-programmer","text":"The program action is triggered via the Sketch > Upload Using Programmer feature of the IDEs or arduino-cli upload --programmer <programmer ID> . This action is used to transfer a compiled sketch to a board using an external programmer. The program.tool property determines the tool to be used for this action. This property is typically defined for each programmer in programmers.txt : [......] usbasp.program.tool=avrdude [......] arduinoasisp.program.tool=avrdude [......] This action can use the same upload verification preference system as the upload action, via the program.verify property. When using the Arduino IDE, if the selected programmer is from a different platform than the board, the program recipe defined in the programmer's platform is used without overrides from the properties defined in the platform.txt of the board platform . When using Arduino development software other than the Arduino IDE, the handling of properties is the same as when doing a standard Upload .","title":"Upload using an external programmer"},{"location":"platform-specification/#burn-bootloader","text":"The erase and bootloader actions are triggered via the Tools > Burn Bootloader feature of the Arduino IDE or arduino-cli burn-bootloader . This action is used to flash a bootloader to the board. \"Burn Bootloader\" is unique in that it uses two actions, which are executed in sequence: erase is typically used to erase the microcontroller's flash memory and set the configuration fuses according to the properties defined in the board definition bootloader is used to flash the bootloader to the board The bootloader.tool property determines the tool to be used for the erase and bootloader actions both. This property is typically defined for each board in boards.txt: [......] uno.bootloader.tool=avrdude [......] leonardo.bootloader.tool=avrdude [......] When using the Arduino IDE, if the board uses a core reference , the platform.txt of the core platform is not used at all in defining the recipes for erase and bootloader actions. When using Arduino development software other than the Arduino IDE, the handling of properties from the core platform's platform.txt is done as usual.","title":"Burn Bootloader"},{"location":"platform-specification/#sketch-debugging-configuration","text":"Starting from Arduino CLI 0.9.0 / Arduino Pro IDE v0.0.5-alpha.preview, sketch debugging support is available for platforms. The debug action is triggered when the user clicks Debug > Start Debugging in the Arduino Pro IDE or runs the arduino-cli debug command. The debug.tool property specifies the tool ID of the tool to be used for debugging. A debug.tool property may be defined for each board in boards.txt. The compiler optimization level that is appropriate for normal usage will often not provide a good experience while debugging. For this reason, it may be helpful to use different compiler flags when compiling a sketch for use with the debugger. The flags for use when compiling for debugging can be defined via the compiler.optimization_flags.debug property, and those for normal use via the compiler.optimization_flags.release property. The compiler.optimization_flags property will be defined according to one or the other depending on the Arduino Pro IDE's Sketch > Optimize for Debugging setting or arduino-cli compile 's --optimize-for-debug option. The debug recipe is defined via tools.TOOL_NAME.debug.pattern . It can be built concatenating the following automatically generated properties: {interpreter} : the GDB command interpreter to use. It is configurable via arduino-cli debug --interpreter . This property was added in Arduino CLI 0.10.0 / Arduino Pro IDE v0.0.7-alpha.preview.","title":"Sketch debugging configuration"},{"location":"platform-specification/#custom-board-options","text":"It can sometimes be useful to provide user selectable configuration options for a specific board. For example, a board could be provided in two or more variants with different microcontrollers, or may have different crystal speed based on the board model, and so on... When using Arduino CLI, the option can be selected via the FQBN. In the Arduino IDE the options add extra menu items under the \"Tools\" menu. In Arduino Web Editor, the options are displayed in the \"Flavours\" menu. Let's see an example of how a custom option is implemented. The board used in the example is the Arduino Duemilanove. This board was produced in two models, one with an ATmega168 microcontroller and another with an ATmega328P. We are going then to define a custom option, using the \"cpu\" MENU_ID, that allows the user to choose between the two different microcontrollers. We must first define a set of menu.MENU_ID=Text properties. Text is what is displayed on the GUI for every custom menu we are going to create and must be declared at the beginning of the boards.txt file: menu.cpu=Processor [.....] in this case, the menu name is \"Processor\". Now let's add, always in the boards.txt file, the default configuration (common to all processors) for the duemilanove board: menu.cpu=Processor [.....] duemilanove.name=Arduino Duemilanove duemilanove.upload.tool=avrdude duemilanove.upload.protocol=arduino duemilanove.build.f_cpu=16000000L duemilanove.build.board=AVR_DUEMILANOVE duemilanove.build.core=arduino duemilanove.build.variant=standard [.....] Now let's define the possible values of the \"cpu\" option: [.....] duemilanove.menu.cpu.atmega328=ATmega328P [.....] duemilanove.menu.cpu.atmega168=ATmega168 [.....] We have defined two values: \"atmega328\" and \"atmega168\". Note that the property keys must follow the format BOARD_ID.menu.MENU_ID.OPTION_ID=Text , where Text is what is displayed under the \"Processor\" menu in the IDE's GUI. Finally, the specific configuration for each option value: [.....] ## Arduino Duemilanove w/ ATmega328P duemilanove.menu.cpu.atmega328=ATmega328P duemilanove.menu.cpu.atmega328.upload.maximum_size=30720 duemilanove.menu.cpu.atmega328.upload.speed=57600 duemilanove.menu.cpu.atmega328.build.mcu=atmega328p ## Arduino Duemilanove w/ ATmega168 duemilanove.menu.cpu.atmega168=ATmega168 duemilanove.menu.cpu.atmega168.upload.maximum_size=14336 duemilanove.menu.cpu.atmega168.upload.speed=19200 duemilanove.menu.cpu.atmega168.build.mcu=atmega168 [.....] Note that when the user selects an option value, all the \"sub properties\" of that value are copied in the global configuration. For example, when the user selects \"ATmega168\" from the \"Processor\" menu, or uses the FQBN arduino:avr:duemilanove:cpu=atmega168 with Arduino CLI, the configuration under atmega168 is made available globally: duemilanove.menu.cpu.atmega168.upload.maximum_size => upload.maximum_size duemilanove.menu.cpu.atmega168.upload.speed => upload.speed duemilanove.menu.cpu.atmega168.build.mcu => build.mcu There is no limit to the number of custom menus that can be defined.","title":"Custom board options"},{"location":"platform-specification/#referencing-another-core-variant-or-tool","text":"The Arduino platform referencing system allows using components of other platforms in cases where it would otherwise be necessary to duplicate those components. This feature allows us to reduce the minimum set of files needed to define a new \"hardware\" to just the boards.txt file.","title":"Referencing another core, variant or tool"},{"location":"platform-specification/#core-reference","text":"Inside the boards.txt we can define a board that uses a core provided by another vendor/maintainer using the syntax VENDOR_ID:CORE_ID . For example, if we want to define a board that uses the \"arduino\" core from the \"arduino\" vendor we should write: [....] myboard.name=My Wonderful Arduino Compatible board myboard.build.core=arduino:arduino [....] Note that we don't need to specify any architecture since the same architecture of \"myboard\" is used, so we just say \"arduino:arduino\" instead of \"arduino:avr:arduino\". The platform.txt settings are inherited from the referenced core platform, thus there is no need to provide a platform.txt unless there are some specific properties that need to be overridden. The bundled libraries from the referenced platform are used, thus there is no need for the referencing platform to bundle those libraries. If libraries are provided, the list of available libraries is the sum of the two libraries, where the referencing platform has priority over the referenced platform. The programmers from the referenced platform are made available, thus there is no need for the referencing platform to define those programmers. If the referencing platform does provide its own programmer definitions, the list of available programmer is the sum of the programmers of the two platforms. In Arduino IDE 1.8.12 and older, all programmers of all installed platforms were made available.","title":"Core reference"},{"location":"platform-specification/#variant-reference","text":"In the same way we can use a variant defined on another platform using the syntax VENDOR_ID:VARIANT_ID : [....] myboard.build.variant=arduino:standard [....] Note that, unlike core references, other resources (platform.txt, bundled libraries, programmers) are not inherited from the referenced platform.","title":"Variant reference"},{"location":"platform-specification/#tool-references","text":"Tool recipes defined in the platform.txt of other platforms can also be referenced using the syntax VENDOR_ID:TOOL_ID : [....] myboard.upload.tool=arduino:avrdude myboard.bootloader.tool=arduino:avrdude [....] When using Arduino CLI or Arduino Pro IDE (but not Arduino IDE), properties used in the referenced tool recipe may be overridden in the referencing platform's platform.txt. Note that, unlike core references, referencing a tool recipe does not result in any other resources being inherited from the referenced platform.","title":"Tool references"},{"location":"platform-specification/#platform-terminology","text":"Because boards can reference cores, variants and tools in different platforms, this means that a single build or upload can use data from up to four different platforms. To keep this clear, the following terminology is used: The \"board platform\" is the platform that defines the currently selected board (e.g. the platform that contains the board.txt the board is defined in. The \"core platform\" is the the platform that contains the core to be used. The \"variant platform\" is the platform that contains the variant to be used. The \"tool platform\" is the platform that contains the tool used for the current operation. In the most common case: a board platform without any references, all of these will refer to the same platform. Note that the above terminology is not in widespread use, but was invented for clarity within this document. In the actual Arduino CLI code, the \"board platform\" is called targetPlatform , the \"core platform\" is called actualPlatform , the others are pretty much nameless.","title":"Platform Terminology"},{"location":"platform-specification/#boardslocaltxt","text":"Introduced in Arduino IDE 1.6.6. This file can be used to override properties defined in boards.txt or define new properties without modifying boards.txt.","title":"boards.local.txt"},{"location":"platform-specification/#platform-bundled-libraries","text":"Arduino libraries placed in the platform's libraries subfolder are accessible when a board of the platform, or of a platform that references the platform's core, is selected. When any other board is selected, the platform bundled libraries are inaccessible. These are often architecture-specific libraries (e.g., SPI, Wire) which must be implemented differently for each architecture. Platform bundled libraries may be used to provide specialized versions of libraries which use the dependency resolution system to override built-in libraries. For more information, see the Arduino library specification .","title":"Platform bundled libraries"},{"location":"platform-specification/#keywordstxt","text":"As of Arduino IDE 1.6.6, per-platform keywords can be defined by adding a keywords.txt file to the platform's architecture folder. These keywords are only highlighted in the Arduino IDE when one of the boards of that platform are selected. This file follows the same format as the keywords.txt used in libraries.","title":"keywords.txt"},{"location":"platform-specification/#post-install-script","text":"After Boards Manager finishes installation of a platform, it checks for the presence of a script named: post_install.bat - when running on Windows post_install.sh - when running on any non-Windows operating system If present, the script is executed. This script may be used to configure the user's system for the platform, such as installing drivers. The circumstances under which the post-install script will run are different depending on which Arduino development software is in use: Arduino IDE : (all versions) runs the script when the installed platform is signed with Arduino's private key. Arduino CLI : (since 0.12.0) runs the script for any installed platform when Arduino CLI is in \"interactive\" mode. This behavior can be configured Arduino Pro IDE : (since 0.1.0) runs the script for any installed platform.","title":"Post-install script"},{"location":"sketch-build-process/","text":"The process the Arduino development software uses to build a sketch. More useful information can be found in the Arduino platform specification . Note that the following refers specifically to the build process for AVR targets. Other architectures will have a similar build process. Overview \u00b6 A number of things have to happen for your Arduino code to get onto the Arduino board. First, the Arduino development software performs some minor pre-processing to turn your sketch into a C++ program. Next, dependencies of the sketch are located. It then gets passed to a compiler (avr-gcc), which turns the human readable code into machine readable instructions (or object files). Then your code gets combined with (linked against) the standard Arduino libraries that provide basic functions like digitalWrite() or Serial.print() . The result is a single Intel hex file, which contains the specific bytes that need to be written to the program memory of the chip on the Arduino board. This file is then uploaded to the board: transmitted over the USB or serial connection via the bootloader already on the chip or with external programming hardware. Pre-Processing \u00b6 The Arduino development software performs a few transformations to your sketch before passing it to the avr-gcc compiler: All .ino and .pde files in the sketch folder (shown in the Arduino IDE as tabs with no extension) are concatenated together, starting with the file that matches the folder name followed by the others in alphabetical order. The .cpp filename extension is then added to the resulting file. If not already present, #include <Arduino.h> is added to the sketch. This header file (found in the core folder for the currently selected board) includes all the definitions needed for the standard Arduino core. Prototypes are generated for all function definitions in .ino/.pde files that don't already have prototypes. In some rare cases, prototype generation may fail for some functions. To work around this, you can provide your own prototypes for these functions. #line directives are added to make warning or error messages reflect the original sketch layout. No pre-processing is done to files in a sketch with any extension other than .ino or .pde. Additionally, .h files in the sketch are not automatically #included from the main sketch file. Further, if you want to call functions defined in a .c file from a .cpp file (like one generated from your sketch), you'll need to wrap its declarations in an extern \"C\" {} block that is defined only inside of C++ files. Dependency Resolution \u00b6 The sketch is scanned recursively for dependencies. There are predefined include search paths: Core library folder (as defined by {build.core} ) Variant folder (as defined by {build.variant} ) Standard system directories (e.g., {runtime.tools.avr-gcc.path}/avr/include ) Include search paths added to resolve prior dependencies If the dependency is not present in any of those locations, the installed libraries are then searched (see the Location Priority table below for library locations). For information on the allowed library sub-folder structures see the Arduino library specification . -I options are generated for the path to each library dependency and appended to the includes property , to be used in compilation recipes in platform.txt. If multiple libraries contain a file that matches the #include directive, the priority is determined by applying the following rules, one by one in this order, until a rule determines a winner: A library that is architecture compatible wins against a library that is not architecture compatible (see Architecture Matching ) A library that has better \"folder name priority\" wins (see Folder Name Priority ) A library that is architecture optimized wins against a library that is not architecture optimized (see Architecture Matching ) A library that has a better \"location priority\" wins (see Location Priority ) A library that has a folder name with a better score using the \"closest-match\" algorithm wins A library that has a folder name that comes first in alphanumeric order wins Architecture Matching \u00b6 A library is considered compatible with architecture X if the architectures field in library.properties : explicitly contains the architecture X contains the catch-all * is not specified at all. A library is considered optimized for architecture X only if the architectures field in library.properties explicitly contains the architecture X . This means that a library that is optimized for architecture X is also compatible with it. Examples: architectures field in library.properties Compatible with avr Optimized for avr not specified YES NO architectures=* YES NO architectures=avr YES YES architectures=*,avr YES YES architectures=*,esp8266 YES NO architectures=avr,esp8266 YES YES architectures=samd NO NO Folder Name Priority \u00b6 The \"folder name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Servo.h The folder name matches the include 100% Servo The folder name matches the include 100%, except with a -master suffix Servo-master The folder name has a matching prefix ServoWhatever The folder name has a matching suffix AwesomeServo The folder name contains the include AnAwesomeServoForWhatever Location Priority \u00b6 The \"location priority\" is determined as follows (in order of highest to lowest priority): The library is under a custom libraries path specified via the --libraries option of arduino-cli compile (in decreasing order of priority when multiple custom paths are defined) The library is under the libraries subfolder of the IDE's sketchbook or Arduino CLI's user directory The library is bundled with the board platform/core ( {runtime.platform.path}/libraries ) The library is bundled with the referenced board platform/core The library is bundled with the Arduino IDE ( {runtime.ide.path}/libraries ) This location is only used by Arduino CLI when it's located in the Arduino IDE installation folder Location priorities in Arduino Web Editor \u00b6 The location priorities system works in the same manner in Arduino Web Editor , but its cloud-based nature may make the locations of libraries less obvious. Custom : the imported libraries, shown under the Libraries > Custom tab. These libraries are under /tmp/\\<some number>/custom Pinned : libraries that were associated with the sketch by choosing a specific version from the library's \"Include\" dropdown menu. These libraries are under /tmp/\\<some number>/pinned Note: clicking the \"Include\" button does not result in the library being pinned to the sketch. Platform bundled : these are listed under the Libraries > Default tab, but with \"for \\<architecture name>\" appended to the library name (e.g., \"SPI for AVR\"). These libraries are under /home/builder/.arduino15/packages 1. Board platform bundled 1. Core platform bundled Built-in : The non-platform bundled libraries listed under the Libraries > Default tab. Libraries listed under Libraries > Library Manager . These libraries are under /home/builder/opt/libraries/latest Compilation \u00b6 Sketches are compiled by avr-gcc and avr-g++ according to the variables in the boards.txt file of the selected board's platform . The sketch is built in a temporary directory in the system-wide temporary directory (e.g. /tmp on Linux). Files taken as source files for the build process are .S, .c and .cpp files (including the .cpp file generated from the sketch's .ino and .pde files during the sketch pre-processing step). Source files of the target are compiled and output with .o extensions to this build directory, as are the main sketch files and any other source files in the sketch and any source files in any libraries which are #include d in the sketch. Before compiling a source file, an attempt is made to reuse the previously compiled .o file, which speeds up the build process. A special .d (dependency) file provides a list of all other files included by the source. The compile step is skipped if the .o and .d files exist and have timestamps newer than the source and all the dependent files. If the source or any dependent file has been modified, or any error occurs verifying the files, the compiler is run normally, writing a new .o & .d file. After a new board is selected from the IDE's Board menu, all source files are rebuilt on the next compile. These .o files are then linked together into a static library and the main sketch file is linked against this library. Only the parts of the library needed for your sketch are included in the final .hex file, reducing the size of most sketches. The .hex file is the final output of the compilation which is then uploaded to the board. If verbose output during compilation is enabled, the complete command line of each external command executed as part of the build process will be printed in the console. Uploading \u00b6 Sketches are uploaded by avrdude. The upload process is also controlled by variables in the boards and main preferences files. See the Arduino platform specification page for details. If verbose output during upload is enabled, debugging information will be output to the console, including avrdude command lines and verbose output.","title":"Sketch build process"},{"location":"sketch-build-process/#overview","text":"A number of things have to happen for your Arduino code to get onto the Arduino board. First, the Arduino development software performs some minor pre-processing to turn your sketch into a C++ program. Next, dependencies of the sketch are located. It then gets passed to a compiler (avr-gcc), which turns the human readable code into machine readable instructions (or object files). Then your code gets combined with (linked against) the standard Arduino libraries that provide basic functions like digitalWrite() or Serial.print() . The result is a single Intel hex file, which contains the specific bytes that need to be written to the program memory of the chip on the Arduino board. This file is then uploaded to the board: transmitted over the USB or serial connection via the bootloader already on the chip or with external programming hardware.","title":"Overview"},{"location":"sketch-build-process/#pre-processing","text":"The Arduino development software performs a few transformations to your sketch before passing it to the avr-gcc compiler: All .ino and .pde files in the sketch folder (shown in the Arduino IDE as tabs with no extension) are concatenated together, starting with the file that matches the folder name followed by the others in alphabetical order. The .cpp filename extension is then added to the resulting file. If not already present, #include <Arduino.h> is added to the sketch. This header file (found in the core folder for the currently selected board) includes all the definitions needed for the standard Arduino core. Prototypes are generated for all function definitions in .ino/.pde files that don't already have prototypes. In some rare cases, prototype generation may fail for some functions. To work around this, you can provide your own prototypes for these functions. #line directives are added to make warning or error messages reflect the original sketch layout. No pre-processing is done to files in a sketch with any extension other than .ino or .pde. Additionally, .h files in the sketch are not automatically #included from the main sketch file. Further, if you want to call functions defined in a .c file from a .cpp file (like one generated from your sketch), you'll need to wrap its declarations in an extern \"C\" {} block that is defined only inside of C++ files.","title":"Pre-Processing"},{"location":"sketch-build-process/#dependency-resolution","text":"The sketch is scanned recursively for dependencies. There are predefined include search paths: Core library folder (as defined by {build.core} ) Variant folder (as defined by {build.variant} ) Standard system directories (e.g., {runtime.tools.avr-gcc.path}/avr/include ) Include search paths added to resolve prior dependencies If the dependency is not present in any of those locations, the installed libraries are then searched (see the Location Priority table below for library locations). For information on the allowed library sub-folder structures see the Arduino library specification . -I options are generated for the path to each library dependency and appended to the includes property , to be used in compilation recipes in platform.txt. If multiple libraries contain a file that matches the #include directive, the priority is determined by applying the following rules, one by one in this order, until a rule determines a winner: A library that is architecture compatible wins against a library that is not architecture compatible (see Architecture Matching ) A library that has better \"folder name priority\" wins (see Folder Name Priority ) A library that is architecture optimized wins against a library that is not architecture optimized (see Architecture Matching ) A library that has a better \"location priority\" wins (see Location Priority ) A library that has a folder name with a better score using the \"closest-match\" algorithm wins A library that has a folder name that comes first in alphanumeric order wins","title":"Dependency Resolution"},{"location":"sketch-build-process/#architecture-matching","text":"A library is considered compatible with architecture X if the architectures field in library.properties : explicitly contains the architecture X contains the catch-all * is not specified at all. A library is considered optimized for architecture X only if the architectures field in library.properties explicitly contains the architecture X . This means that a library that is optimized for architecture X is also compatible with it. Examples: architectures field in library.properties Compatible with avr Optimized for avr not specified YES NO architectures=* YES NO architectures=avr YES YES architectures=*,avr YES YES architectures=*,esp8266 YES NO architectures=avr,esp8266 YES YES architectures=samd NO NO","title":"Architecture Matching"},{"location":"sketch-build-process/#folder-name-priority","text":"The \"folder name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Servo.h The folder name matches the include 100% Servo The folder name matches the include 100%, except with a -master suffix Servo-master The folder name has a matching prefix ServoWhatever The folder name has a matching suffix AwesomeServo The folder name contains the include AnAwesomeServoForWhatever","title":"Folder Name Priority"},{"location":"sketch-build-process/#location-priority","text":"The \"location priority\" is determined as follows (in order of highest to lowest priority): The library is under a custom libraries path specified via the --libraries option of arduino-cli compile (in decreasing order of priority when multiple custom paths are defined) The library is under the libraries subfolder of the IDE's sketchbook or Arduino CLI's user directory The library is bundled with the board platform/core ( {runtime.platform.path}/libraries ) The library is bundled with the referenced board platform/core The library is bundled with the Arduino IDE ( {runtime.ide.path}/libraries ) This location is only used by Arduino CLI when it's located in the Arduino IDE installation folder","title":"Location Priority"},{"location":"sketch-build-process/#location-priorities-in-arduino-web-editor","text":"The location priorities system works in the same manner in Arduino Web Editor , but its cloud-based nature may make the locations of libraries less obvious. Custom : the imported libraries, shown under the Libraries > Custom tab. These libraries are under /tmp/\\<some number>/custom Pinned : libraries that were associated with the sketch by choosing a specific version from the library's \"Include\" dropdown menu. These libraries are under /tmp/\\<some number>/pinned Note: clicking the \"Include\" button does not result in the library being pinned to the sketch. Platform bundled : these are listed under the Libraries > Default tab, but with \"for \\<architecture name>\" appended to the library name (e.g., \"SPI for AVR\"). These libraries are under /home/builder/.arduino15/packages 1. Board platform bundled 1. Core platform bundled Built-in : The non-platform bundled libraries listed under the Libraries > Default tab. Libraries listed under Libraries > Library Manager . These libraries are under /home/builder/opt/libraries/latest","title":"Location priorities in Arduino Web Editor"},{"location":"sketch-build-process/#compilation","text":"Sketches are compiled by avr-gcc and avr-g++ according to the variables in the boards.txt file of the selected board's platform . The sketch is built in a temporary directory in the system-wide temporary directory (e.g. /tmp on Linux). Files taken as source files for the build process are .S, .c and .cpp files (including the .cpp file generated from the sketch's .ino and .pde files during the sketch pre-processing step). Source files of the target are compiled and output with .o extensions to this build directory, as are the main sketch files and any other source files in the sketch and any source files in any libraries which are #include d in the sketch. Before compiling a source file, an attempt is made to reuse the previously compiled .o file, which speeds up the build process. A special .d (dependency) file provides a list of all other files included by the source. The compile step is skipped if the .o and .d files exist and have timestamps newer than the source and all the dependent files. If the source or any dependent file has been modified, or any error occurs verifying the files, the compiler is run normally, writing a new .o & .d file. After a new board is selected from the IDE's Board menu, all source files are rebuilt on the next compile. These .o files are then linked together into a static library and the main sketch file is linked against this library. Only the parts of the library needed for your sketch are included in the final .hex file, reducing the size of most sketches. The .hex file is the final output of the compilation which is then uploaded to the board. If verbose output during compilation is enabled, the complete command line of each external command executed as part of the build process will be printed in the console.","title":"Compilation"},{"location":"sketch-build-process/#uploading","text":"Sketches are uploaded by avrdude. The upload process is also controlled by variables in the boards and main preferences files. See the Arduino platform specification page for details. If verbose output during upload is enabled, debugging information will be output to the console, including avrdude command lines and verbose output.","title":"Uploading"},{"location":"sketch-specification/","text":"This is the specification for Arduino sketches. The programs that run on Arduino boards are called \"sketches\". This term was inherited from Processing , upon which the Arduino IDE and the core API were based. Sketch folders and files \u00b6 Sketch root folder \u00b6 Because many Arduino sketches only contain a single .ino file, it's easy to think of that file as the sketch. However, it is the folder that is the sketch. The reason is that sketches may consist of multiple code files and the folder is what groups those files into a single program. The sketch root folder name must start with a basic letter ( A - Z or a - z ) or number ( 0 - 9 ), followed by basic letters, numbers, spaces ( ), underscores ( _ ), dots ( . ) and dashes ( - ). The maximum length is 63 characters. Support for sketch folder names starting with a number was added in Arduino IDE 1.8.4. Primary sketch file \u00b6 Every sketch must contain a .ino or .pde file with a file name matching the sketch root folder name. Additional code files \u00b6 Sketches may consist of multiple code files. The following extensions are supported: .ino - Arduino language files. .pde - Alternate extension for Arduino language files. This file extension is also used by Processing sketches. .ino is recommended to avoid confusion. .cpp - C++ files. .c - C Files. .S - Assembly language files. .h - Header files. For information about how each of these files and other parts of the sketch are used during compilation, see the Sketch build process documentation . src subfolder \u00b6 The contents of the src subfolder are compiled recursively. Unlike the code files in the sketch root folder, these files are not shown as tabs in the IDEs. This is useful for files you don't want to expose to the sketch user via the IDE's interface. It can be used to bundle libraries with the sketch in order to make it a self-contained project. Arduino language files under the src folder are not supported. In Arduino IDE 1.6.5-r5 and older, no recursive compilation was done. In Arduino IDE 1.6.6 - 1.6.9, recursive compilation was done of all subfolders of the sketch folder. In Arduino IDE 1.6.10 and newer, recursive compilation is limited to the src subfolder of the sketch folder. data subfolder \u00b6 The data folder is used to add additional files to the sketch, which will not be compiled. Files added to the sketch via the Arduino IDE's Sketch > Add File... are placed in the data folder. The Arduino IDE's File > Save As... only copies the code files in the sketch root folder and the full contents of the data folder, so any non-code files outside the data folder are stripped. Metadata \u00b6 Arduino CLI and Arduino Web Editor use a file named sketch.json, located in the sketch root folder, to store sketch metadata. The cpu key contains the board configuration information. This can be set via arduino-cli board attach or by selecting a board in the Arduino Web Editor while the sketch is open. With this configuration set, it is not necessary to specify the --fqbn or --port flags to the arduino-cli compile or arduino-cli upload commands when compiling or uploading the sketch. The included_libs key defines the library versions the Arduino Web Editor uses when the sketch is compiled. This is Arduino Web Editor specific because all versions of all the Library Manager libraries are pre-installed in Arduino Web Editor, while only one version of each library may be installed when using the other Arduino development software. Secrets \u00b6 Arduino Web Editor has a \"Secret tab\" feature that makes it easy to share sketches without accidentally exposing sensitive data (e.g., passwords or tokens). The Arduino Web Editor automatically generates macros for any identifier in the sketch which starts with SECRET_ and contains all uppercase characters. When you download a sketch from Arduino Web Editor that contains a Secret tab, the empty #define directives for the secrets are in a file named arduino_secrets.h, with an #include directive to that file at the top of the primary sketch file. This is hidden when viewing the sketch in Arduino Web Editor. Documentation \u00b6 Image and text files in common formats which are present in the sketch root folder are displayed in tabs in the Arduino Web Editor. Sketch file structure example \u00b6 Foo |_ arduino_secrets.h |_ Abc.ino |_ Def.cpp |_ Def.h |_ Foo.ino |_ Ghi.c |_ Ghi.h |_ Jkl.h |_ Jkl.S |_ sketch.json |_ data | |_ Schematic.pdf |_ src |_ SomeLib |_ library.properties |_ src |_ SomeLib.h |_ SomeLib.cpp Sketchbook \u00b6 The Arduino IDE provides a \"sketchbook\" folder (analogous to Arduino CLI's \"user directory\"). In addition to being the place where user libraries and manually installed platforms are installed, the sketchbook is a convenient place to store sketches. Sketches in the sketchbook folder appear under the Arduino IDE's File > Sketchbook menu. However, there is no requirement to store sketches in the sketchbook folder. Library/Boards Manager links \u00b6 A URI in a comment in the form http://librarymanager#SEARCH_TERM will open a search for SEARCH_TERM in Library Manager when clicked in the Arduino IDE. A URI in a comment in the form http://boardsmanager#SEARCH_TERM will open a search for SEARCH_TERM in Boards Manager when clicked in the Arduino IDE. This can be used to offer the user an easy way to install dependencies of the sketch. This feature is only available when using the Arduino IDE, so be sure to provide supplementary documentation to help the users of other development software install the sketch dependencies. This feature was added in Arduino IDE 1.6.9. Example \u00b6 // install the Arduino SAMD Boards platform to add support for your MKR WiFi 1010 board // if using the Arduino IDE, click here: http://boardsmanager#SAMD // install the WiFiNINA library via Library Manager // if using the Arduino IDE, click here: http://librarymanager#WiFiNINA #include <WiFiNINA.h> See also \u00b6 Sketch build process documentation Style guide for example sketches","title":"Sketch specification"},{"location":"sketch-specification/#sketch-folders-and-files","text":"","title":"Sketch folders and files"},{"location":"sketch-specification/#sketch-root-folder","text":"Because many Arduino sketches only contain a single .ino file, it's easy to think of that file as the sketch. However, it is the folder that is the sketch. The reason is that sketches may consist of multiple code files and the folder is what groups those files into a single program. The sketch root folder name must start with a basic letter ( A - Z or a - z ) or number ( 0 - 9 ), followed by basic letters, numbers, spaces ( ), underscores ( _ ), dots ( . ) and dashes ( - ). The maximum length is 63 characters. Support for sketch folder names starting with a number was added in Arduino IDE 1.8.4.","title":"Sketch root folder"},{"location":"sketch-specification/#primary-sketch-file","text":"Every sketch must contain a .ino or .pde file with a file name matching the sketch root folder name.","title":"Primary sketch file"},{"location":"sketch-specification/#additional-code-files","text":"Sketches may consist of multiple code files. The following extensions are supported: .ino - Arduino language files. .pde - Alternate extension for Arduino language files. This file extension is also used by Processing sketches. .ino is recommended to avoid confusion. .cpp - C++ files. .c - C Files. .S - Assembly language files. .h - Header files. For information about how each of these files and other parts of the sketch are used during compilation, see the Sketch build process documentation .","title":"Additional code files"},{"location":"sketch-specification/#src-subfolder","text":"The contents of the src subfolder are compiled recursively. Unlike the code files in the sketch root folder, these files are not shown as tabs in the IDEs. This is useful for files you don't want to expose to the sketch user via the IDE's interface. It can be used to bundle libraries with the sketch in order to make it a self-contained project. Arduino language files under the src folder are not supported. In Arduino IDE 1.6.5-r5 and older, no recursive compilation was done. In Arduino IDE 1.6.6 - 1.6.9, recursive compilation was done of all subfolders of the sketch folder. In Arduino IDE 1.6.10 and newer, recursive compilation is limited to the src subfolder of the sketch folder.","title":"src subfolder"},{"location":"sketch-specification/#data-subfolder","text":"The data folder is used to add additional files to the sketch, which will not be compiled. Files added to the sketch via the Arduino IDE's Sketch > Add File... are placed in the data folder. The Arduino IDE's File > Save As... only copies the code files in the sketch root folder and the full contents of the data folder, so any non-code files outside the data folder are stripped.","title":"data subfolder"},{"location":"sketch-specification/#metadata","text":"Arduino CLI and Arduino Web Editor use a file named sketch.json, located in the sketch root folder, to store sketch metadata. The cpu key contains the board configuration information. This can be set via arduino-cli board attach or by selecting a board in the Arduino Web Editor while the sketch is open. With this configuration set, it is not necessary to specify the --fqbn or --port flags to the arduino-cli compile or arduino-cli upload commands when compiling or uploading the sketch. The included_libs key defines the library versions the Arduino Web Editor uses when the sketch is compiled. This is Arduino Web Editor specific because all versions of all the Library Manager libraries are pre-installed in Arduino Web Editor, while only one version of each library may be installed when using the other Arduino development software.","title":"Metadata"},{"location":"sketch-specification/#secrets","text":"Arduino Web Editor has a \"Secret tab\" feature that makes it easy to share sketches without accidentally exposing sensitive data (e.g., passwords or tokens). The Arduino Web Editor automatically generates macros for any identifier in the sketch which starts with SECRET_ and contains all uppercase characters. When you download a sketch from Arduino Web Editor that contains a Secret tab, the empty #define directives for the secrets are in a file named arduino_secrets.h, with an #include directive to that file at the top of the primary sketch file. This is hidden when viewing the sketch in Arduino Web Editor.","title":"Secrets"},{"location":"sketch-specification/#documentation","text":"Image and text files in common formats which are present in the sketch root folder are displayed in tabs in the Arduino Web Editor.","title":"Documentation"},{"location":"sketch-specification/#sketch-file-structure-example","text":"Foo |_ arduino_secrets.h |_ Abc.ino |_ Def.cpp |_ Def.h |_ Foo.ino |_ Ghi.c |_ Ghi.h |_ Jkl.h |_ Jkl.S |_ sketch.json |_ data | |_ Schematic.pdf |_ src |_ SomeLib |_ library.properties |_ src |_ SomeLib.h |_ SomeLib.cpp","title":"Sketch file structure example"},{"location":"sketch-specification/#sketchbook","text":"The Arduino IDE provides a \"sketchbook\" folder (analogous to Arduino CLI's \"user directory\"). In addition to being the place where user libraries and manually installed platforms are installed, the sketchbook is a convenient place to store sketches. Sketches in the sketchbook folder appear under the Arduino IDE's File > Sketchbook menu. However, there is no requirement to store sketches in the sketchbook folder.","title":"Sketchbook"},{"location":"sketch-specification/#libraryboards-manager-links","text":"A URI in a comment in the form http://librarymanager#SEARCH_TERM will open a search for SEARCH_TERM in Library Manager when clicked in the Arduino IDE. A URI in a comment in the form http://boardsmanager#SEARCH_TERM will open a search for SEARCH_TERM in Boards Manager when clicked in the Arduino IDE. This can be used to offer the user an easy way to install dependencies of the sketch. This feature is only available when using the Arduino IDE, so be sure to provide supplementary documentation to help the users of other development software install the sketch dependencies. This feature was added in Arduino IDE 1.6.9.","title":"Library/Boards Manager links"},{"location":"sketch-specification/#example","text":"// install the Arduino SAMD Boards platform to add support for your MKR WiFi 1010 board // if using the Arduino IDE, click here: http://boardsmanager#SAMD // install the WiFiNINA library via Library Manager // if using the Arduino IDE, click here: http://librarymanager#WiFiNINA #include <WiFiNINA.h>","title":"Example"},{"location":"sketch-specification/#see-also","text":"Sketch build process documentation Style guide for example sketches","title":"See also"},{"location":"commands/arduino-cli/","text":"arduino-cli \u00b6 Arduino CLI. Synopsis \u00b6 Arduino Command Line Interface (arduino-cli). Examples \u00b6 arduino-cli <command> [flags...] Options \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") -h, --help help for arduino-cli --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands. arduino-cli burn-bootloader - Upload the bootloader. arduino-cli cache - Arduino cache commands. arduino-cli compile - Compiles Arduino sketches. arduino-cli completion - Generates completion scripts arduino-cli config - Arduino configuration commands. arduino-cli core - Arduino core operations. arduino-cli daemon - Run as a daemon on port 50051 arduino-cli debug - Debug Arduino sketches. arduino-cli lib - Arduino commands about libraries. arduino-cli outdated - Lists cores and libraries that can be upgraded arduino-cli sketch - Arduino CLI sketch commands. arduino-cli update - Updates the index of cores and libraries arduino-cli upgrade - Upgrades installed cores and libraries. arduino-cli upload - Upload Arduino sketches. arduino-cli version - Shows version number of Arduino CLI.","title":"arduino-cli"},{"location":"commands/arduino-cli/#arduino-cli","text":"Arduino CLI.","title":"arduino-cli"},{"location":"commands/arduino-cli/#synopsis","text":"Arduino Command Line Interface (arduino-cli).","title":"Synopsis"},{"location":"commands/arduino-cli/#examples","text":"arduino-cli <command> [flags...]","title":"Examples"},{"location":"commands/arduino-cli/#options","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") -h, --help help for arduino-cli --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options"},{"location":"commands/arduino-cli/#see-also","text":"arduino-cli board - Arduino board commands. arduino-cli burn-bootloader - Upload the bootloader. arduino-cli cache - Arduino cache commands. arduino-cli compile - Compiles Arduino sketches. arduino-cli completion - Generates completion scripts arduino-cli config - Arduino configuration commands. arduino-cli core - Arduino core operations. arduino-cli daemon - Run as a daemon on port 50051 arduino-cli debug - Debug Arduino sketches. arduino-cli lib - Arduino commands about libraries. arduino-cli outdated - Lists cores and libraries that can be upgraded arduino-cli sketch - Arduino CLI sketch commands. arduino-cli update - Updates the index of cores and libraries arduino-cli upgrade - Upgrades installed cores and libraries. arduino-cli upload - Upload Arduino sketches. arduino-cli version - Shows version number of Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board/","text":"arduino-cli board \u00b6 Arduino board commands. Synopsis \u00b6 Arduino board commands. Examples \u00b6 # Lists all connected boards. arduino-cli board list # Attaches a sketch to a board. arduino-cli board attach serial:///dev/ttyACM0 mySketch Options \u00b6 -h, --help help for board Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli board attach - Attaches a sketch to a board. arduino-cli board details - Print details about a board. arduino-cli board list - List connected boards. arduino-cli board listall - List all known boards and their corresponding FQBN.","title":"board"},{"location":"commands/arduino-cli_board/#arduino-cli-board","text":"Arduino board commands.","title":"arduino-cli board"},{"location":"commands/arduino-cli_board/#synopsis","text":"Arduino board commands.","title":"Synopsis"},{"location":"commands/arduino-cli_board/#examples","text":"# Lists all connected boards. arduino-cli board list # Attaches a sketch to a board. arduino-cli board attach serial:///dev/ttyACM0 mySketch","title":"Examples"},{"location":"commands/arduino-cli_board/#options","text":"-h, --help help for board","title":"Options"},{"location":"commands/arduino-cli_board/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli board attach - Attaches a sketch to a board. arduino-cli board details - Print details about a board. arduino-cli board list - List connected boards. arduino-cli board listall - List all known boards and their corresponding FQBN.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_attach/","text":"arduino-cli board attach \u00b6 Attaches a sketch to a board. Synopsis \u00b6 Attaches a sketch to a board. arduino-cli board attach <port>|<FQBN> [sketchPath] [flags] Examples \u00b6 arduino-cli board attach serial:///dev/ttyACM0 arduino-cli board attach serial:///dev/ttyACM0 HelloWorld arduino-cli board attach arduino:samd:mkr1000 Options \u00b6 -h, --help help for attach --timeout string The connected devices search timeout, raise it if your board doesn't show up (e.g. to 10s). (default \"5s\") Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board attach"},{"location":"commands/arduino-cli_board_attach/#arduino-cli-board-attach","text":"Attaches a sketch to a board.","title":"arduino-cli board attach"},{"location":"commands/arduino-cli_board_attach/#synopsis","text":"Attaches a sketch to a board. arduino-cli board attach <port>|<FQBN> [sketchPath] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_attach/#examples","text":"arduino-cli board attach serial:///dev/ttyACM0 arduino-cli board attach serial:///dev/ttyACM0 HelloWorld arduino-cli board attach arduino:samd:mkr1000","title":"Examples"},{"location":"commands/arduino-cli_board_attach/#options","text":"-h, --help help for attach --timeout string The connected devices search timeout, raise it if your board doesn't show up (e.g. to 10s). (default \"5s\")","title":"Options"},{"location":"commands/arduino-cli_board_attach/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_attach/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_details/","text":"arduino-cli board details \u00b6 Print details about a board. Synopsis \u00b6 Show information about a board, in particular if the board has options to be specified in the FQBN. arduino-cli board details -b <FQBN> [flags] Examples \u00b6 arduino-cli board details -b arduino:avr:nano Options \u00b6 -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -f, --full Show full board details -h, --help help for details --list-programmers Show list of available programmers Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board details"},{"location":"commands/arduino-cli_board_details/#arduino-cli-board-details","text":"Print details about a board.","title":"arduino-cli board details"},{"location":"commands/arduino-cli_board_details/#synopsis","text":"Show information about a board, in particular if the board has options to be specified in the FQBN. arduino-cli board details -b <FQBN> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_details/#examples","text":"arduino-cli board details -b arduino:avr:nano","title":"Examples"},{"location":"commands/arduino-cli_board_details/#options","text":"-b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -f, --full Show full board details -h, --help help for details --list-programmers Show list of available programmers","title":"Options"},{"location":"commands/arduino-cli_board_details/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_details/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_list/","text":"arduino-cli board list \u00b6 List connected boards. Synopsis \u00b6 Detects and displays a list of boards connected to the current computer. arduino-cli board list [flags] Examples \u00b6 arduino-cli board list --timeout 10s Options \u00b6 -h, --help help for list --timeout string The connected devices search timeout, raise it if your board doesn't show up (e.g. to 10s). (default \"0s\") -w, --watch Command keeps running and prints list of connected boards whenever there is a change. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board list"},{"location":"commands/arduino-cli_board_list/#arduino-cli-board-list","text":"List connected boards.","title":"arduino-cli board list"},{"location":"commands/arduino-cli_board_list/#synopsis","text":"Detects and displays a list of boards connected to the current computer. arduino-cli board list [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_list/#examples","text":"arduino-cli board list --timeout 10s","title":"Examples"},{"location":"commands/arduino-cli_board_list/#options","text":"-h, --help help for list --timeout string The connected devices search timeout, raise it if your board doesn't show up (e.g. to 10s). (default \"0s\") -w, --watch Command keeps running and prints list of connected boards whenever there is a change.","title":"Options"},{"location":"commands/arduino-cli_board_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_list/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_listall/","text":"arduino-cli board listall \u00b6 List all known boards and their corresponding FQBN. Synopsis \u00b6 List all boards that have the support platform installed. You can search for a specific board if you specify the board name arduino-cli board listall [boardname] [flags] Examples \u00b6 arduino-cli board listall arduino-cli board listall zero Options \u00b6 -h, --help help for listall -a, --show-hidden Show also boards marked as 'hidden' in the platform Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands.","title":"board listall"},{"location":"commands/arduino-cli_board_listall/#arduino-cli-board-listall","text":"List all known boards and their corresponding FQBN.","title":"arduino-cli board listall"},{"location":"commands/arduino-cli_board_listall/#synopsis","text":"List all boards that have the support platform installed. You can search for a specific board if you specify the board name arduino-cli board listall [boardname] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_listall/#examples","text":"arduino-cli board listall arduino-cli board listall zero","title":"Examples"},{"location":"commands/arduino-cli_board_listall/#options","text":"-h, --help help for listall -a, --show-hidden Show also boards marked as 'hidden' in the platform","title":"Options"},{"location":"commands/arduino-cli_board_listall/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_listall/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_burn-bootloader/","text":"arduino-cli burn-bootloader \u00b6 Upload the bootloader. Synopsis \u00b6 Upload the bootloader on the board using an external programmer. arduino-cli burn-bootloader [flags] Examples \u00b6 arduino-cli burn-bootloader -b arduino:avr:uno -P atmel-ice Options \u00b6 -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for burn-bootloader -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 -P, --programmer string Use the specified programmer to upload. -t, --verify Verify uploaded binary after the upload. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"burn-bootloader"},{"location":"commands/arduino-cli_burn-bootloader/#arduino-cli-burn-bootloader","text":"Upload the bootloader.","title":"arduino-cli burn-bootloader"},{"location":"commands/arduino-cli_burn-bootloader/#synopsis","text":"Upload the bootloader on the board using an external programmer. arduino-cli burn-bootloader [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_burn-bootloader/#examples","text":"arduino-cli burn-bootloader -b arduino:avr:uno -P atmel-ice","title":"Examples"},{"location":"commands/arduino-cli_burn-bootloader/#options","text":"-b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for burn-bootloader -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 -P, --programmer string Use the specified programmer to upload. -t, --verify Verify uploaded binary after the upload.","title":"Options"},{"location":"commands/arduino-cli_burn-bootloader/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_burn-bootloader/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_cache/","text":"arduino-cli cache \u00b6 Arduino cache commands. Synopsis \u00b6 Arduino cache commands. Examples \u00b6 # Clean caches. arduino-cli cache clean Options \u00b6 -h, --help help for cache Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli cache clean - Clean arduino cache.","title":"cache"},{"location":"commands/arduino-cli_cache/#arduino-cli-cache","text":"Arduino cache commands.","title":"arduino-cli cache"},{"location":"commands/arduino-cli_cache/#synopsis","text":"Arduino cache commands.","title":"Synopsis"},{"location":"commands/arduino-cli_cache/#examples","text":"# Clean caches. arduino-cli cache clean","title":"Examples"},{"location":"commands/arduino-cli_cache/#options","text":"-h, --help help for cache","title":"Options"},{"location":"commands/arduino-cli_cache/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_cache/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli cache clean - Clean arduino cache.","title":"SEE ALSO"},{"location":"commands/arduino-cli_cache_clean/","text":"arduino-cli cache clean \u00b6 Clean arduino cache. Synopsis \u00b6 Clean the files i.e. ~/arduino15/staging in Linux. arduino-cli cache clean [flags] Examples \u00b6 arduino-cli cache clean Options \u00b6 -h, --help help for clean Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli cache - Arduino cache commands.","title":"cache clean"},{"location":"commands/arduino-cli_cache_clean/#arduino-cli-cache-clean","text":"Clean arduino cache.","title":"arduino-cli cache clean"},{"location":"commands/arduino-cli_cache_clean/#synopsis","text":"Clean the files i.e. ~/arduino15/staging in Linux. arduino-cli cache clean [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_cache_clean/#examples","text":"arduino-cli cache clean","title":"Examples"},{"location":"commands/arduino-cli_cache_clean/#options","text":"-h, --help help for clean","title":"Options"},{"location":"commands/arduino-cli_cache_clean/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_cache_clean/#see-also","text":"arduino-cli cache - Arduino cache commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_compile/","text":"arduino-cli compile \u00b6 Compiles Arduino sketches. Synopsis \u00b6 Compiles Arduino sketches. arduino-cli compile [flags] Examples \u00b6 arduino-cli compile -b arduino:avr:uno /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=\\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=-DPIN=2 \\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property build.extra_flags=-DPIN=2 --build-property \"compiler.cpp.extra_flags=\\\"-DSSID=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch Options \u00b6 --build-cache-path string Builds of 'core.a' are saved into this path to be cached and reused. --build-path string Path where to save compiled files. If omitted, a directory will be created in the default temporary path of your OS. --build-property stringArray Override a build property with a custom value. Can be used multiple times for multiple properties. --clean Optional, cleanup the build folder and do not use any cached build. -e, --export-binaries If set built binaries will be exported to the sketch folder. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for compile --libraries strings List of custom libraries paths separated by commas. Or can be used multiple times for multiple libraries paths. --optimize-for-debug Optional, optimize compile output for debugging, rather than for release. --output-dir string Save build artifacts in this directory. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 --preprocess Print preprocessed code to stdout instead of compiling. -P, --programmer string Optional, use the specified programmer to upload. --quiet Optional, suppresses almost every output. --show-properties Show all build properties used instead of compiling. -u, --upload Upload the binary after the compilation. -t, --verify Verify uploaded binary after the upload. --vid-pid string When specified, VID/PID specific build properties are used, if board supports them. --warnings string Optional, can be \"none\", \"default\", \"more\" and \"all\". Defaults to \"none\". Used to tell gcc which warning level to use (-W flag). (default \"none\") Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"compile"},{"location":"commands/arduino-cli_compile/#arduino-cli-compile","text":"Compiles Arduino sketches.","title":"arduino-cli compile"},{"location":"commands/arduino-cli_compile/#synopsis","text":"Compiles Arduino sketches. arduino-cli compile [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_compile/#examples","text":"arduino-cli compile -b arduino:avr:uno /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=\\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property \"build.extra_flags=-DPIN=2 \\\"-DMY_DEFINE=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch arduino-cli compile -b arduino:avr:uno --build-property build.extra_flags=-DPIN=2 --build-property \"compiler.cpp.extra_flags=\\\"-DSSID=\\\"hello world\\\"\\\"\" /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_compile/#options","text":"--build-cache-path string Builds of 'core.a' are saved into this path to be cached and reused. --build-path string Path where to save compiled files. If omitted, a directory will be created in the default temporary path of your OS. --build-property stringArray Override a build property with a custom value. Can be used multiple times for multiple properties. --clean Optional, cleanup the build folder and do not use any cached build. -e, --export-binaries If set built binaries will be exported to the sketch folder. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for compile --libraries strings List of custom libraries paths separated by commas. Or can be used multiple times for multiple libraries paths. --optimize-for-debug Optional, optimize compile output for debugging, rather than for release. --output-dir string Save build artifacts in this directory. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 --preprocess Print preprocessed code to stdout instead of compiling. -P, --programmer string Optional, use the specified programmer to upload. --quiet Optional, suppresses almost every output. --show-properties Show all build properties used instead of compiling. -u, --upload Upload the binary after the compilation. -t, --verify Verify uploaded binary after the upload. --vid-pid string When specified, VID/PID specific build properties are used, if board supports them. --warnings string Optional, can be \"none\", \"default\", \"more\" and \"all\". Defaults to \"none\". Used to tell gcc which warning level to use (-W flag). (default \"none\")","title":"Options"},{"location":"commands/arduino-cli_compile/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_compile/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_completion/","text":"arduino-cli completion \u00b6 Generates completion scripts Synopsis \u00b6 Generates completion scripts for various shells arduino-cli completion [bash|zsh|fish] [--no-descriptions] [flags] Examples \u00b6 arduino-cli completion bash > completion.sh source completion.sh Options \u00b6 -h, --help help for completion --no-descriptions Disable completion description for shells that support it Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"completion"},{"location":"commands/arduino-cli_completion/#arduino-cli-completion","text":"Generates completion scripts","title":"arduino-cli completion"},{"location":"commands/arduino-cli_completion/#synopsis","text":"Generates completion scripts for various shells arduino-cli completion [bash|zsh|fish] [--no-descriptions] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_completion/#examples","text":"arduino-cli completion bash > completion.sh source completion.sh","title":"Examples"},{"location":"commands/arduino-cli_completion/#options","text":"-h, --help help for completion --no-descriptions Disable completion description for shells that support it","title":"Options"},{"location":"commands/arduino-cli_completion/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_completion/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config/","text":"arduino-cli config \u00b6 Arduino configuration commands. Synopsis \u00b6 Arduino configuration commands. Examples \u00b6 arduino-cli config init Options \u00b6 -h, --help help for config Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli config dump - Prints the current configuration arduino-cli config init - Writes current configuration to a configuration file.","title":"config"},{"location":"commands/arduino-cli_config/#arduino-cli-config","text":"Arduino configuration commands.","title":"arduino-cli config"},{"location":"commands/arduino-cli_config/#synopsis","text":"Arduino configuration commands.","title":"Synopsis"},{"location":"commands/arduino-cli_config/#examples","text":"arduino-cli config init","title":"Examples"},{"location":"commands/arduino-cli_config/#options","text":"-h, --help help for config","title":"Options"},{"location":"commands/arduino-cli_config/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli config dump - Prints the current configuration arduino-cli config init - Writes current configuration to a configuration file.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_dump/","text":"arduino-cli config dump \u00b6 Prints the current configuration Synopsis \u00b6 Prints the current configuration. arduino-cli config dump [flags] Examples \u00b6 arduino-cli config dump Options \u00b6 -h, --help help for dump Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config dump"},{"location":"commands/arduino-cli_config_dump/#arduino-cli-config-dump","text":"Prints the current configuration","title":"arduino-cli config dump"},{"location":"commands/arduino-cli_config_dump/#synopsis","text":"Prints the current configuration. arduino-cli config dump [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_dump/#examples","text":"arduino-cli config dump","title":"Examples"},{"location":"commands/arduino-cli_config_dump/#options","text":"-h, --help help for dump","title":"Options"},{"location":"commands/arduino-cli_config_dump/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_dump/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_init/","text":"arduino-cli config init \u00b6 Writes current configuration to a configuration file. Synopsis \u00b6 Creates or updates the configuration file in the data directory or custom directory with the current configuration settings. arduino-cli config init [flags] Examples \u00b6 # Writes current configuration to the configuration file in the data directory. arduino-cli config init arduino-cli config init --dest-dir /home/user/MyDirectory arduino-cli config init --dest-file /home/user/MyDirectory/my_settings.yaml Options \u00b6 --dest-dir string Sets where to save the configuration file. --dest-file string Sets where to save the configuration file. -h, --help help for init --overwrite Overwrite existing config file. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli config - Arduino configuration commands.","title":"config init"},{"location":"commands/arduino-cli_config_init/#arduino-cli-config-init","text":"Writes current configuration to a configuration file.","title":"arduino-cli config init"},{"location":"commands/arduino-cli_config_init/#synopsis","text":"Creates or updates the configuration file in the data directory or custom directory with the current configuration settings. arduino-cli config init [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_init/#examples","text":"# Writes current configuration to the configuration file in the data directory. arduino-cli config init arduino-cli config init --dest-dir /home/user/MyDirectory arduino-cli config init --dest-file /home/user/MyDirectory/my_settings.yaml","title":"Examples"},{"location":"commands/arduino-cli_config_init/#options","text":"--dest-dir string Sets where to save the configuration file. --dest-file string Sets where to save the configuration file. -h, --help help for init --overwrite Overwrite existing config file.","title":"Options"},{"location":"commands/arduino-cli_config_init/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_init/#see-also","text":"arduino-cli config - Arduino configuration commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core/","text":"arduino-cli core \u00b6 Arduino core operations. Synopsis \u00b6 Arduino core operations. Examples \u00b6 arduino-cli core update-index Options \u00b6 -h, --help help for core Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli core download - Downloads one or more cores and corresponding tool dependencies. arduino-cli core install - Installs one or more cores and corresponding tool dependencies. arduino-cli core list - Shows the list of installed platforms. arduino-cli core search - Search for a core in Boards Manager. arduino-cli core uninstall - Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core update-index - Updates the index of cores. arduino-cli core upgrade - Upgrades one or all installed platforms to the latest version.","title":"core"},{"location":"commands/arduino-cli_core/#arduino-cli-core","text":"Arduino core operations.","title":"arduino-cli core"},{"location":"commands/arduino-cli_core/#synopsis","text":"Arduino core operations.","title":"Synopsis"},{"location":"commands/arduino-cli_core/#examples","text":"arduino-cli core update-index","title":"Examples"},{"location":"commands/arduino-cli_core/#options","text":"-h, --help help for core","title":"Options"},{"location":"commands/arduino-cli_core/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli core download - Downloads one or more cores and corresponding tool dependencies. arduino-cli core install - Installs one or more cores and corresponding tool dependencies. arduino-cli core list - Shows the list of installed platforms. arduino-cli core search - Search for a core in Boards Manager. arduino-cli core uninstall - Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core update-index - Updates the index of cores. arduino-cli core upgrade - Upgrades one or all installed platforms to the latest version.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_download/","text":"arduino-cli core download \u00b6 Downloads one or more cores and corresponding tool dependencies. Synopsis \u00b6 Downloads one or more cores and corresponding tool dependencies. arduino-cli core download [PACKAGER:ARCH[@VERSION]](S) [flags] Examples \u00b6 arduino-cli core download arduino:samd # to download the latest version of Arduino SAMD core. arduino-cli core download arduino:samd@1.6.9 # for a specific version (in this case 1.6.9). Options \u00b6 -h, --help help for download Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core download"},{"location":"commands/arduino-cli_core_download/#arduino-cli-core-download","text":"Downloads one or more cores and corresponding tool dependencies.","title":"arduino-cli core download"},{"location":"commands/arduino-cli_core_download/#synopsis","text":"Downloads one or more cores and corresponding tool dependencies. arduino-cli core download [PACKAGER:ARCH[@VERSION]](S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_download/#examples","text":"arduino-cli core download arduino:samd # to download the latest version of Arduino SAMD core. arduino-cli core download arduino:samd@1.6.9 # for a specific version (in this case 1.6.9).","title":"Examples"},{"location":"commands/arduino-cli_core_download/#options","text":"-h, --help help for download","title":"Options"},{"location":"commands/arduino-cli_core_download/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_download/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_install/","text":"arduino-cli core install \u00b6 Installs one or more cores and corresponding tool dependencies. Synopsis \u00b6 Installs one or more cores and corresponding tool dependencies. arduino-cli core install PACKAGER:ARCH[@VERSION] ... [flags] Examples \u00b6 # download the latest version of Arduino SAMD core. arduino-cli core install arduino:samd # download a specific version (in this case 1.6.9). arduino-cli core install arduino:samd@1.6.9 Options \u00b6 -h, --help help for install --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core install"},{"location":"commands/arduino-cli_core_install/#arduino-cli-core-install","text":"Installs one or more cores and corresponding tool dependencies.","title":"arduino-cli core install"},{"location":"commands/arduino-cli_core_install/#synopsis","text":"Installs one or more cores and corresponding tool dependencies. arduino-cli core install PACKAGER:ARCH[@VERSION] ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_install/#examples","text":"# download the latest version of Arduino SAMD core. arduino-cli core install arduino:samd # download a specific version (in this case 1.6.9). arduino-cli core install arduino:samd@1.6.9","title":"Examples"},{"location":"commands/arduino-cli_core_install/#options","text":"-h, --help help for install --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively).","title":"Options"},{"location":"commands/arduino-cli_core_install/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_install/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_list/","text":"arduino-cli core list \u00b6 Shows the list of installed platforms. Synopsis \u00b6 Shows the list of installed platforms. arduino-cli core list [flags] Examples \u00b6 arduino-cli core list Options \u00b6 -h, --help help for list --updatable List updatable platforms. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core list"},{"location":"commands/arduino-cli_core_list/#arduino-cli-core-list","text":"Shows the list of installed platforms.","title":"arduino-cli core list"},{"location":"commands/arduino-cli_core_list/#synopsis","text":"Shows the list of installed platforms. arduino-cli core list [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_list/#examples","text":"arduino-cli core list","title":"Examples"},{"location":"commands/arduino-cli_core_list/#options","text":"-h, --help help for list --updatable List updatable platforms.","title":"Options"},{"location":"commands/arduino-cli_core_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_list/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_search/","text":"arduino-cli core search \u00b6 Search for a core in Boards Manager. Synopsis \u00b6 Search for a core in Boards Manager using the specified keywords. arduino-cli core search <keywords...> [flags] Examples \u00b6 arduino-cli core search MKRZero -a -v Options \u00b6 -a, --all Show all available core versions. -h, --help help for search Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core search"},{"location":"commands/arduino-cli_core_search/#arduino-cli-core-search","text":"Search for a core in Boards Manager.","title":"arduino-cli core search"},{"location":"commands/arduino-cli_core_search/#synopsis","text":"Search for a core in Boards Manager using the specified keywords. arduino-cli core search <keywords...> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_search/#examples","text":"arduino-cli core search MKRZero -a -v","title":"Examples"},{"location":"commands/arduino-cli_core_search/#options","text":"-a, --all Show all available core versions. -h, --help help for search","title":"Options"},{"location":"commands/arduino-cli_core_search/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_search/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_uninstall/","text":"arduino-cli core uninstall \u00b6 Uninstalls one or more cores and corresponding tool dependencies if no longer used. Synopsis \u00b6 Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core uninstall PACKAGER:ARCH ... [flags] Examples \u00b6 arduino-cli core uninstall arduino:samd Options \u00b6 -h, --help help for uninstall Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core uninstall"},{"location":"commands/arduino-cli_core_uninstall/#arduino-cli-core-uninstall","text":"Uninstalls one or more cores and corresponding tool dependencies if no longer used.","title":"arduino-cli core uninstall"},{"location":"commands/arduino-cli_core_uninstall/#synopsis","text":"Uninstalls one or more cores and corresponding tool dependencies if no longer used. arduino-cli core uninstall PACKAGER:ARCH ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_uninstall/#examples","text":"arduino-cli core uninstall arduino:samd","title":"Examples"},{"location":"commands/arduino-cli_core_uninstall/#options","text":"-h, --help help for uninstall","title":"Options"},{"location":"commands/arduino-cli_core_uninstall/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_uninstall/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_update-index/","text":"arduino-cli core update-index \u00b6 Updates the index of cores. Synopsis \u00b6 Updates the index of cores to the latest version. arduino-cli core update-index [flags] Examples \u00b6 arduino-cli core update-index Options \u00b6 -h, --help help for update-index Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core update-index"},{"location":"commands/arduino-cli_core_update-index/#arduino-cli-core-update-index","text":"Updates the index of cores.","title":"arduino-cli core update-index"},{"location":"commands/arduino-cli_core_update-index/#synopsis","text":"Updates the index of cores to the latest version. arduino-cli core update-index [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_update-index/#examples","text":"arduino-cli core update-index","title":"Examples"},{"location":"commands/arduino-cli_core_update-index/#options","text":"-h, --help help for update-index","title":"Options"},{"location":"commands/arduino-cli_core_update-index/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_update-index/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_upgrade/","text":"arduino-cli core upgrade \u00b6 Upgrades one or all installed platforms to the latest version. Synopsis \u00b6 Upgrades one or all installed platforms to the latest version. arduino-cli core upgrade [PACKAGER:ARCH] ... [flags] Examples \u00b6 # upgrade everything to the latest version arduino-cli core upgrade # upgrade arduino:samd to the latest version arduino-cli core upgrade arduino:samd Options \u00b6 -h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino core operations.","title":"core upgrade"},{"location":"commands/arduino-cli_core_upgrade/#arduino-cli-core-upgrade","text":"Upgrades one or all installed platforms to the latest version.","title":"arduino-cli core upgrade"},{"location":"commands/arduino-cli_core_upgrade/#synopsis","text":"Upgrades one or all installed platforms to the latest version. arduino-cli core upgrade [PACKAGER:ARCH] ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_upgrade/#examples","text":"# upgrade everything to the latest version arduino-cli core upgrade # upgrade arduino:samd to the latest version arduino-cli core upgrade arduino:samd","title":"Examples"},{"location":"commands/arduino-cli_core_upgrade/#options","text":"-h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively).","title":"Options"},{"location":"commands/arduino-cli_core_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_upgrade/#see-also","text":"arduino-cli core - Arduino core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_daemon/","text":"arduino-cli daemon \u00b6 Run as a daemon on port 50051 Synopsis \u00b6 Running as a daemon the initialization of cores and libraries is done only once. arduino-cli daemon [flags] Examples \u00b6 arduino-cli daemon Options \u00b6 --daemonize Do not terminate daemon process if the parent process dies -h, --help help for daemon --port string The TCP port the daemon will listen to Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"daemon"},{"location":"commands/arduino-cli_daemon/#arduino-cli-daemon","text":"Run as a daemon on port 50051","title":"arduino-cli daemon"},{"location":"commands/arduino-cli_daemon/#synopsis","text":"Running as a daemon the initialization of cores and libraries is done only once. arduino-cli daemon [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_daemon/#examples","text":"arduino-cli daemon","title":"Examples"},{"location":"commands/arduino-cli_daemon/#options","text":"--daemonize Do not terminate daemon process if the parent process dies -h, --help help for daemon --port string The TCP port the daemon will listen to","title":"Options"},{"location":"commands/arduino-cli_daemon/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_daemon/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_debug/","text":"arduino-cli debug \u00b6 Debug Arduino sketches. Synopsis \u00b6 Debug Arduino sketches. (this command opens an interactive gdb session) arduino-cli debug [flags] Examples \u00b6 arduino-cli debug -b arduino:samd:mkr1000 -P atmel_ice /home/user/Arduino/MySketch Options \u00b6 -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for debug -I, --info Show metadata about the debug session instead of starting the debugger. --input-dir string Directory containing binaries for debug. --interpreter string Debug interpreter e.g.: console, mi, mi1, mi2, mi3 (default \"console\") -p, --port string Debug port, e.g.: COM10 or /dev/ttyACM0 -P, --programmer string Programmer to use for debugging Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"debug"},{"location":"commands/arduino-cli_debug/#arduino-cli-debug","text":"Debug Arduino sketches.","title":"arduino-cli debug"},{"location":"commands/arduino-cli_debug/#synopsis","text":"Debug Arduino sketches. (this command opens an interactive gdb session) arduino-cli debug [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_debug/#examples","text":"arduino-cli debug -b arduino:samd:mkr1000 -P atmel_ice /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_debug/#options","text":"-b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for debug -I, --info Show metadata about the debug session instead of starting the debugger. --input-dir string Directory containing binaries for debug. --interpreter string Debug interpreter e.g.: console, mi, mi1, mi2, mi3 (default \"console\") -p, --port string Debug port, e.g.: COM10 or /dev/ttyACM0 -P, --programmer string Programmer to use for debugging","title":"Options"},{"location":"commands/arduino-cli_debug/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_debug/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib/","text":"arduino-cli lib \u00b6 Arduino commands about libraries. Synopsis \u00b6 Arduino commands about libraries. Examples \u00b6 arduino-cli lib install AudioZero arduino-cli lib update-index Options \u00b6 -h, --help help for lib Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli lib deps - Check dependencies status for the specified library. arduino-cli lib download - Downloads one or more libraries without installing them. arduino-cli lib examples - Shows the list of the examples for libraries. arduino-cli lib install - Installs one or more specified libraries into the system. arduino-cli lib list - Shows a list of installed libraries. arduino-cli lib search - Searches for one or more libraries data. arduino-cli lib uninstall - Uninstalls one or more libraries. arduino-cli lib update-index - Updates the libraries index. arduino-cli lib upgrade - Upgrades installed libraries.","title":"lib"},{"location":"commands/arduino-cli_lib/#arduino-cli-lib","text":"Arduino commands about libraries.","title":"arduino-cli lib"},{"location":"commands/arduino-cli_lib/#synopsis","text":"Arduino commands about libraries.","title":"Synopsis"},{"location":"commands/arduino-cli_lib/#examples","text":"arduino-cli lib install AudioZero arduino-cli lib update-index","title":"Examples"},{"location":"commands/arduino-cli_lib/#options","text":"-h, --help help for lib","title":"Options"},{"location":"commands/arduino-cli_lib/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli lib deps - Check dependencies status for the specified library. arduino-cli lib download - Downloads one or more libraries without installing them. arduino-cli lib examples - Shows the list of the examples for libraries. arduino-cli lib install - Installs one or more specified libraries into the system. arduino-cli lib list - Shows a list of installed libraries. arduino-cli lib search - Searches for one or more libraries data. arduino-cli lib uninstall - Uninstalls one or more libraries. arduino-cli lib update-index - Updates the libraries index. arduino-cli lib upgrade - Upgrades installed libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_deps/","text":"arduino-cli lib deps \u00b6 Check dependencies status for the specified library. Synopsis \u00b6 Check dependencies status for the specified library. arduino-cli lib deps LIBRARY[@VERSION_NUMBER](S) [flags] Examples \u00b6 arduino-cli lib deps AudioZero # for the latest version. arduino-cli lib deps AudioZero@1.0.0 # for the specific version. Options \u00b6 -h, --help help for deps Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib deps"},{"location":"commands/arduino-cli_lib_deps/#arduino-cli-lib-deps","text":"Check dependencies status for the specified library.","title":"arduino-cli lib deps"},{"location":"commands/arduino-cli_lib_deps/#synopsis","text":"Check dependencies status for the specified library. arduino-cli lib deps LIBRARY[@VERSION_NUMBER](S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_deps/#examples","text":"arduino-cli lib deps AudioZero # for the latest version. arduino-cli lib deps AudioZero@1.0.0 # for the specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_deps/#options","text":"-h, --help help for deps","title":"Options"},{"location":"commands/arduino-cli_lib_deps/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_deps/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_download/","text":"arduino-cli lib download \u00b6 Downloads one or more libraries without installing them. Synopsis \u00b6 Downloads one or more libraries without installing them. arduino-cli lib download [LIBRARY_NAME(S)] [flags] Examples \u00b6 arduino-cli lib download AudioZero # for the latest version. arduino-cli lib download AudioZero@1.0.0 # for a specific version. Options \u00b6 -h, --help help for download Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib download"},{"location":"commands/arduino-cli_lib_download/#arduino-cli-lib-download","text":"Downloads one or more libraries without installing them.","title":"arduino-cli lib download"},{"location":"commands/arduino-cli_lib_download/#synopsis","text":"Downloads one or more libraries without installing them. arduino-cli lib download [LIBRARY_NAME(S)] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_download/#examples","text":"arduino-cli lib download AudioZero # for the latest version. arduino-cli lib download AudioZero@1.0.0 # for a specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_download/#options","text":"-h, --help help for download","title":"Options"},{"location":"commands/arduino-cli_lib_download/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_download/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_examples/","text":"arduino-cli lib examples \u00b6 Shows the list of the examples for libraries. Synopsis \u00b6 Shows the list of the examples for libraries. A name may be given as argument to search a specific library. arduino-cli lib examples [LIBRARY_NAME] [flags] Examples \u00b6 arduino-cli lib examples Wire Options \u00b6 -b, --fqbn string Show libraries for the specified board FQBN. -h, --help help for examples Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"Arduino cli lib examples"},{"location":"commands/arduino-cli_lib_examples/#arduino-cli-lib-examples","text":"Shows the list of the examples for libraries.","title":"arduino-cli lib examples"},{"location":"commands/arduino-cli_lib_examples/#synopsis","text":"Shows the list of the examples for libraries. A name may be given as argument to search a specific library. arduino-cli lib examples [LIBRARY_NAME] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_examples/#examples","text":"arduino-cli lib examples Wire","title":"Examples"},{"location":"commands/arduino-cli_lib_examples/#options","text":"-b, --fqbn string Show libraries for the specified board FQBN. -h, --help help for examples","title":"Options"},{"location":"commands/arduino-cli_lib_examples/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_examples/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_install/","text":"arduino-cli lib install \u00b6 Installs one or more specified libraries into the system. Synopsis \u00b6 Installs one or more specified libraries into the system. arduino-cli lib install LIBRARY[@VERSION_NUMBER](S) [flags] Examples \u00b6 arduino-cli lib install AudioZero # for the latest version. arduino-cli lib install AudioZero@1.0.0 # for the specific version. Options \u00b6 --git-url Enter git url for libraries hosted on repositories -h, --help help for install --no-deps Do not install dependencies. --zip-path Enter a path to zip file Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib install"},{"location":"commands/arduino-cli_lib_install/#arduino-cli-lib-install","text":"Installs one or more specified libraries into the system.","title":"arduino-cli lib install"},{"location":"commands/arduino-cli_lib_install/#synopsis","text":"Installs one or more specified libraries into the system. arduino-cli lib install LIBRARY[@VERSION_NUMBER](S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_install/#examples","text":"arduino-cli lib install AudioZero # for the latest version. arduino-cli lib install AudioZero@1.0.0 # for the specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_install/#options","text":"--git-url Enter git url for libraries hosted on repositories -h, --help help for install --no-deps Do not install dependencies. --zip-path Enter a path to zip file","title":"Options"},{"location":"commands/arduino-cli_lib_install/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_install/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_list/","text":"arduino-cli lib list \u00b6 Shows a list of installed libraries. Synopsis \u00b6 Shows a list of installed libraries. If the LIBNAME parameter is specified the listing is limited to that specific library. By default the libraries provided as built-in by platforms/core are not listed, they can be listed by adding the --all flag. arduino-cli lib list [LIBNAME] [flags] Examples \u00b6 arduino-cli lib list Options \u00b6 --all Include built-in libraries (from platforms and IDE) in listing. -b, --fqbn string Show libraries for the specified board FQBN. -h, --help help for list --updatable List updatable libraries. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib list"},{"location":"commands/arduino-cli_lib_list/#arduino-cli-lib-list","text":"Shows a list of installed libraries.","title":"arduino-cli lib list"},{"location":"commands/arduino-cli_lib_list/#synopsis","text":"Shows a list of installed libraries. If the LIBNAME parameter is specified the listing is limited to that specific library. By default the libraries provided as built-in by platforms/core are not listed, they can be listed by adding the --all flag. arduino-cli lib list [LIBNAME] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_list/#examples","text":"arduino-cli lib list","title":"Examples"},{"location":"commands/arduino-cli_lib_list/#options","text":"--all Include built-in libraries (from platforms and IDE) in listing. -b, --fqbn string Show libraries for the specified board FQBN. -h, --help help for list --updatable List updatable libraries.","title":"Options"},{"location":"commands/arduino-cli_lib_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_list/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_search/","text":"arduino-cli lib search \u00b6 Searches for one or more libraries data. Synopsis \u00b6 Search for one or more libraries data (case insensitive search). arduino-cli lib search [LIBRARY_NAME] [flags] Examples \u00b6 arduino-cli lib search audio Options \u00b6 -h, --help help for search --names Show library names only. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib search"},{"location":"commands/arduino-cli_lib_search/#arduino-cli-lib-search","text":"Searches for one or more libraries data.","title":"arduino-cli lib search"},{"location":"commands/arduino-cli_lib_search/#synopsis","text":"Search for one or more libraries data (case insensitive search). arduino-cli lib search [LIBRARY_NAME] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_search/#examples","text":"arduino-cli lib search audio","title":"Examples"},{"location":"commands/arduino-cli_lib_search/#options","text":"-h, --help help for search --names Show library names only.","title":"Options"},{"location":"commands/arduino-cli_lib_search/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_search/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_uninstall/","text":"arduino-cli lib uninstall \u00b6 Uninstalls one or more libraries. Synopsis \u00b6 Uninstalls one or more libraries. arduino-cli lib uninstall LIBRARY_NAME(S) [flags] Examples \u00b6 arduino-cli lib uninstall AudioZero Options \u00b6 -h, --help help for uninstall Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib uninstall"},{"location":"commands/arduino-cli_lib_uninstall/#arduino-cli-lib-uninstall","text":"Uninstalls one or more libraries.","title":"arduino-cli lib uninstall"},{"location":"commands/arduino-cli_lib_uninstall/#synopsis","text":"Uninstalls one or more libraries. arduino-cli lib uninstall LIBRARY_NAME(S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_uninstall/#examples","text":"arduino-cli lib uninstall AudioZero","title":"Examples"},{"location":"commands/arduino-cli_lib_uninstall/#options","text":"-h, --help help for uninstall","title":"Options"},{"location":"commands/arduino-cli_lib_uninstall/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_uninstall/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_update-index/","text":"arduino-cli lib update-index \u00b6 Updates the libraries index. Synopsis \u00b6 Updates the libraries index to the latest version. arduino-cli lib update-index [flags] Examples \u00b6 arduino-cli lib update-index Options \u00b6 -h, --help help for update-index Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib update-index"},{"location":"commands/arduino-cli_lib_update-index/#arduino-cli-lib-update-index","text":"Updates the libraries index.","title":"arduino-cli lib update-index"},{"location":"commands/arduino-cli_lib_update-index/#synopsis","text":"Updates the libraries index to the latest version. arduino-cli lib update-index [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_update-index/#examples","text":"arduino-cli lib update-index","title":"Examples"},{"location":"commands/arduino-cli_lib_update-index/#options","text":"-h, --help help for update-index","title":"Options"},{"location":"commands/arduino-cli_lib_update-index/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_update-index/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_upgrade/","text":"arduino-cli lib upgrade \u00b6 Upgrades installed libraries. Synopsis \u00b6 This command upgrades an installed library to the latest available version. Multiple libraries can be passed separated by a space. If no arguments are provided, the command will upgrade all the installed libraries where an update is available. arduino-cli lib upgrade [flags] Examples \u00b6 arduino-cli lib upgrade arduino-cli lib upgrade Audio arduino-cli lib upgrade Audio ArduinoJson Options \u00b6 -h, --help help for upgrade Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries.","title":"lib upgrade"},{"location":"commands/arduino-cli_lib_upgrade/#arduino-cli-lib-upgrade","text":"Upgrades installed libraries.","title":"arduino-cli lib upgrade"},{"location":"commands/arduino-cli_lib_upgrade/#synopsis","text":"This command upgrades an installed library to the latest available version. Multiple libraries can be passed separated by a space. If no arguments are provided, the command will upgrade all the installed libraries where an update is available. arduino-cli lib upgrade [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_upgrade/#examples","text":"arduino-cli lib upgrade arduino-cli lib upgrade Audio arduino-cli lib upgrade Audio ArduinoJson","title":"Examples"},{"location":"commands/arduino-cli_lib_upgrade/#options","text":"-h, --help help for upgrade","title":"Options"},{"location":"commands/arduino-cli_lib_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_upgrade/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_outdated/","text":"arduino-cli outdated \u00b6 Lists cores and libraries that can be upgraded Synopsis \u00b6 This commands shows a list of installed cores and/or libraries that can be upgraded. If nothing needs to be updated the output is empty. arduino-cli outdated [flags] Examples \u00b6 arduino-cli outdated Options \u00b6 -h, --help help for outdated Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"outdated"},{"location":"commands/arduino-cli_outdated/#arduino-cli-outdated","text":"Lists cores and libraries that can be upgraded","title":"arduino-cli outdated"},{"location":"commands/arduino-cli_outdated/#synopsis","text":"This commands shows a list of installed cores and/or libraries that can be upgraded. If nothing needs to be updated the output is empty. arduino-cli outdated [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_outdated/#examples","text":"arduino-cli outdated","title":"Examples"},{"location":"commands/arduino-cli_outdated/#options","text":"-h, --help help for outdated","title":"Options"},{"location":"commands/arduino-cli_outdated/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_outdated/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch/","text":"arduino-cli sketch \u00b6 Arduino CLI sketch commands. Synopsis \u00b6 Arduino CLI sketch commands. Examples \u00b6 arduino-cli sketch new MySketch Options \u00b6 -h, --help help for sketch Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli sketch archive - Creates a zip file containing all sketch files. arduino-cli sketch new - Create a new Sketch","title":"sketch"},{"location":"commands/arduino-cli_sketch/#arduino-cli-sketch","text":"Arduino CLI sketch commands.","title":"arduino-cli sketch"},{"location":"commands/arduino-cli_sketch/#synopsis","text":"Arduino CLI sketch commands.","title":"Synopsis"},{"location":"commands/arduino-cli_sketch/#examples","text":"arduino-cli sketch new MySketch","title":"Examples"},{"location":"commands/arduino-cli_sketch/#options","text":"-h, --help help for sketch","title":"Options"},{"location":"commands/arduino-cli_sketch/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli sketch archive - Creates a zip file containing all sketch files. arduino-cli sketch new - Create a new Sketch","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch_archive/","text":"arduino-cli sketch archive \u00b6 Creates a zip file containing all sketch files. Synopsis \u00b6 Creates a zip file containing all sketch files. arduino-cli sketch archive <sketchPath> <archivePath> [flags] Examples \u00b6 arduino-cli archive arduino-cli archive . arduino-cli archive . MySketchArchive.zip arduino-cli archive /home/user/Arduino/MySketch arduino-cli archive /home/user/Arduino/MySketch /home/user/MySketchArchive.zip Options \u00b6 -h, --help help for archive --include-build-dir Includes build directory in the archive. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli sketch - Arduino CLI sketch commands.","title":"Arduino cli sketch archive"},{"location":"commands/arduino-cli_sketch_archive/#arduino-cli-sketch-archive","text":"Creates a zip file containing all sketch files.","title":"arduino-cli sketch archive"},{"location":"commands/arduino-cli_sketch_archive/#synopsis","text":"Creates a zip file containing all sketch files. arduino-cli sketch archive <sketchPath> <archivePath> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_sketch_archive/#examples","text":"arduino-cli archive arduino-cli archive . arduino-cli archive . MySketchArchive.zip arduino-cli archive /home/user/Arduino/MySketch arduino-cli archive /home/user/Arduino/MySketch /home/user/MySketchArchive.zip","title":"Examples"},{"location":"commands/arduino-cli_sketch_archive/#options","text":"-h, --help help for archive --include-build-dir Includes build directory in the archive.","title":"Options"},{"location":"commands/arduino-cli_sketch_archive/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch_archive/#see-also","text":"arduino-cli sketch - Arduino CLI sketch commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch_new/","text":"arduino-cli sketch new \u00b6 Create a new Sketch Synopsis \u00b6 Create a new Sketch arduino-cli sketch new [flags] Examples \u00b6 arduino-cli sketch new MultiBlinker Options \u00b6 -h, --help help for new Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli sketch - Arduino CLI sketch commands.","title":"sketch new"},{"location":"commands/arduino-cli_sketch_new/#arduino-cli-sketch-new","text":"Create a new Sketch","title":"arduino-cli sketch new"},{"location":"commands/arduino-cli_sketch_new/#synopsis","text":"Create a new Sketch arduino-cli sketch new [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_sketch_new/#examples","text":"arduino-cli sketch new MultiBlinker","title":"Examples"},{"location":"commands/arduino-cli_sketch_new/#options","text":"-h, --help help for new","title":"Options"},{"location":"commands/arduino-cli_sketch_new/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch_new/#see-also","text":"arduino-cli sketch - Arduino CLI sketch commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_update/","text":"arduino-cli update \u00b6 Updates the index of cores and libraries Synopsis \u00b6 Updates the index of cores and libraries to the latest versions. arduino-cli update [flags] Examples \u00b6 arduino-cli update Options \u00b6 -h, --help help for update --show-outdated Show outdated cores and libraries after index update Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"update"},{"location":"commands/arduino-cli_update/#arduino-cli-update","text":"Updates the index of cores and libraries","title":"arduino-cli update"},{"location":"commands/arduino-cli_update/#synopsis","text":"Updates the index of cores and libraries to the latest versions. arduino-cli update [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_update/#examples","text":"arduino-cli update","title":"Examples"},{"location":"commands/arduino-cli_update/#options","text":"-h, --help help for update --show-outdated Show outdated cores and libraries after index update","title":"Options"},{"location":"commands/arduino-cli_update/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_update/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_upgrade/","text":"arduino-cli upgrade \u00b6 Upgrades installed cores and libraries. Synopsis \u00b6 Upgrades installed cores and libraries to latest version. arduino-cli upgrade [flags] Examples \u00b6 arduino-cli upgrade Options \u00b6 -h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively). Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"upgrade"},{"location":"commands/arduino-cli_upgrade/#arduino-cli-upgrade","text":"Upgrades installed cores and libraries.","title":"arduino-cli upgrade"},{"location":"commands/arduino-cli_upgrade/#synopsis","text":"Upgrades installed cores and libraries to latest version. arduino-cli upgrade [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_upgrade/#examples","text":"arduino-cli upgrade","title":"Examples"},{"location":"commands/arduino-cli_upgrade/#options","text":"-h, --help help for upgrade --run-post-install Force run of post-install scripts (if the CLI is not running interactively). --skip-post-install Force skip of post-install scripts (if the CLI is running interactively).","title":"Options"},{"location":"commands/arduino-cli_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_upgrade/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_upload/","text":"arduino-cli upload \u00b6 Upload Arduino sketches. Synopsis \u00b6 Upload Arduino sketches. This does NOT compile the sketch prior to upload. arduino-cli upload [flags] Examples \u00b6 arduino-cli upload /home/user/Arduino/MySketch Options \u00b6 -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for upload --input-dir string Directory containing binaries to upload. -i, --input-file string Binary file to upload. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 -P, --programmer string Optional, use the specified programmer to upload. -t, --verify Verify uploaded binary after the upload. Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"upload"},{"location":"commands/arduino-cli_upload/#arduino-cli-upload","text":"Upload Arduino sketches.","title":"arduino-cli upload"},{"location":"commands/arduino-cli_upload/#synopsis","text":"Upload Arduino sketches. This does NOT compile the sketch prior to upload. arduino-cli upload [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_upload/#examples","text":"arduino-cli upload /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_upload/#options","text":"-b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for upload --input-dir string Directory containing binaries to upload. -i, --input-file string Binary file to upload. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 -P, --programmer string Optional, use the specified programmer to upload. -t, --verify Verify uploaded binary after the upload.","title":"Options"},{"location":"commands/arduino-cli_upload/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_upload/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_version/","text":"arduino-cli version \u00b6 Shows version number of Arduino CLI. Synopsis \u00b6 Shows the version number of Arduino CLI which is installed on your system. arduino-cli version [flags] Examples \u00b6 arduino-cli version Options \u00b6 -h, --help help for version Options inherited from parent commands \u00b6 --additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI.","title":"version"},{"location":"commands/arduino-cli_version/#arduino-cli-version","text":"Shows version number of Arduino CLI.","title":"arduino-cli version"},{"location":"commands/arduino-cli_version/#synopsis","text":"Shows the version number of Arduino CLI which is installed on your system. arduino-cli version [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_version/#examples","text":"arduino-cli version","title":"Examples"},{"location":"commands/arduino-cli_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"commands/arduino-cli_version/#options-inherited-from-parent-commands","text":"--additional-urls strings Comma-separated list of additional URLs for the Boards Manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be {text|json}. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be {text|json}. --log-level string Messages with this level and above will be logged. Valid levels are: trace, debug, info, warn, error, fatal, panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_version/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"rpc/commands/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 commands/board.proto BoardAttachReq BoardAttachResp BoardDetailsReq BoardDetailsResp BoardListAllReq BoardListAllResp BoardListItem BoardListReq BoardListResp BoardPlatform ConfigOption ConfigValue DetectedPort Help IdentificationPref Package Systems ToolsDependencies USBID commands/commands.proto ArchiveSketchReq ArchiveSketchResp DestroyReq DestroyResp InitReq InitResp LoadSketchReq LoadSketchResp OutdatedReq OutdatedResp RescanReq RescanResp UpdateCoreLibrariesIndexReq UpdateCoreLibrariesIndexResp UpdateIndexReq UpdateIndexResp UpdateLibrariesIndexReq UpdateLibrariesIndexResp UpgradeReq UpgradeResp VersionReq VersionResp ArduinoCore commands/common.proto DownloadProgress Instance Programmer TaskProgress commands/compile.proto CompileReq CompileResp commands/core.proto Board Platform PlatformDownloadReq PlatformDownloadResp PlatformInstallReq PlatformInstallResp PlatformListReq PlatformListResp PlatformSearchReq PlatformSearchResp PlatformUninstallReq PlatformUninstallResp PlatformUpgradeReq PlatformUpgradeResp commands/lib.proto DownloadResource GitLibraryInstallReq GitLibraryInstallResp InstalledLibrary Library Library.CompatibleWithEntry Library.PropertiesEntry LibraryDependency LibraryDependencyStatus LibraryDownloadReq LibraryDownloadResp LibraryInstallReq LibraryInstallResp LibraryListReq LibraryListResp LibraryRelease LibraryResolveDependenciesReq LibraryResolveDependenciesResp LibrarySearchReq LibrarySearchResp LibraryUninstallReq LibraryUninstallResp LibraryUpgradeAllReq LibraryUpgradeAllResp SearchedLibrary SearchedLibrary.ReleasesEntry ZipLibraryInstallReq ZipLibraryInstallResp LibraryLayout LibraryLocation LibrarySearchStatus commands/upload.proto BurnBootloaderReq BurnBootloaderResp ListProgrammersAvailableForUploadReq ListProgrammersAvailableForUploadResp UploadReq UploadResp UploadUsingProgrammerReq UploadUsingProgrammerResp Scalar Value Types Top commands/board.proto \u00b6 BoardAttachReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. board_uri string The board's URI (e.g., /dev/ttyACM0). sketch_path string Path of the sketch to attach the board to. The board attachment metadata will be saved to {sketch_path}/sketch.json . search_timeout string Duration in seconds to search the given URI for a connected board before timing out. The default value is 5 seconds. BoardAttachResp \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the board attachment. BoardDetailsReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string The fully qualified board name of the board you want information about (e.g., arduino:avr:uno ). BoardDetailsResp \u00b6 Field Type Label Description fqbn string The fully qualified board name of the board. name string Name used to identify the board to humans (e.g., Arduino Uno). version string Installed version of the board's platform. propertiesId string The board ID component of the FQBN (e.g., uno ). alias string Board alias that can be used as a more user friendly alternative to the FQBN. official bool Whether this is an official or 3 rd party board. pinout string URL of the board's pinout documentation. package Package Data about the package that contains the board's platform. platform BoardPlatform Data about the board's platform. toolsDependencies ToolsDependencies repeated Tool dependencies of the board. config_options ConfigOption repeated The board's custom configuration options. identification_pref IdentificationPref repeated Identifying information for the board (e.g., USB VID/PID). programmers Programmer repeated List of programmers supported by the board BoardListAllReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string repeated The search query to filter the board list by. include_hidden_boards bool Set to true to get also the boards marked as \"hidden\" in the platform BoardListAllResp \u00b6 Field Type Label Description boards BoardListItem repeated List of installed boards. BoardListItem \u00b6 Field Type Label Description name string The name for use when identifying the board to a human. FQBN string The fully qualified board name. Used to identify the board to a machine. is_hidden bool If the board is marked as \"hidden\" in the platform BoardListReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. BoardListResp \u00b6 Field Type Label Description ports DetectedPort repeated List of ports and the boards detected on those ports. BoardPlatform \u00b6 Field Type Label Description architecture string Architecture of the platform (e.g., avr ). category string Category of the platform. Set to Contributed for 3 rd party platforms. url string Download URL of the platform archive file. archiveFileName string File name of the platform archive. checksum string Checksum of the platform archive. size int64 File size of the platform archive. name string Name used to identify the platform to humans. ConfigOption \u00b6 Field Type Label Description option string ID of the configuration option. For identifying the option to machines. option_label string Name of the configuration option for identifying the option to humans. values ConfigValue repeated Possible values of the configuration option. ConfigValue \u00b6 Field Type Label Description value string The configuration option value. value_label string Label to identify the configuration option to humans. selected bool Whether the configuration option is selected. DetectedPort \u00b6 Field Type Label Description address string Address of the port (e.g., serial:///dev/ttyACM0 ). protocol string Protocol of the port (e.g., serial ). protocol_label string A human friendly description of the protocol (e.g., \"Serial Port (USB)\"). boards BoardListItem repeated The boards attached to the port. Help \u00b6 Field Type Label Description online string URL for getting online help. IdentificationPref \u00b6 Field Type Label Description usbID USBID Identifying information for USB-connected boards. Package \u00b6 Field Type Label Description maintainer string Maintainer of the package. url string The URL of the platforms index file (e.g., https://downloads.arduino.cc/packages/package_index.json ). websiteURL string A URL provided by the package author, intended to point to their website. email string Email address of the package maintainer. name string Package vendor name. help Help Resources for getting help about using the package. Systems \u00b6 Field Type Label Description checksum string Checksum of the tool archive. host string Operating system identifier. archiveFileName string File name of the tool archive. url string Download URL of the tool archive. size int64 File size of the tool archive. ToolsDependencies \u00b6 Field Type Label Description packager string Vendor name of the package containing the tool definition. name string Tool name. version string Tool version. systems Systems repeated Data for the operating system-specific builds of the tool. USBID \u00b6 Field Type Label Description VID string USB vendor ID. PID string USB product ID. Top commands/commands.proto \u00b6 ArchiveSketchReq \u00b6 Field Type Label Description sketch_path string Absolute path to Sketch file or folder containing Sketch file archive_path string Absolute path to archive that will be created or folder that will contain it include_build_dir bool Specifies if build directory should be included in the archive ArchiveSketchResp \u00b6 DestroyReq \u00b6 Field Type Label Description instance Instance The Arduino Core Service instance to destroy. DestroyResp \u00b6 InitReq \u00b6 Field Type Label Description library_manager_only bool Start a Arduino Core Service instance that will provide only Library Manager functionality. InitResp \u00b6 Field Type Label Description instance Instance An Arduino Core Service instance. platforms_index_errors string repeated Error messages related to any problems encountered while parsing the platforms index files. libraries_index_error string Error message if a problem was encountered while parsing the libraries index file. download_progress DownloadProgress Progress of the downloads of platforms and libraries index files. task_progress TaskProgress Describes the current stage of the initialization. LoadSketchReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. sketch_path string Absolute path to single sketch file or a sketch folder LoadSketchResp \u00b6 Field Type Label Description main_file string Absolute path to a main sketch files location_path string Absolute path to folder that contains main_file other_sketch_files string repeated List of absolute paths to other sketch files additional_files string repeated List of absolute paths to additional sketch files OutdatedReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. OutdatedResp \u00b6 Field Type Label Description outdated_library InstalledLibrary repeated List of installed libraries that can be updated. outdated_platform Platform repeated List of installed cores that can be updated. RescanReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. RescanResp \u00b6 Field Type Label Description platforms_index_errors string repeated Error messages related to any problems encountered while parsing the platforms index file. libraries_index_error string Error message if a problem was encountered while parsing the libraries index file. UpdateCoreLibrariesIndexReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. UpdateCoreLibrariesIndexResp \u00b6 Field Type Label Description download_progress DownloadProgress Progress of the index download. UpdateIndexReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. UpdateIndexResp \u00b6 Field Type Label Description download_progress DownloadProgress Progress of the platforms index download. UpdateLibrariesIndexReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. UpdateLibrariesIndexResp \u00b6 Field Type Label Description download_progress DownloadProgress Progress of the libraries index download. UpgradeReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. skipPostInstall bool Set to true to not run (eventual) post install scripts UpgradeResp \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of the platforms and libraries files. task_progress TaskProgress Description of the current stage of the upgrade. VersionReq \u00b6 VersionResp \u00b6 Field Type Label Description version string The version of Arduino CLI in use. ArduinoCore \u00b6 The main Arduino Platform Service BOOTSTRAP COMMANDS \u00b6 Method Name Request Type Response Type Description Init InitReq InitResp stream Start a new instance of the Arduino Core Service Destroy DestroyReq DestroyResp Destroy an instance of the Arduino Core Service Rescan RescanReq RescanResp Rescan instance of the Arduino Core Service UpdateIndex UpdateIndexReq UpdateIndexResp stream Update package index of the Arduino Core Service UpdateLibrariesIndex UpdateLibrariesIndexReq UpdateLibrariesIndexResp stream Update libraries index UpdateCoreLibrariesIndex UpdateCoreLibrariesIndexReq UpdateCoreLibrariesIndexResp stream Update packages indexes for both Cores and Libraries Outdated OutdatedReq OutdatedResp Outdated returns a message with a list of outdated Cores and Libraries Upgrade UpgradeReq UpgradeResp stream Upgrade both Cores and Libraries Version VersionReq VersionResp Get the version of Arduino CLI in use. LoadSketch LoadSketchReq LoadSketchResp Returns all files composing a Sketch ArchiveSketch ArchiveSketchReq ArchiveSketchResp Creates a zip file containing all files of specified Sketch BoardDetails BoardDetailsReq BoardDetailsResp Requests details about a board BoardAttach BoardAttachReq BoardAttachResp stream Attach a board to a sketch. When the fqbn field of a request is not provided, the FQBN of the attached board will be used. BoardList BoardListReq BoardListResp List the boards currently connected to the computer. BoardListAll BoardListAllReq BoardListAllResp List all the boards provided by installed platforms. Compile CompileReq CompileResp stream Compile an Arduino sketch. PlatformInstall PlatformInstallReq PlatformInstallResp stream Download and install a platform and its tool dependencies. PlatformDownload PlatformDownloadReq PlatformDownloadResp stream Download a platform and its tool dependencies to the staging/packages subdirectory of the data directory. PlatformUninstall PlatformUninstallReq PlatformUninstallResp stream Uninstall a platform as well as its tool dependencies that are not used by other installed platforms. PlatformUpgrade PlatformUpgradeReq PlatformUpgradeResp stream Upgrade an installed platform to the latest version. Upload UploadReq UploadResp stream Upload a compiled sketch to a board. UploadUsingProgrammer UploadUsingProgrammerReq UploadUsingProgrammerResp stream Upload a compiled sketch to a board using a programmer. ListProgrammersAvailableForUpload ListProgrammersAvailableForUploadReq ListProgrammersAvailableForUploadResp List programmers available for a board. BurnBootloader BurnBootloaderReq BurnBootloaderResp stream Burn bootloader to a board. PlatformSearch PlatformSearchReq PlatformSearchResp Search for a platform in the platforms indexes. PlatformList PlatformListReq PlatformListResp List all installed platforms. LibraryDownload LibraryDownloadReq LibraryDownloadResp stream Download the archive file of an Arduino library in the libraries index to the staging directory. LibraryInstall LibraryInstallReq LibraryInstallResp stream Download and install an Arduino library from the libraries index. ZipLibraryInstall ZipLibraryInstallReq ZipLibraryInstallResp stream Install a library from a Zip File GitLibraryInstall GitLibraryInstallReq GitLibraryInstallResp stream Download and install a library from a git url LibraryUninstall LibraryUninstallReq LibraryUninstallResp stream Uninstall an Arduino library. LibraryUpgradeAll LibraryUpgradeAllReq LibraryUpgradeAllResp stream Upgrade all installed Arduino libraries to the newest version available. LibraryResolveDependencies LibraryResolveDependenciesReq LibraryResolveDependenciesResp List the recursive dependencies of a library, as defined by the depends field of the library.properties files. LibrarySearch LibrarySearchReq LibrarySearchResp Search the Arduino libraries index for libraries. LibraryList LibraryListReq LibraryListResp List the installed libraries. Top commands/common.proto \u00b6 DownloadProgress \u00b6 Field Type Label Description url string URL of the download. file string The file being downloaded. total_size int64 Total size of the file being downloaded. downloaded int64 Size of the downloaded portion of the file. completed bool Whether the download is complete. Instance \u00b6 Field Type Label Description id int32 The ID of the instance. Programmer \u00b6 Field Type Label Description platform string id string name string TaskProgress \u00b6 Field Type Label Description name string Description of the task. message string Additional information about the task. completed bool Whether the task is complete. Top commands/compile.proto \u00b6 CompileReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno . If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketchPath string The path where the sketch is stored. showProperties bool Show all build preferences used instead of compiling. preprocess bool Print preprocessed code to stdout instead of compiling. buildCachePath string Builds of 'core.a' are saved into this path to be cached and reused. buildPath string Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path. buildProperties string repeated List of custom build properties separated by commas. warnings string Used to tell gcc which warning level to use. The level names are: \"none\", \"default\", \"more\" and \"all\". verbose bool Turns on verbose mode. quiet bool Suppresses almost every output. vidPid string VID/PID specific build properties. jobs int32 The max number of concurrent compiler instances to run (as make -jx ). If jobs is set to 0, it will use the number of available CPUs as the maximum. libraries string repeated List of custom libraries paths separated by commas. optimizeForDebug bool Optimize compile output for debug, not for release. export_dir string Optional: save the build artifacts in this directory, the directory must exist. clean bool Optional: cleanup the build folder and do not use any previously cached build export_binaries bool When set to true the compiled binary will be copied to the export directory. CompileResp \u00b6 Field Type Label Description out_stream bytes The output of the compilation process. err_stream bytes The error output of the compilation process. Top commands/core.proto \u00b6 Board \u00b6 Field Type Label Description name string Name used to identify the board to humans. fqbn string Fully qualified board name used to identify the board to machines. The FQBN is only available for installed boards. Platform \u00b6 Field Type Label Description ID string Platform ID (e.g., arduino:avr ). Installed string Version of the platform. Latest string Newest available version of the platform. Name string Name used to identify the platform to humans (e.g., \"Arduino AVR Boards\"). Maintainer string Maintainer of the platform's package. Website string A URL provided by the author of the platform's package, intended to point to their website. Email string Email of the maintainer of the platform's package. Boards Board repeated List of boards provided by the platform. If the platform is installed, this is the boards listed in the platform's boards.txt. If the platform is not installed, this is an arbitrary list of board names provided by the platform author for display and may not match boards.txt. PlatformDownloadReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string architecture string Architecture name of the platform (e.g., avr ). version string Platform version to download. PlatformDownloadResp \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of platform and tool files. PlatformInstallReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). version string Platform version to install. skipPostInstall bool Set to true to not run (eventual) post install scripts for trusted platforms PlatformInstallResp \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the installation. PlatformListReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. updatable_only bool Set to true to only list platforms which have a newer version available than the one currently installed. PlatformListResp \u00b6 Field Type Label Description installed_platform Platform repeated The installed platforms. PlatformSearchReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string Keywords for the search. all_versions bool Whether to show all available versions. false causes only the newest versions of the cores to be listed in the search results. PlatformSearchResp \u00b6 Field Type Label Description search_output Platform repeated Results of the search. PlatformUninstallReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). PlatformUninstallResp \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstall. PlatformUpgradeReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). skipPostInstall bool Set to true to not run (eventual) post install scripts for trusted platforms PlatformUpgradeResp \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the upgrade. Top commands/lib.proto \u00b6 DownloadResource \u00b6 Field Type Label Description url string Download URL of the library archive. archivefilename string Filename of the library archive. checksum string Checksum of the library archive. size int64 File size of the library archive. cachepath string The directory under the staging subdirectory of the data directory the library archive file will be downloaded to. GitLibraryInstallReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. url string URL to the repository containing the library GitLibraryInstallResp \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the installation. InstalledLibrary \u00b6 Field Type Label Description library Library Information about the library. release LibraryRelease When the updatable field of the LibraryList request is set to true , this will contain information on the latest version of the library in the libraries index. Library \u00b6 Field Type Label Description name string The library's directory name. author string Value of the author field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library. Possible values: Arduino , Partner , Recommended , Contributed , Retired . install_dir string The path of the library directory. source_dir string The location of the library's source files. utility_dir string The location of the library's utility directory. container_platform string If location is platform_builtin or referenced_platform_builtin , the identifying string for the platform containing the library (e.g., arduino:avr@1.8.2 ). real_name string Value of the name field in library.properties. dot_a_linkage bool Value of the dot_a_linkage field in library.properties. precompiled bool Value of the precompiled field in library.properties. ld_flags string Value of the ldflags field in library.properties. is_legacy bool A library.properties file is not present in the library's root directory. version string Value of the version field in library.properties. license string Value of the license field in library.properties. properties Library.PropertiesEntry repeated The data from the library's library.properties file, including unused fields. location LibraryLocation The location type of the library installation. layout LibraryLayout The library format type. examples string repeated The example sketches provided by the library provides_includes string repeated Value of the includes field in library.properties or, if missing, the list of include files available on the library source root directory. compatible_with Library.CompatibleWithEntry repeated Map of FQBNs that specifies if library is compatible with this library Library.CompatibleWithEntry \u00b6 Field Type Label Description key string value bool Library.PropertiesEntry \u00b6 Field Type Label Description key string value string LibraryDependency \u00b6 Field Type Label Description name string Library name of the dependency. version_constraint string Version constraint of the dependency. LibraryDependencyStatus \u00b6 Field Type Label Description name string The name of the library dependency. versionRequired string The required version of the library dependency. versionInstalled string Version of the library dependency currently installed. LibraryDownloadReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to download. LibraryDownloadResp \u00b6 Field Type Label Description progress DownloadProgress Progress of the library download. LibraryInstallReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to install. LibraryInstallResp \u00b6 Field Type Label Description progress DownloadProgress Progress of the library download. task_progress TaskProgress Description of the current stage of the installation. LibraryListReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. all bool Whether to include built-in libraries (from platforms and the Arduino IDE) in the listing. updatable bool Whether to list only libraries for which there is a newer version than the installed version available in the libraries index. name string If set filters out the libraries not matching name fqbn string By setting this field all duplicate libraries are filtered out leaving only the libraries that will be used to compile for the specified board FQBN. LibraryListResp \u00b6 Field Type Label Description installed_library InstalledLibrary repeated List of installed libraries. LibraryRelease \u00b6 Field Type Label Description author string Value of the author field in library.properties. version string Value of the version field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library, as defined in the libraries index. Possible values: Arduino , Partner , Recommended , Contributed , Retired . resources DownloadResource Information about the library archive file. license string Value of the license field in library.properties. provides_includes string repeated Value of the includes field in library.properties. dependencies LibraryDependency repeated The names of the library's dependencies, as defined by the 'depends' field of library.properties. LibraryResolveDependenciesReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to check dependencies of. If no version is specified, dependencies of the newest version will be listed. LibraryResolveDependenciesResp \u00b6 Field Type Label Description dependencies LibraryDependencyStatus repeated Dependencies of the library. LibrarySearchReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. query string The search query. LibrarySearchResp \u00b6 Field Type Label Description libraries SearchedLibrary repeated The results of the search. status LibrarySearchStatus Whether the search yielded results. LibraryUninstallReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to uninstall. LibraryUninstallResp \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstallation. LibraryUpgradeAllReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. LibraryUpgradeAllResp \u00b6 Field Type Label Description progress DownloadProgress Progress of the downloads of files needed for the upgrades. task_progress TaskProgress Description of the current stage of the upgrade. SearchedLibrary \u00b6 Field Type Label Description name string Library name. releases SearchedLibrary.ReleasesEntry repeated The index data for the available versions of the library. The key of the map is the library version. latest LibraryRelease The index data for the latest version of the library. SearchedLibrary.ReleasesEntry \u00b6 Field Type Label Description key string value LibraryRelease ZipLibraryInstallReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. Path string Path to the archived library ZipLibraryInstallResp \u00b6 Field Type Label Description task_progress TaskProgress Description of the current stage of the installation. LibraryLayout \u00b6 Name Number Description flat_layout 0 Library is in the 1.0 Arduino library format. recursive_layout 1 Library is in the 1.5 Arduino library format. LibraryLocation \u00b6 Name Number Description ide_builtin 0 In the libraries subdirectory of the Arduino IDE installation. user 1 In the libraries subdirectory of the user directory (sketchbook). platform_builtin 2 In the libraries subdirectory of a platform. referenced_platform_builtin 3 When LibraryLocation is used in a context where a board is specified, this indicates the library is in the libraries subdirectory of a platform referenced by the board's platform. LibrarySearchStatus \u00b6 Name Number Description failed 0 No search results were found. success 1 Search results were found. Top commands/upload.proto \u00b6 BurnBootloaderReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). port string The port of the programmer used to program the bootloader. verbose bool Whether to turn on verbose output during the programming. verify bool After programming, verify the contents of the memory on the board match the uploaded binary. programmer string The programmer to use for burning bootloader. BurnBootloaderResp \u00b6 Field Type Label Description out_stream bytes The output of the burn bootloader process. err_stream bytes The error output of the burn bootloader process. ListProgrammersAvailableForUploadReq \u00b6 Field Type Label Description instance Instance fqbn string ListProgrammersAvailableForUploadResp \u00b6 Field Type Label Description programmers Programmer repeated UploadReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port string The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload. If set an UploadUsingProgrammer is triggered instead of a normal upload. The UploadUsingProgrammer call may also be used for explicit error check. UploadResp \u00b6 Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process. UploadUsingProgrammerReq \u00b6 Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port string The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload. UploadUsingProgrammerResp \u00b6 Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process. Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"commands"},{"location":"rpc/commands/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/commands/#table-of-contents","text":"commands/board.proto BoardAttachReq BoardAttachResp BoardDetailsReq BoardDetailsResp BoardListAllReq BoardListAllResp BoardListItem BoardListReq BoardListResp BoardPlatform ConfigOption ConfigValue DetectedPort Help IdentificationPref Package Systems ToolsDependencies USBID commands/commands.proto ArchiveSketchReq ArchiveSketchResp DestroyReq DestroyResp InitReq InitResp LoadSketchReq LoadSketchResp OutdatedReq OutdatedResp RescanReq RescanResp UpdateCoreLibrariesIndexReq UpdateCoreLibrariesIndexResp UpdateIndexReq UpdateIndexResp UpdateLibrariesIndexReq UpdateLibrariesIndexResp UpgradeReq UpgradeResp VersionReq VersionResp ArduinoCore commands/common.proto DownloadProgress Instance Programmer TaskProgress commands/compile.proto CompileReq CompileResp commands/core.proto Board Platform PlatformDownloadReq PlatformDownloadResp PlatformInstallReq PlatformInstallResp PlatformListReq PlatformListResp PlatformSearchReq PlatformSearchResp PlatformUninstallReq PlatformUninstallResp PlatformUpgradeReq PlatformUpgradeResp commands/lib.proto DownloadResource GitLibraryInstallReq GitLibraryInstallResp InstalledLibrary Library Library.CompatibleWithEntry Library.PropertiesEntry LibraryDependency LibraryDependencyStatus LibraryDownloadReq LibraryDownloadResp LibraryInstallReq LibraryInstallResp LibraryListReq LibraryListResp LibraryRelease LibraryResolveDependenciesReq LibraryResolveDependenciesResp LibrarySearchReq LibrarySearchResp LibraryUninstallReq LibraryUninstallResp LibraryUpgradeAllReq LibraryUpgradeAllResp SearchedLibrary SearchedLibrary.ReleasesEntry ZipLibraryInstallReq ZipLibraryInstallResp LibraryLayout LibraryLocation LibrarySearchStatus commands/upload.proto BurnBootloaderReq BurnBootloaderResp ListProgrammersAvailableForUploadReq ListProgrammersAvailableForUploadResp UploadReq UploadResp UploadUsingProgrammerReq UploadUsingProgrammerResp Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/commands/#commandsboardproto","text":"","title":"commands/board.proto"},{"location":"rpc/commands/#boardattachreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. board_uri string The board's URI (e.g., /dev/ttyACM0). sketch_path string Path of the sketch to attach the board to. The board attachment metadata will be saved to {sketch_path}/sketch.json . search_timeout string Duration in seconds to search the given URI for a connected board before timing out. The default value is 5 seconds.","title":"BoardAttachReq"},{"location":"rpc/commands/#boardattachresp","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the board attachment.","title":"BoardAttachResp"},{"location":"rpc/commands/#boarddetailsreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string The fully qualified board name of the board you want information about (e.g., arduino:avr:uno ).","title":"BoardDetailsReq"},{"location":"rpc/commands/#boarddetailsresp","text":"Field Type Label Description fqbn string The fully qualified board name of the board. name string Name used to identify the board to humans (e.g., Arduino Uno). version string Installed version of the board's platform. propertiesId string The board ID component of the FQBN (e.g., uno ). alias string Board alias that can be used as a more user friendly alternative to the FQBN. official bool Whether this is an official or 3 rd party board. pinout string URL of the board's pinout documentation. package Package Data about the package that contains the board's platform. platform BoardPlatform Data about the board's platform. toolsDependencies ToolsDependencies repeated Tool dependencies of the board. config_options ConfigOption repeated The board's custom configuration options. identification_pref IdentificationPref repeated Identifying information for the board (e.g., USB VID/PID). programmers Programmer repeated List of programmers supported by the board","title":"BoardDetailsResp"},{"location":"rpc/commands/#boardlistallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string repeated The search query to filter the board list by. include_hidden_boards bool Set to true to get also the boards marked as \"hidden\" in the platform","title":"BoardListAllReq"},{"location":"rpc/commands/#boardlistallresp","text":"Field Type Label Description boards BoardListItem repeated List of installed boards.","title":"BoardListAllResp"},{"location":"rpc/commands/#boardlistitem","text":"Field Type Label Description name string The name for use when identifying the board to a human. FQBN string The fully qualified board name. Used to identify the board to a machine. is_hidden bool If the board is marked as \"hidden\" in the platform","title":"BoardListItem"},{"location":"rpc/commands/#boardlistreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"BoardListReq"},{"location":"rpc/commands/#boardlistresp","text":"Field Type Label Description ports DetectedPort repeated List of ports and the boards detected on those ports.","title":"BoardListResp"},{"location":"rpc/commands/#boardplatform","text":"Field Type Label Description architecture string Architecture of the platform (e.g., avr ). category string Category of the platform. Set to Contributed for 3 rd party platforms. url string Download URL of the platform archive file. archiveFileName string File name of the platform archive. checksum string Checksum of the platform archive. size int64 File size of the platform archive. name string Name used to identify the platform to humans.","title":"BoardPlatform"},{"location":"rpc/commands/#configoption","text":"Field Type Label Description option string ID of the configuration option. For identifying the option to machines. option_label string Name of the configuration option for identifying the option to humans. values ConfigValue repeated Possible values of the configuration option.","title":"ConfigOption"},{"location":"rpc/commands/#configvalue","text":"Field Type Label Description value string The configuration option value. value_label string Label to identify the configuration option to humans. selected bool Whether the configuration option is selected.","title":"ConfigValue"},{"location":"rpc/commands/#detectedport","text":"Field Type Label Description address string Address of the port (e.g., serial:///dev/ttyACM0 ). protocol string Protocol of the port (e.g., serial ). protocol_label string A human friendly description of the protocol (e.g., \"Serial Port (USB)\"). boards BoardListItem repeated The boards attached to the port.","title":"DetectedPort"},{"location":"rpc/commands/#help","text":"Field Type Label Description online string URL for getting online help.","title":"Help"},{"location":"rpc/commands/#identificationpref","text":"Field Type Label Description usbID USBID Identifying information for USB-connected boards.","title":"IdentificationPref"},{"location":"rpc/commands/#package","text":"Field Type Label Description maintainer string Maintainer of the package. url string The URL of the platforms index file (e.g., https://downloads.arduino.cc/packages/package_index.json ). websiteURL string A URL provided by the package author, intended to point to their website. email string Email address of the package maintainer. name string Package vendor name. help Help Resources for getting help about using the package.","title":"Package"},{"location":"rpc/commands/#systems","text":"Field Type Label Description checksum string Checksum of the tool archive. host string Operating system identifier. archiveFileName string File name of the tool archive. url string Download URL of the tool archive. size int64 File size of the tool archive.","title":"Systems"},{"location":"rpc/commands/#toolsdependencies","text":"Field Type Label Description packager string Vendor name of the package containing the tool definition. name string Tool name. version string Tool version. systems Systems repeated Data for the operating system-specific builds of the tool.","title":"ToolsDependencies"},{"location":"rpc/commands/#usbid","text":"Field Type Label Description VID string USB vendor ID. PID string USB product ID. Top","title":"USBID"},{"location":"rpc/commands/#commandscommandsproto","text":"","title":"commands/commands.proto"},{"location":"rpc/commands/#archivesketchreq","text":"Field Type Label Description sketch_path string Absolute path to Sketch file or folder containing Sketch file archive_path string Absolute path to archive that will be created or folder that will contain it include_build_dir bool Specifies if build directory should be included in the archive","title":"ArchiveSketchReq"},{"location":"rpc/commands/#archivesketchresp","text":"","title":"ArchiveSketchResp"},{"location":"rpc/commands/#destroyreq","text":"Field Type Label Description instance Instance The Arduino Core Service instance to destroy.","title":"DestroyReq"},{"location":"rpc/commands/#destroyresp","text":"","title":"DestroyResp"},{"location":"rpc/commands/#initreq","text":"Field Type Label Description library_manager_only bool Start a Arduino Core Service instance that will provide only Library Manager functionality.","title":"InitReq"},{"location":"rpc/commands/#initresp","text":"Field Type Label Description instance Instance An Arduino Core Service instance. platforms_index_errors string repeated Error messages related to any problems encountered while parsing the platforms index files. libraries_index_error string Error message if a problem was encountered while parsing the libraries index file. download_progress DownloadProgress Progress of the downloads of platforms and libraries index files. task_progress TaskProgress Describes the current stage of the initialization.","title":"InitResp"},{"location":"rpc/commands/#loadsketchreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. sketch_path string Absolute path to single sketch file or a sketch folder","title":"LoadSketchReq"},{"location":"rpc/commands/#loadsketchresp","text":"Field Type Label Description main_file string Absolute path to a main sketch files location_path string Absolute path to folder that contains main_file other_sketch_files string repeated List of absolute paths to other sketch files additional_files string repeated List of absolute paths to additional sketch files","title":"LoadSketchResp"},{"location":"rpc/commands/#outdatedreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"OutdatedReq"},{"location":"rpc/commands/#outdatedresp","text":"Field Type Label Description outdated_library InstalledLibrary repeated List of installed libraries that can be updated. outdated_platform Platform repeated List of installed cores that can be updated.","title":"OutdatedResp"},{"location":"rpc/commands/#rescanreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"RescanReq"},{"location":"rpc/commands/#rescanresp","text":"Field Type Label Description platforms_index_errors string repeated Error messages related to any problems encountered while parsing the platforms index file. libraries_index_error string Error message if a problem was encountered while parsing the libraries index file.","title":"RescanResp"},{"location":"rpc/commands/#updatecorelibrariesindexreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"UpdateCoreLibrariesIndexReq"},{"location":"rpc/commands/#updatecorelibrariesindexresp","text":"Field Type Label Description download_progress DownloadProgress Progress of the index download.","title":"UpdateCoreLibrariesIndexResp"},{"location":"rpc/commands/#updateindexreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"UpdateIndexReq"},{"location":"rpc/commands/#updateindexresp","text":"Field Type Label Description download_progress DownloadProgress Progress of the platforms index download.","title":"UpdateIndexResp"},{"location":"rpc/commands/#updatelibrariesindexreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"UpdateLibrariesIndexReq"},{"location":"rpc/commands/#updatelibrariesindexresp","text":"Field Type Label Description download_progress DownloadProgress Progress of the libraries index download.","title":"UpdateLibrariesIndexResp"},{"location":"rpc/commands/#upgradereq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. skipPostInstall bool Set to true to not run (eventual) post install scripts","title":"UpgradeReq"},{"location":"rpc/commands/#upgraderesp","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of the platforms and libraries files. task_progress TaskProgress Description of the current stage of the upgrade.","title":"UpgradeResp"},{"location":"rpc/commands/#versionreq","text":"","title":"VersionReq"},{"location":"rpc/commands/#versionresp","text":"Field Type Label Description version string The version of Arduino CLI in use.","title":"VersionResp"},{"location":"rpc/commands/#arduinocore","text":"The main Arduino Platform Service","title":"ArduinoCore"},{"location":"rpc/commands/#bootstrap-commands","text":"Method Name Request Type Response Type Description Init InitReq InitResp stream Start a new instance of the Arduino Core Service Destroy DestroyReq DestroyResp Destroy an instance of the Arduino Core Service Rescan RescanReq RescanResp Rescan instance of the Arduino Core Service UpdateIndex UpdateIndexReq UpdateIndexResp stream Update package index of the Arduino Core Service UpdateLibrariesIndex UpdateLibrariesIndexReq UpdateLibrariesIndexResp stream Update libraries index UpdateCoreLibrariesIndex UpdateCoreLibrariesIndexReq UpdateCoreLibrariesIndexResp stream Update packages indexes for both Cores and Libraries Outdated OutdatedReq OutdatedResp Outdated returns a message with a list of outdated Cores and Libraries Upgrade UpgradeReq UpgradeResp stream Upgrade both Cores and Libraries Version VersionReq VersionResp Get the version of Arduino CLI in use. LoadSketch LoadSketchReq LoadSketchResp Returns all files composing a Sketch ArchiveSketch ArchiveSketchReq ArchiveSketchResp Creates a zip file containing all files of specified Sketch BoardDetails BoardDetailsReq BoardDetailsResp Requests details about a board BoardAttach BoardAttachReq BoardAttachResp stream Attach a board to a sketch. When the fqbn field of a request is not provided, the FQBN of the attached board will be used. BoardList BoardListReq BoardListResp List the boards currently connected to the computer. BoardListAll BoardListAllReq BoardListAllResp List all the boards provided by installed platforms. Compile CompileReq CompileResp stream Compile an Arduino sketch. PlatformInstall PlatformInstallReq PlatformInstallResp stream Download and install a platform and its tool dependencies. PlatformDownload PlatformDownloadReq PlatformDownloadResp stream Download a platform and its tool dependencies to the staging/packages subdirectory of the data directory. PlatformUninstall PlatformUninstallReq PlatformUninstallResp stream Uninstall a platform as well as its tool dependencies that are not used by other installed platforms. PlatformUpgrade PlatformUpgradeReq PlatformUpgradeResp stream Upgrade an installed platform to the latest version. Upload UploadReq UploadResp stream Upload a compiled sketch to a board. UploadUsingProgrammer UploadUsingProgrammerReq UploadUsingProgrammerResp stream Upload a compiled sketch to a board using a programmer. ListProgrammersAvailableForUpload ListProgrammersAvailableForUploadReq ListProgrammersAvailableForUploadResp List programmers available for a board. BurnBootloader BurnBootloaderReq BurnBootloaderResp stream Burn bootloader to a board. PlatformSearch PlatformSearchReq PlatformSearchResp Search for a platform in the platforms indexes. PlatformList PlatformListReq PlatformListResp List all installed platforms. LibraryDownload LibraryDownloadReq LibraryDownloadResp stream Download the archive file of an Arduino library in the libraries index to the staging directory. LibraryInstall LibraryInstallReq LibraryInstallResp stream Download and install an Arduino library from the libraries index. ZipLibraryInstall ZipLibraryInstallReq ZipLibraryInstallResp stream Install a library from a Zip File GitLibraryInstall GitLibraryInstallReq GitLibraryInstallResp stream Download and install a library from a git url LibraryUninstall LibraryUninstallReq LibraryUninstallResp stream Uninstall an Arduino library. LibraryUpgradeAll LibraryUpgradeAllReq LibraryUpgradeAllResp stream Upgrade all installed Arduino libraries to the newest version available. LibraryResolveDependencies LibraryResolveDependenciesReq LibraryResolveDependenciesResp List the recursive dependencies of a library, as defined by the depends field of the library.properties files. LibrarySearch LibrarySearchReq LibrarySearchResp Search the Arduino libraries index for libraries. LibraryList LibraryListReq LibraryListResp List the installed libraries. Top","title":"BOOTSTRAP COMMANDS"},{"location":"rpc/commands/#commandscommonproto","text":"","title":"commands/common.proto"},{"location":"rpc/commands/#downloadprogress","text":"Field Type Label Description url string URL of the download. file string The file being downloaded. total_size int64 Total size of the file being downloaded. downloaded int64 Size of the downloaded portion of the file. completed bool Whether the download is complete.","title":"DownloadProgress"},{"location":"rpc/commands/#instance","text":"Field Type Label Description id int32 The ID of the instance.","title":"Instance"},{"location":"rpc/commands/#programmer","text":"Field Type Label Description platform string id string name string","title":"Programmer"},{"location":"rpc/commands/#taskprogress","text":"Field Type Label Description name string Description of the task. message string Additional information about the task. completed bool Whether the task is complete. Top","title":"TaskProgress"},{"location":"rpc/commands/#commandscompileproto","text":"","title":"commands/compile.proto"},{"location":"rpc/commands/#compilereq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno . If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketchPath string The path where the sketch is stored. showProperties bool Show all build preferences used instead of compiling. preprocess bool Print preprocessed code to stdout instead of compiling. buildCachePath string Builds of 'core.a' are saved into this path to be cached and reused. buildPath string Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path. buildProperties string repeated List of custom build properties separated by commas. warnings string Used to tell gcc which warning level to use. The level names are: \"none\", \"default\", \"more\" and \"all\". verbose bool Turns on verbose mode. quiet bool Suppresses almost every output. vidPid string VID/PID specific build properties. jobs int32 The max number of concurrent compiler instances to run (as make -jx ). If jobs is set to 0, it will use the number of available CPUs as the maximum. libraries string repeated List of custom libraries paths separated by commas. optimizeForDebug bool Optimize compile output for debug, not for release. export_dir string Optional: save the build artifacts in this directory, the directory must exist. clean bool Optional: cleanup the build folder and do not use any previously cached build export_binaries bool When set to true the compiled binary will be copied to the export directory.","title":"CompileReq"},{"location":"rpc/commands/#compileresp","text":"Field Type Label Description out_stream bytes The output of the compilation process. err_stream bytes The error output of the compilation process. Top","title":"CompileResp"},{"location":"rpc/commands/#commandscoreproto","text":"","title":"commands/core.proto"},{"location":"rpc/commands/#board","text":"Field Type Label Description name string Name used to identify the board to humans. fqbn string Fully qualified board name used to identify the board to machines. The FQBN is only available for installed boards.","title":"Board"},{"location":"rpc/commands/#platform","text":"Field Type Label Description ID string Platform ID (e.g., arduino:avr ). Installed string Version of the platform. Latest string Newest available version of the platform. Name string Name used to identify the platform to humans (e.g., \"Arduino AVR Boards\"). Maintainer string Maintainer of the platform's package. Website string A URL provided by the author of the platform's package, intended to point to their website. Email string Email of the maintainer of the platform's package. Boards Board repeated List of boards provided by the platform. If the platform is installed, this is the boards listed in the platform's boards.txt. If the platform is not installed, this is an arbitrary list of board names provided by the platform author for display and may not match boards.txt.","title":"Platform"},{"location":"rpc/commands/#platformdownloadreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string architecture string Architecture name of the platform (e.g., avr ). version string Platform version to download.","title":"PlatformDownloadReq"},{"location":"rpc/commands/#platformdownloadresp","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of platform and tool files.","title":"PlatformDownloadResp"},{"location":"rpc/commands/#platforminstallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). version string Platform version to install. skipPostInstall bool Set to true to not run (eventual) post install scripts for trusted platforms","title":"PlatformInstallReq"},{"location":"rpc/commands/#platforminstallresp","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the installation.","title":"PlatformInstallResp"},{"location":"rpc/commands/#platformlistreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. updatable_only bool Set to true to only list platforms which have a newer version available than the one currently installed.","title":"PlatformListReq"},{"location":"rpc/commands/#platformlistresp","text":"Field Type Label Description installed_platform Platform repeated The installed platforms.","title":"PlatformListResp"},{"location":"rpc/commands/#platformsearchreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. search_args string Keywords for the search. all_versions bool Whether to show all available versions. false causes only the newest versions of the cores to be listed in the search results.","title":"PlatformSearchReq"},{"location":"rpc/commands/#platformsearchresp","text":"Field Type Label Description search_output Platform repeated Results of the search.","title":"PlatformSearchResp"},{"location":"rpc/commands/#platformuninstallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ).","title":"PlatformUninstallReq"},{"location":"rpc/commands/#platformuninstallresp","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstall.","title":"PlatformUninstallResp"},{"location":"rpc/commands/#platformupgradereq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. platform_package string Vendor name of the platform (e.g., arduino ). architecture string Architecture name of the platform (e.g., avr ). skipPostInstall bool Set to true to not run (eventual) post install scripts for trusted platforms","title":"PlatformUpgradeReq"},{"location":"rpc/commands/#platformupgraderesp","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of the platform and tool files. task_progress TaskProgress Description of the current stage of the upgrade. Top","title":"PlatformUpgradeResp"},{"location":"rpc/commands/#commandslibproto","text":"","title":"commands/lib.proto"},{"location":"rpc/commands/#downloadresource","text":"Field Type Label Description url string Download URL of the library archive. archivefilename string Filename of the library archive. checksum string Checksum of the library archive. size int64 File size of the library archive. cachepath string The directory under the staging subdirectory of the data directory the library archive file will be downloaded to.","title":"DownloadResource"},{"location":"rpc/commands/#gitlibraryinstallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. url string URL to the repository containing the library","title":"GitLibraryInstallReq"},{"location":"rpc/commands/#gitlibraryinstallresp","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the installation.","title":"GitLibraryInstallResp"},{"location":"rpc/commands/#installedlibrary","text":"Field Type Label Description library Library Information about the library. release LibraryRelease When the updatable field of the LibraryList request is set to true , this will contain information on the latest version of the library in the libraries index.","title":"InstalledLibrary"},{"location":"rpc/commands/#library","text":"Field Type Label Description name string The library's directory name. author string Value of the author field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library. Possible values: Arduino , Partner , Recommended , Contributed , Retired . install_dir string The path of the library directory. source_dir string The location of the library's source files. utility_dir string The location of the library's utility directory. container_platform string If location is platform_builtin or referenced_platform_builtin , the identifying string for the platform containing the library (e.g., arduino:avr@1.8.2 ). real_name string Value of the name field in library.properties. dot_a_linkage bool Value of the dot_a_linkage field in library.properties. precompiled bool Value of the precompiled field in library.properties. ld_flags string Value of the ldflags field in library.properties. is_legacy bool A library.properties file is not present in the library's root directory. version string Value of the version field in library.properties. license string Value of the license field in library.properties. properties Library.PropertiesEntry repeated The data from the library's library.properties file, including unused fields. location LibraryLocation The location type of the library installation. layout LibraryLayout The library format type. examples string repeated The example sketches provided by the library provides_includes string repeated Value of the includes field in library.properties or, if missing, the list of include files available on the library source root directory. compatible_with Library.CompatibleWithEntry repeated Map of FQBNs that specifies if library is compatible with this library","title":"Library"},{"location":"rpc/commands/#librarycompatiblewithentry","text":"Field Type Label Description key string value bool","title":"Library.CompatibleWithEntry"},{"location":"rpc/commands/#librarypropertiesentry","text":"Field Type Label Description key string value string","title":"Library.PropertiesEntry"},{"location":"rpc/commands/#librarydependency","text":"Field Type Label Description name string Library name of the dependency. version_constraint string Version constraint of the dependency.","title":"LibraryDependency"},{"location":"rpc/commands/#librarydependencystatus","text":"Field Type Label Description name string The name of the library dependency. versionRequired string The required version of the library dependency. versionInstalled string Version of the library dependency currently installed.","title":"LibraryDependencyStatus"},{"location":"rpc/commands/#librarydownloadreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to download.","title":"LibraryDownloadReq"},{"location":"rpc/commands/#librarydownloadresp","text":"Field Type Label Description progress DownloadProgress Progress of the library download.","title":"LibraryDownloadResp"},{"location":"rpc/commands/#libraryinstallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to install.","title":"LibraryInstallReq"},{"location":"rpc/commands/#libraryinstallresp","text":"Field Type Label Description progress DownloadProgress Progress of the library download. task_progress TaskProgress Description of the current stage of the installation.","title":"LibraryInstallResp"},{"location":"rpc/commands/#librarylistreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. all bool Whether to include built-in libraries (from platforms and the Arduino IDE) in the listing. updatable bool Whether to list only libraries for which there is a newer version than the installed version available in the libraries index. name string If set filters out the libraries not matching name fqbn string By setting this field all duplicate libraries are filtered out leaving only the libraries that will be used to compile for the specified board FQBN.","title":"LibraryListReq"},{"location":"rpc/commands/#librarylistresp","text":"Field Type Label Description installed_library InstalledLibrary repeated List of installed libraries.","title":"LibraryListResp"},{"location":"rpc/commands/#libraryrelease","text":"Field Type Label Description author string Value of the author field in library.properties. version string Value of the version field in library.properties. maintainer string Value of the maintainer field in library.properties. sentence string Value of the sentence field in library.properties. paragraph string Value of the paragraph field in library.properties. website string Value of the url field in library.properties. category string Value of the category field in library.properties. architectures string repeated Value of the architectures field in library.properties. types string repeated The type categories of the library, as defined in the libraries index. Possible values: Arduino , Partner , Recommended , Contributed , Retired . resources DownloadResource Information about the library archive file. license string Value of the license field in library.properties. provides_includes string repeated Value of the includes field in library.properties. dependencies LibraryDependency repeated The names of the library's dependencies, as defined by the 'depends' field of library.properties.","title":"LibraryRelease"},{"location":"rpc/commands/#libraryresolvedependenciesreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to check dependencies of. If no version is specified, dependencies of the newest version will be listed.","title":"LibraryResolveDependenciesReq"},{"location":"rpc/commands/#libraryresolvedependenciesresp","text":"Field Type Label Description dependencies LibraryDependencyStatus repeated Dependencies of the library.","title":"LibraryResolveDependenciesResp"},{"location":"rpc/commands/#librarysearchreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. query string The search query.","title":"LibrarySearchReq"},{"location":"rpc/commands/#librarysearchresp","text":"Field Type Label Description libraries SearchedLibrary repeated The results of the search. status LibrarySearchStatus Whether the search yielded results.","title":"LibrarySearchResp"},{"location":"rpc/commands/#libraryuninstallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. name string Name of the library. version string The version of the library to uninstall.","title":"LibraryUninstallReq"},{"location":"rpc/commands/#libraryuninstallresp","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the uninstallation.","title":"LibraryUninstallResp"},{"location":"rpc/commands/#libraryupgradeallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response.","title":"LibraryUpgradeAllReq"},{"location":"rpc/commands/#libraryupgradeallresp","text":"Field Type Label Description progress DownloadProgress Progress of the downloads of files needed for the upgrades. task_progress TaskProgress Description of the current stage of the upgrade.","title":"LibraryUpgradeAllResp"},{"location":"rpc/commands/#searchedlibrary","text":"Field Type Label Description name string Library name. releases SearchedLibrary.ReleasesEntry repeated The index data for the available versions of the library. The key of the map is the library version. latest LibraryRelease The index data for the latest version of the library.","title":"SearchedLibrary"},{"location":"rpc/commands/#searchedlibraryreleasesentry","text":"Field Type Label Description key string value LibraryRelease","title":"SearchedLibrary.ReleasesEntry"},{"location":"rpc/commands/#ziplibraryinstallreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. Path string Path to the archived library","title":"ZipLibraryInstallReq"},{"location":"rpc/commands/#ziplibraryinstallresp","text":"Field Type Label Description task_progress TaskProgress Description of the current stage of the installation.","title":"ZipLibraryInstallResp"},{"location":"rpc/commands/#librarylayout","text":"Name Number Description flat_layout 0 Library is in the 1.0 Arduino library format. recursive_layout 1 Library is in the 1.5 Arduino library format.","title":"LibraryLayout"},{"location":"rpc/commands/#librarylocation","text":"Name Number Description ide_builtin 0 In the libraries subdirectory of the Arduino IDE installation. user 1 In the libraries subdirectory of the user directory (sketchbook). platform_builtin 2 In the libraries subdirectory of a platform. referenced_platform_builtin 3 When LibraryLocation is used in a context where a board is specified, this indicates the library is in the libraries subdirectory of a platform referenced by the board's platform.","title":"LibraryLocation"},{"location":"rpc/commands/#librarysearchstatus","text":"Name Number Description failed 0 No search results were found. success 1 Search results were found. Top","title":"LibrarySearchStatus"},{"location":"rpc/commands/#commandsuploadproto","text":"","title":"commands/upload.proto"},{"location":"rpc/commands/#burnbootloaderreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). port string The port of the programmer used to program the bootloader. verbose bool Whether to turn on verbose output during the programming. verify bool After programming, verify the contents of the memory on the board match the uploaded binary. programmer string The programmer to use for burning bootloader.","title":"BurnBootloaderReq"},{"location":"rpc/commands/#burnbootloaderresp","text":"Field Type Label Description out_stream bytes The output of the burn bootloader process. err_stream bytes The error output of the burn bootloader process.","title":"BurnBootloaderResp"},{"location":"rpc/commands/#listprogrammersavailableforuploadreq","text":"Field Type Label Description instance Instance fqbn string","title":"ListProgrammersAvailableForUploadReq"},{"location":"rpc/commands/#listprogrammersavailableforuploadresp","text":"Field Type Label Description programmers Programmer repeated","title":"ListProgrammersAvailableForUploadResp"},{"location":"rpc/commands/#uploadreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port string The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload. If set an UploadUsingProgrammer is triggered instead of a normal upload. The UploadUsingProgrammer call may also be used for explicit error check.","title":"UploadReq"},{"location":"rpc/commands/#uploadresp","text":"Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process.","title":"UploadResp"},{"location":"rpc/commands/#uploadusingprogrammerreq","text":"Field Type Label Description instance Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the target board (e.g., arduino:avr:uno ). If this field is not defined, the FQBN of the board attached to the sketch via the BoardAttach method is used. sketch_path string Path where the sketch to be uploaded is stored. Unless the import_file field is defined, the compiled binary is assumed to be at the location and filename under this path where it is saved by the Compile method. port string The port of the board. verbose bool Whether to turn on verbose output during the upload. verify bool After upload, verify that the contents of the memory on the board match the uploaded binary. import_file string When import_file is specified, it overrides the import_dir and sketch_path params. import_dir string Custom path to a directory containing compiled files. When import_dir is not specified, the standard build directory under sketch_path is used. programmer string The programmer to use for upload.","title":"UploadUsingProgrammerReq"},{"location":"rpc/commands/#uploadusingprogrammerresp","text":"Field Type Label Description out_stream bytes The output of the upload process. err_stream bytes The error output of the upload process.","title":"UploadUsingProgrammerResp"},{"location":"rpc/commands/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"rpc/debug/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 debug/debug.proto DebugConfigReq DebugReq DebugResp GetDebugConfigResp GetDebugConfigResp.ServerConfigurationEntry GetDebugConfigResp.ToolchainConfigurationEntry Debug Scalar Value Types Top debug/debug.proto \u00b6 DebugConfigReq \u00b6 Field Type Label Description instance cc.arduino.cli.commands.Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the board in use (e.g., arduino:samd:mkr1000 ). If this is omitted, the FQBN attached to the sketch will be used. sketch_path string Path to the sketch that is running on the board. The compiled executable is expected to be located under this path. port string Port of the debugger (optional). interpreter string Which GDB command interpreter to use. import_dir string Directory containing the compiled executable. If import_dir is not specified, the executable is assumed to be in {sketch_path}/build/{fqbn}/ . programmer string The programmer to use for debugging. DebugReq \u00b6 The top-level message sent by the client for the Debug method. Multiple DebugReq messages can be sent but the first message must contain a DebugConfigReq message to initialize the debug session. All subsequent messages must contain bytes to be sent to the debug session and must not contain a DebugReq message. Content must be either a debug session config or data to be sent. Field Type Label Description debugReq DebugConfigReq Provides information to the debug that specifies which is the target. The first StreamingOpenReq message must contain a DebugReq message. data bytes The data to be sent to the target being monitored. send_interrupt bool Set this to true to send and Interrupt signal to the debugger process DebugResp \u00b6 Field Type Label Description data bytes Incoming data from the debugger tool. error string Incoming error output from the debugger tool. GetDebugConfigResp \u00b6 Field Type Label Description executable string The executable binary to debug toolchain string The toolchain type used for the build (for example \"gcc\") toolchain_path string The toolchain directory toolchain_prefix string The toolchain architecture prefix (for example \"arm-none-eabi-\") server string The GDB server type used to connect to the programmer/board (for example \"openocd\") server_path string The GDB server directory toolchain_configuration GetDebugConfigResp.ToolchainConfigurationEntry repeated Extra configuration parameters wrt toolchain server_configuration GetDebugConfigResp.ServerConfigurationEntry repeated Extra configuration parameters wrt GDB server GetDebugConfigResp.ServerConfigurationEntry \u00b6 Field Type Label Description key string value string GetDebugConfigResp.ToolchainConfigurationEntry \u00b6 Field Type Label Description key string value string Debug \u00b6 Service that abstract a debug Session usage Method Name Request Type Response Type Description Debug DebugReq stream DebugResp stream Start a debug session and communicate with the debugger tool. GetDebugConfig DebugConfigReq GetDebugConfigResp Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"debug"},{"location":"rpc/debug/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/debug/#table-of-contents","text":"debug/debug.proto DebugConfigReq DebugReq DebugResp GetDebugConfigResp GetDebugConfigResp.ServerConfigurationEntry GetDebugConfigResp.ToolchainConfigurationEntry Debug Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/debug/#debugdebugproto","text":"","title":"debug/debug.proto"},{"location":"rpc/debug/#debugconfigreq","text":"Field Type Label Description instance cc.arduino.cli.commands.Instance Arduino Core Service instance from the Init response. fqbn string Fully qualified board name of the board in use (e.g., arduino:samd:mkr1000 ). If this is omitted, the FQBN attached to the sketch will be used. sketch_path string Path to the sketch that is running on the board. The compiled executable is expected to be located under this path. port string Port of the debugger (optional). interpreter string Which GDB command interpreter to use. import_dir string Directory containing the compiled executable. If import_dir is not specified, the executable is assumed to be in {sketch_path}/build/{fqbn}/ . programmer string The programmer to use for debugging.","title":"DebugConfigReq"},{"location":"rpc/debug/#debugreq","text":"The top-level message sent by the client for the Debug method. Multiple DebugReq messages can be sent but the first message must contain a DebugConfigReq message to initialize the debug session. All subsequent messages must contain bytes to be sent to the debug session and must not contain a DebugReq message. Content must be either a debug session config or data to be sent. Field Type Label Description debugReq DebugConfigReq Provides information to the debug that specifies which is the target. The first StreamingOpenReq message must contain a DebugReq message. data bytes The data to be sent to the target being monitored. send_interrupt bool Set this to true to send and Interrupt signal to the debugger process","title":"DebugReq"},{"location":"rpc/debug/#debugresp","text":"Field Type Label Description data bytes Incoming data from the debugger tool. error string Incoming error output from the debugger tool.","title":"DebugResp"},{"location":"rpc/debug/#getdebugconfigresp","text":"Field Type Label Description executable string The executable binary to debug toolchain string The toolchain type used for the build (for example \"gcc\") toolchain_path string The toolchain directory toolchain_prefix string The toolchain architecture prefix (for example \"arm-none-eabi-\") server string The GDB server type used to connect to the programmer/board (for example \"openocd\") server_path string The GDB server directory toolchain_configuration GetDebugConfigResp.ToolchainConfigurationEntry repeated Extra configuration parameters wrt toolchain server_configuration GetDebugConfigResp.ServerConfigurationEntry repeated Extra configuration parameters wrt GDB server","title":"GetDebugConfigResp"},{"location":"rpc/debug/#getdebugconfigrespserverconfigurationentry","text":"Field Type Label Description key string value string","title":"GetDebugConfigResp.ServerConfigurationEntry"},{"location":"rpc/debug/#getdebugconfigresptoolchainconfigurationentry","text":"Field Type Label Description key string value string","title":"GetDebugConfigResp.ToolchainConfigurationEntry"},{"location":"rpc/debug/#debug","text":"Service that abstract a debug Session usage Method Name Request Type Response Type Description Debug DebugReq stream DebugResp stream Start a debug session and communicate with the debugger tool. GetDebugConfig DebugConfigReq GetDebugConfigResp","title":"Debug"},{"location":"rpc/debug/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"rpc/monitor/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 monitor/monitor.proto MonitorConfig StreamingOpenReq StreamingOpenResp MonitorConfig.TargetType Monitor Scalar Value Types Top monitor/monitor.proto \u00b6 MonitorConfig \u00b6 Tells the monitor which target to open and provides additional parameters that might be needed to configure the target or the monitor itself. Field Type Label Description target string The target name. type MonitorConfig.TargetType additionalConfig google.protobuf.Struct Additional parameters that might be needed to configure the target or the monitor itself. StreamingOpenReq \u00b6 The top-level message sent by the client for the StreamingOpen method. Multiple StreamingOpenReq messages can be sent but the first message must contain a monitor_config message to initialize the monitor target. All subsequent messages must contain bytes to be sent to the target and must not contain a monitor_config message. Field Type Label Description monitorConfig MonitorConfig Provides information to the monitor that specifies which is the target. The first StreamingOpenReq message must contain a monitor_config message. data bytes The data to be sent to the target being monitored. StreamingOpenResp \u00b6 Field Type Label Description data bytes The data received from the target. MonitorConfig.TargetType \u00b6 Name Number Description SERIAL 0 Monitor \u00b6 Service that abstracts a Monitor usage Method Name Request Type Response Type Description StreamingOpen StreamingOpenReq stream StreamingOpenResp stream Open a bidirectional monitor stream. This can be used to implement something similar to the Arduino IDE's Serial Monitor. Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"monitor"},{"location":"rpc/monitor/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/monitor/#table-of-contents","text":"monitor/monitor.proto MonitorConfig StreamingOpenReq StreamingOpenResp MonitorConfig.TargetType Monitor Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/monitor/#monitormonitorproto","text":"","title":"monitor/monitor.proto"},{"location":"rpc/monitor/#monitorconfig","text":"Tells the monitor which target to open and provides additional parameters that might be needed to configure the target or the monitor itself. Field Type Label Description target string The target name. type MonitorConfig.TargetType additionalConfig google.protobuf.Struct Additional parameters that might be needed to configure the target or the monitor itself.","title":"MonitorConfig"},{"location":"rpc/monitor/#streamingopenreq","text":"The top-level message sent by the client for the StreamingOpen method. Multiple StreamingOpenReq messages can be sent but the first message must contain a monitor_config message to initialize the monitor target. All subsequent messages must contain bytes to be sent to the target and must not contain a monitor_config message. Field Type Label Description monitorConfig MonitorConfig Provides information to the monitor that specifies which is the target. The first StreamingOpenReq message must contain a monitor_config message. data bytes The data to be sent to the target being monitored.","title":"StreamingOpenReq"},{"location":"rpc/monitor/#streamingopenresp","text":"Field Type Label Description data bytes The data received from the target.","title":"StreamingOpenResp"},{"location":"rpc/monitor/#monitorconfigtargettype","text":"Name Number Description SERIAL 0","title":"MonitorConfig.TargetType"},{"location":"rpc/monitor/#monitor","text":"Service that abstracts a Monitor usage Method Name Request Type Response Type Description StreamingOpen StreamingOpenReq stream StreamingOpenResp stream Open a bidirectional monitor stream. This can be used to implement something similar to the Arduino IDE's Serial Monitor.","title":"Monitor"},{"location":"rpc/monitor/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"rpc/settings/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 settings/settings.proto GetAllRequest GetValueRequest MergeResponse RawData SetValueResponse Value Settings Scalar Value Types Top settings/settings.proto \u00b6 GetAllRequest \u00b6 GetValueRequest \u00b6 Field Type Label Description key string The key of the setting. MergeResponse \u00b6 RawData \u00b6 Field Type Label Description jsonData string The settings, in JSON format. SetValueResponse \u00b6 Value \u00b6 Field Type Label Description key string The key of the setting. jsonData string The setting, in JSON format. Settings \u00b6 The Settings service provides an interface to Arduino CLI's configuration options Method Name Request Type Response Type Description GetAll GetAllRequest RawData List all the settings. Merge RawData MergeResponse Set multiple settings values at once. GetValue GetValueRequest Value Get the value of a specific setting. SetValue Value SetValueResponse Set the value of a specific setting. Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"settings"},{"location":"rpc/settings/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/settings/#table-of-contents","text":"settings/settings.proto GetAllRequest GetValueRequest MergeResponse RawData SetValueResponse Value Settings Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/settings/#settingssettingsproto","text":"","title":"settings/settings.proto"},{"location":"rpc/settings/#getallrequest","text":"","title":"GetAllRequest"},{"location":"rpc/settings/#getvaluerequest","text":"Field Type Label Description key string The key of the setting.","title":"GetValueRequest"},{"location":"rpc/settings/#mergeresponse","text":"","title":"MergeResponse"},{"location":"rpc/settings/#rawdata","text":"Field Type Label Description jsonData string The settings, in JSON format.","title":"RawData"},{"location":"rpc/settings/#setvalueresponse","text":"","title":"SetValueResponse"},{"location":"rpc/settings/#value","text":"Field Type Label Description key string The key of the setting. jsonData string The setting, in JSON format.","title":"Value"},{"location":"rpc/settings/#settings","text":"The Settings service provides an interface to Arduino CLI's configuration options Method Name Request Type Response Type Description GetAll GetAllRequest RawData List all the settings. Merge RawData MergeResponse Set multiple settings values at once. GetValue GetValueRequest Value Get the value of a specific setting. SetValue Value SetValueResponse Set the value of a specific setting.","title":"Settings"},{"location":"rpc/settings/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"}]}